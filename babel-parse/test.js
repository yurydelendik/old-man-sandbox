/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 218);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(46);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(171);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(343);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(347);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (true) {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(24);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (true) {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/react/react.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(43);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/PropTypes.js


var subscriptionShape = prop_types_default.a.shape({
  trySubscribe: prop_types_default.a.func.isRequired,
  tryUnsubscribe: prop_types_default.a.func.isRequired,
  notifyNestedSubs: prop_types_default.a.func.isRequired,
  isSubscribed: prop_types_default.a.func.isRequired
});

var storeShape = prop_types_default.a.shape({
  subscribe: prop_types_default.a.func.isRequired,
  dispatch: prop_types_default.a.func.isRequired,
  getState: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/warning.js
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}
// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }
  didWarnAboutReceivingStore = true;

  warning('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

function createProvider() {
  var _Provider$childContex;

  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  var subKey = arguments[1];

  var subscriptionKey = subKey || storeKey + 'Subscription';

  var Provider = function (_Component) {
    _inherits(Provider, _Component);

    Provider.prototype.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
    };

    function Provider(props, context) {
      _classCallCheck(this, Provider);

      var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

      _this[storeKey] = props.store;
      return _this;
    }

    Provider.prototype.render = function render() {
      return react["Children"].only(this.props.children);
    };

    return Provider;
  }(react["Component"]);

  if (true) {
    Provider.prototype.componentWillReceiveProps = function (nextProps) {
      if (this[storeKey] !== nextProps.store) {
        warnAboutReceivingStore();
      }
    };
  }

  Provider.propTypes = {
    store: storeShape.isRequired,
    children: prop_types_default.a.element.isRequired
  };
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);

  return Provider;
}

/* harmony default export */ var components_Provider = (createProvider());
// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/index.js
var hoist_non_react_statics = __webpack_require__(350);
var hoist_non_react_statics_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics);

// EXTERNAL MODULE: ./node_modules/invariant/browser.js
var browser = __webpack_require__(351);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js
function Subscription__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants

var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  // the current/next pattern is copied from redux's createStore code.
  // TODO: refactor+expose that code to be reusable here?
  var current = [];
  var next = [];

  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    get: function get() {
      return next;
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);

      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;

        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription = function () {
  function Subscription(store, parentSub, onStateChange) {
    Subscription__classCallCheck(this, Subscription);

    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  Subscription.prototype.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  Subscription.prototype.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  Subscription.prototype.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);

      this.listeners = createListenerCollection();
    }
  };

  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();


// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connectAdvanced.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function connectAdvanced__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function connectAdvanced__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function connectAdvanced__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }








var hotReloadingVersion = 0;
var dummyState = {};
function noop() {}
function makeSelectorStateful(sourceSelector, store) {
  // wrap the selector in an object that tracks its results between runs.
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);
        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };

  return selector;
}

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory) {
  var _contextTypes, _childContextTypes;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$getDisplayName = _ref.getDisplayName,
      getDisplayName = _ref$getDisplayName === undefined ? function (name) {
    return 'ConnectAdvanced(' + name + ')';
  } : _ref$getDisplayName,
      _ref$methodName = _ref.methodName,
      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
      _ref$renderCountProp = _ref.renderCountProp,
      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
      _ref$storeKey = _ref.storeKey,
      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
      _ref$withRef = _ref.withRef,
      withRef = _ref$withRef === undefined ? false : _ref$withRef,
      connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;

  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);

  return function wrapWithConnect(WrappedComponent) {
    browser_default()(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var Connect = function (_Component) {
      connectAdvanced__inherits(Connect, _Component);

      function Connect(props, context) {
        connectAdvanced__classCallCheck(this, Connect);

        var _this = connectAdvanced__possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);

        browser_default()(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

        _this.initSelector();
        _this.initSubscription();
        return _this;
      }

      Connect.prototype.getChildContext = function getChildContext() {
        var _ref2;

        // If this component received store from props, its subscription should be transparent
        // to any descendants receiving store+subscription from context; it passes along
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
        // Connect to control ordering of notifications to flow top-down.
        var subscription = this.propsMode ? null : this.subscription;
        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
      };

      Connect.prototype.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return;

        // componentWillMount fires during server side rendering, but componentDidMount and
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
        // To handle the case where a child component may have triggered a state change by
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
        // re-render.
        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
        browser_default()(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
        return this.wrappedInstance;
      };

      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      Connect.prototype.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      Connect.prototype.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return;

        // parentSub's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.
        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this));

        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
        // the middle of the notification loop, where `this.subscription` will then be null. An
        // extra null check every change can be avoided by copying the method onto `this` and then
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
        // listeners logic is changed to not call listeners that have been unsubscribed in the
        // middle of the notification loop.
        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      Connect.prototype.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
        // needs to notify nested subs. Once called, it unimplements itself until further state
        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
        // a boolean check every time avoids an extra method call most of the time, resulting
        // in some perf boost.
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      Connect.prototype.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      Connect.prototype.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;
        // make a shallow copy so that fields added don't leak to the original selector.
        // this is especially important for 'ref' since that's a reference back to the component
        // instance. a singleton memoized selector would then be holding a reference to the
        // instance, preventing the instance from being garbage collected, and that would be bad
        var withExtras = _extends({}, props);
        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      Connect.prototype.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return Object(react["createElement"])(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(react["Component"]);

    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;
    Connect.propTypes = contextTypes;

    if (true) {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        var _this2 = this;

        // We are hot reloading!
        if (this.version !== version) {
          this.version = version;
          this.initSelector();

          // If any connected descendants don't hot reload (and resubscribe in the process), their
          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
          // listeners, this does mean that the old versions of connected descendants will still be
          // notified of state changes; however, their onStateChange function is a no-op so this
          // isn't a huge deal.
          var oldListeners = [];

          if (this.subscription) {
            oldListeners = this.subscription.listeners.get();
            this.subscription.tryUnsubscribe();
          }
          this.initSubscription();
          if (shouldHandleStateChanges) {
            this.subscription.trySubscribe();
            oldListeners.forEach(function (listener) {
              return _this2.subscription.listeners.subscribe(listener);
            });
          }
        }
      };
    }

    return hoist_non_react_statics_default()(Connect, WrappedComponent);
  };
}
// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}
// EXTERNAL MODULE: ./node_modules/redux/es/index.js + 6 modules
var es = __webpack_require__(44);

// EXTERNAL MODULE: ./node_modules/lodash-es/isPlainObject.js + 8 modules
var isPlainObject = __webpack_require__(114);

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/verifyPlainObject.js



function verifyPlainObject(value, displayName, methodName) {
  if (!Object(isPlainObject["a" /* default */])(value)) {
    warning(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
  }
}
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js


function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
// 
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
// 
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//    
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//    
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//    
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };

    // allow detectFactoryAndVerify to get ownProps
    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (true) verifyPlainObject(props, displayName, methodName);

      return props;
    };

    return proxy;
  };
}
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js



function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}

function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
    return { dispatch: dispatch };
  }) : undefined;
}

function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
    return Object(es["bindActionCreators"])(mapDispatchToProps, dispatch);
  }) : undefined;
}

/* harmony default export */ var connect_mapDispatchToProps = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js


function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
}

function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function () {
    return {};
  }) : undefined;
}

/* harmony default export */ var connect_mapStateToProps = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js
var mergeProps__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return mergeProps__extends({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;

    var hasRunOnce = false;
    var mergedProps = void 0;

    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;

        if (true) verifyPlainObject(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

/* harmony default export */ var connect_mergeProps = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js


function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      warning('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js
function selectorFactory__objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}

function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;

  var hasRunAtLeastOnce = false;
  var state = void 0;
  var ownProps = void 0;
  var stateProps = void 0;
  var dispatchProps = void 0;
  var mergedProps = void 0;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;

    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);

    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;

    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = selectorFactory__objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (true) {
    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;

  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js
var connect__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function connect__objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }








/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
  };
}

function strictEqual(a, b) {
  return a === b;
}

// createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios
function createConnect() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === undefined ? connectAdvanced : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? connect_mapStateToProps : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? connect_mapDispatchToProps : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === undefined ? connect_mergeProps : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === undefined ? finalPropsSelectorFactory : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref2$pure = _ref2.pure,
        pure = _ref2$pure === undefined ? true : _ref2$pure,
        _ref2$areStatesEqual = _ref2.areStatesEqual,
        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? shallowEqual : _ref2$areOwnPropsEqua,
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? shallowEqual : _ref2$areStatePropsEq,
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? shallowEqual : _ref2$areMergedPropsE,
        extraOptions = connect__objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');

    return connectHOC(selectorFactory, connect__extends({
      // used in error messages
      methodName: 'connect',

      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return 'Connect(' + name + ')';
      },

      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),

      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual

    }, extraOptions));
  };
}

/* harmony default export */ var connect_connect = (createConnect());
// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Provider", function() { return components_Provider; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "createProvider", function() { return createProvider; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "connectAdvanced", function() { return connectAdvanced; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "connect", function() { return connect_connect; });






/***/ }),
/* 10 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			memo[selector] = fn.call(this, selector);
		}

		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(420);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(null, arg));
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var DOMProperty = __webpack_require__(34);
var ReactDOMComponentFlags = __webpack_require__(146);

var invariant = __webpack_require__(5);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ?  true ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ?  true ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectedThreadSelectors = exports.selectorsForThread = exports.getProfileTaskTracerData = exports.getThreadNames = exports.getThreads = exports.getProfileInterval = exports.getProfile = exports.getTasksByThread = exports.getDisplayRange = exports.getZeroAt = exports.getScrollToSelectionGeneration = exports.getProfileRootRange = exports.getProfileViewOptions = exports.getProfileView = undefined;

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _symbolication = __webpack_require__(120);

var _redux = __webpack_require__(44);

var _reselect = __webpack_require__(125);

var _memoizeImmutable = __webpack_require__(390);

var _memoizeImmutable2 = _interopRequireDefault(_memoizeImmutable);

var _weaktuplemap = __webpack_require__(392);

var _weaktuplemap2 = _interopRequireDefault(_weaktuplemap);

var _transforms = __webpack_require__(190);

var Transforms = _interopRequireWildcard(_transforms);

var _urlState = __webpack_require__(15);

var UrlState = _interopRequireWildcard(_urlState);

var _profileData = __webpack_require__(19);

var ProfileData = _interopRequireWildcard(_profileData);

var _stackTiming = __webpack_require__(396);

var StackTiming = _interopRequireWildcard(_stackTiming);

var _markerTiming = __webpack_require__(397);

var MarkerTiming = _interopRequireWildcard(_markerTiming);

var _callTree = __webpack_require__(398);

var CallTree = _interopRequireWildcard(_callTree);

var _taskTracer = __webpack_require__(79);

var TaskTracerTools = _interopRequireWildcard(_taskTracer);

var _stackChart = __webpack_require__(127);

var _lodash = __webpack_require__(401);

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function profile() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ProfileData.getEmptyProfile();
  var action = arguments[1];

  switch (action.type) {
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      return action.profile;
    case 'COALESCED_FUNCTIONS_UPDATE':
      {
        if (!state.threads.length) {
          return state;
        }
        var functionsUpdatePerThread = action.functionsUpdatePerThread;

        var threads = state.threads.map(function (thread, threadIndex) {
          if (!functionsUpdatePerThread[threadIndex]) {
            return thread;
          }
          var _functionsUpdatePerTh = functionsUpdatePerThread[threadIndex],
              oldFuncToNewFuncMap = _functionsUpdatePerTh.oldFuncToNewFuncMap,
              funcIndices = _functionsUpdatePerTh.funcIndices,
              funcNames = _functionsUpdatePerTh.funcNames;

          return (0, _symbolication.setFuncNames)((0, _symbolication.applyFunctionMerging)(thread, oldFuncToNewFuncMap), funcIndices, funcNames);
        });
        return Object.assign({}, state, { threads: threads });
      }
    case 'ASSIGN_TASK_TRACER_NAMES':
      {
        if (!state.tasktracer.taskTable.length) {
          return state;
        }
        var addressIndices = action.addressIndices,
            symbolNames = action.symbolNames;

        var tasktracer = (0, _symbolication.setTaskTracerNames)(state.tasktracer, addressIndices, symbolNames);
        return Object.assign({}, state, { tasktracer: tasktracer });
      }
    default:
      return state;
  }
}

function symbolicationStatus() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'DONE';
  var action = arguments[1];

  switch (action.type) {
    case 'START_SYMBOLICATING':
      return 'SYMBOLICATING';
    case 'DONE_SYMBOLICATING':
      return 'DONE';
    default:
      return state;
  }
}

function viewOptionsPerThread() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      return action.profile.threads.map(function () {
        return {
          selectedCallNodePath: [],
          expandedCallNodePaths: [],
          selectedMarker: -1
        };
      });
    case 'COALESCED_FUNCTIONS_UPDATE':
      {
        var functionsUpdatePerThread = action.functionsUpdatePerThread;
        // For each thread, apply oldFuncToNewFuncMap to that thread's
        // selectedCallNodePath and expandedCallNodePaths.

        return state.map(function (threadViewOptions, threadIndex) {
          if (!functionsUpdatePerThread[threadIndex]) {
            return threadViewOptions;
          }
          var oldFuncToNewFuncMap = functionsUpdatePerThread[threadIndex].oldFuncToNewFuncMap;

          return {
            selectedCallNodePath: threadViewOptions.selectedCallNodePath.map(function (oldFunc) {
              var newFunc = oldFuncToNewFuncMap.get(oldFunc);
              return newFunc === undefined ? oldFunc : newFunc;
            }),
            expandedCallNodePaths: threadViewOptions.expandedCallNodePaths.map(function (oldPath) {
              return oldPath.map(function (oldFunc) {
                var newFunc = oldFuncToNewFuncMap.get(oldFunc);
                return newFunc === undefined ? oldFunc : newFunc;
              });
            }),
            selectedMarker: threadViewOptions.selectedMarker
          };
        });
      }
    case 'CHANGE_SELECTED_CALL_NODE':
      {
        var selectedCallNodePath = action.selectedCallNodePath,
            threadIndex = action.threadIndex;

        var expandedCallNodePaths = state[threadIndex].expandedCallNodePaths.slice();
        for (var i = 1; i < selectedCallNodePath.length; i++) {
          expandedCallNodePaths.push(selectedCallNodePath.slice(0, i));
        }
        return [].concat((0, _toConsumableArray3.default)(state.slice(0, threadIndex)), [Object.assign({}, state[threadIndex], {
          selectedCallNodePath: selectedCallNodePath,
          expandedCallNodePaths: expandedCallNodePaths
        })], (0, _toConsumableArray3.default)(state.slice(threadIndex + 1)));
      }
    case 'CHANGE_EXPANDED_CALL_NODES':
      {
        var _threadIndex = action.threadIndex,
            _expandedCallNodePaths = action.expandedCallNodePaths;

        return [].concat((0, _toConsumableArray3.default)(state.slice(0, _threadIndex)), [Object.assign({}, state[_threadIndex], { expandedCallNodePaths: _expandedCallNodePaths })], (0, _toConsumableArray3.default)(state.slice(_threadIndex + 1)));
      }
    case 'CHANGE_SELECTED_MARKER':
      {
        var _threadIndex2 = action.threadIndex,
            selectedMarker = action.selectedMarker;

        return [].concat((0, _toConsumableArray3.default)(state.slice(0, _threadIndex2)), [Object.assign({}, state[_threadIndex2], { selectedMarker: selectedMarker })], (0, _toConsumableArray3.default)(state.slice(_threadIndex2 + 1)));
      }
    case 'ADD_TRANSFORM_TO_STACK':
      {
        var _threadIndex3 = action.threadIndex,
            transform = action.transform,
            transformedThread = action.transformedThread;

        var _expandedCallNodePaths2 = (0, _lodash2.default)(state[_threadIndex3].expandedCallNodePaths.map(function (path) {
          return Transforms.applyTransformToCallNodePath(path, transform, transformedThread);
        }).filter(function (path) {
          return path.length > 0;
        }), Transforms.pathsAreEqual);

        var _selectedCallNodePath = Transforms.applyTransformToCallNodePath(state[_threadIndex3].selectedCallNodePath, transform, transformedThread);

        return [].concat((0, _toConsumableArray3.default)(state.slice(0, _threadIndex3)), [Object.assign({}, state[_threadIndex3], {
          selectedCallNodePath: _selectedCallNodePath,
          expandedCallNodePaths: _expandedCallNodePaths2
        })], (0, _toConsumableArray3.default)(state.slice(_threadIndex3 + 1)));
      }
    case 'CHANGE_IMPLEMENTATION_FILTER':
      {
        var _transformedThread = action.transformedThread,
            _threadIndex4 = action.threadIndex,
            previousImplementation = action.previousImplementation,
            implementation = action.implementation;


        if (previousImplementation === implementation) {
          return state;
        }

        // This CallNodePath may need to be updated twice.
        var _selectedCallNodePath2 = state[_threadIndex4].selectedCallNodePath;

        if (implementation === 'combined') {
          // Restore the full CallNodePaths
          _selectedCallNodePath2 = Transforms.restoreAllFunctionsInCallNodePath(_transformedThread, previousImplementation, _selectedCallNodePath2);
        } else {
          if (previousImplementation !== 'combined') {
            // Restore the CallNodePath back to an unfiltered state before re-filtering
            // it on the next implementation.
            _selectedCallNodePath2 = Transforms.restoreAllFunctionsInCallNodePath(_transformedThread, previousImplementation, _selectedCallNodePath2);
          }
          // Take the full CallNodePath, and strip out anything not in this implementation.
          _selectedCallNodePath2 = Transforms.filterCallNodePathByImplementation(_transformedThread, implementation, _selectedCallNodePath2);
        }

        var _expandedCallNodePaths3 = [];
        for (var _i = 1; _i < _selectedCallNodePath2.length; _i++) {
          _expandedCallNodePaths3.push(_selectedCallNodePath2.slice(0, _i));
        }

        return [].concat((0, _toConsumableArray3.default)(state.slice(0, _threadIndex4)), [Object.assign({}, state[_threadIndex4], {
          selectedCallNodePath: _selectedCallNodePath2,
          expandedCallNodePaths: _expandedCallNodePaths3
        })], (0, _toConsumableArray3.default)(state.slice(_threadIndex4 + 1)));
      }
    default:
      return state;
  }
}

function waitingForLibs() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();
  var action = arguments[1];

  switch (action.type) {
    case 'REQUESTING_SYMBOL_TABLE':
      {
        var newState = new Set(state);
        newState.add(action.requestedLib);
        return newState;
      }
    case 'RECEIVED_SYMBOL_TABLE_REPLY':
      {
        var _newState = new Set(state);
        _newState.delete(action.requestedLib);
        return _newState;
      }
    default:
      return state;
  }
}

function selection() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { hasSelection: false, isModifying: false };
  var action = arguments[1];

  // TODO: Rename to timeRangeSelection
  switch (action.type) {
    case 'UPDATE_PROFILE_SELECTION':
      return action.selection;
    default:
      return state;
  }
}

function scrollToSelectionGeneration() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_INVERT_CALLSTACK':
    case 'CHANGE_JS_ONLY':
    case 'CHANGE_SELECTED_CALL_NODE':
    case 'CHANGE_SELECTED_THREAD':
    case 'HIDE_THREAD':
      return state + 1;
    default:
      return state;
  }
}

function rootRange() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { start: 0, end: 1 };
  var action = arguments[1];

  switch (action.type) {
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      return ProfileData.getTimeRangeIncludingAllThreads(action.profile);
    default:
      return state;
  }
}

function zeroAt() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments[1];

  switch (action.type) {
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      return ProfileData.getTimeRangeIncludingAllThreads(action.profile).start;
    default:
      return state;
  }
}

function tabOrder() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 1, 2, 3, 4];
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_TAB_ORDER':
      return action.tabOrder;
    default:
      return state;
  }
}

var profileViewReducer = (0, _redux.combineReducers)({
  viewOptions: (0, _redux.combineReducers)({
    perThread: viewOptionsPerThread,
    symbolicationStatus: symbolicationStatus,
    waitingForLibs: waitingForLibs,
    selection: selection,
    scrollToSelectionGeneration: scrollToSelectionGeneration,
    rootRange: rootRange,
    zeroAt: zeroAt,
    tabOrder: tabOrder
  }),
  profile: profile
});
exports.default = profileViewReducer;
var getProfileView = exports.getProfileView = function getProfileView(state) {
  return state.profileView;
};

/**
 * Profile View Options
 */
var getProfileViewOptions = exports.getProfileViewOptions = function getProfileViewOptions(state) {
  return getProfileView(state).viewOptions;
};
var getProfileRootRange = exports.getProfileRootRange = function getProfileRootRange(state) {
  return getProfileViewOptions(state).rootRange;
};

var getScrollToSelectionGeneration = exports.getScrollToSelectionGeneration = (0, _reselect.createSelector)(getProfileViewOptions, function (viewOptions) {
  return viewOptions.scrollToSelectionGeneration;
});

var getZeroAt = exports.getZeroAt = (0, _reselect.createSelector)(getProfileViewOptions, function (viewOptions) {
  return viewOptions.zeroAt;
});

var getDisplayRange = exports.getDisplayRange = (0, _reselect.createSelector)(function (state) {
  return getProfileViewOptions(state).rootRange;
}, function (state) {
  return getProfileViewOptions(state).zeroAt;
}, UrlState.getRangeFilters, function (rootRange, zeroAt, rangeFilters) {
  if (rangeFilters.length > 0) {
    var _rangeFilters = rangeFilters[rangeFilters.length - 1],
        start = _rangeFilters.start,
        end = _rangeFilters.end;

    start += zeroAt;
    end += zeroAt;
    return { start: start, end: end };
  }
  return rootRange;
});

var getTasksByThread = exports.getTasksByThread = (0, _reselect.createSelector)(function (state) {
  return getProfileTaskTracerData(state).taskTable;
}, function (state) {
  return getProfileTaskTracerData(state).threadTable;
}, TaskTracerTools.getTasksByThread);

/**
 * Profile
 */
var getProfile = exports.getProfile = function getProfile(state) {
  return getProfileView(state).profile;
};
var getProfileInterval = exports.getProfileInterval = function getProfileInterval(state) {
  return getProfile(state).meta.interval;
};
var getThreads = exports.getThreads = function getThreads(state) {
  return getProfile(state).threads;
};
var getThreadNames = exports.getThreadNames = function getThreadNames(state) {
  return getProfile(state).threads.map(function (t) {
    return t.name;
  });
};
var getProfileTaskTracerData = exports.getProfileTaskTracerData = function getProfileTaskTracerData(state) {
  return getProfile(state).tasktracer;
};

var selectorsForThreads = {};

var selectorsForThread = exports.selectorsForThread = function selectorsForThread(threadIndex) {
  if (!(threadIndex in selectorsForThreads)) {
    /**
     * The first per-thread selectors filter out and transform a thread based on user's
     * interactions. The transforms are order dependendent.
     *
     * 1. Unfiltered - The first selector gets the unmodified original thread.
     * 2. Range - New samples table with only samples in range.
     * 3. Transform - Apply the transform stack that modifies the stacks and samples.
     * 4. Implementation - Modify stacks and samples to only show a single implementation.
     * 5. Search - Exclude samples that don't include some text in the stack.
     * 6. Range selection - Only include samples that are within a user's sub-selection.
     */
    var _getThread = function _getThread(state) {
      return getProfile(state).threads[threadIndex];
    };
    var _getRangeFilteredThread = (0, _reselect.createSelector)(_getThread, getDisplayRange, function (thread, range) {
      var start = range.start,
          end = range.end;

      return ProfileData.filterThreadToRange(thread, start, end);
    });
    var applyTransform = function applyTransform(thread, transform) {
      switch (transform.type) {
        case 'focus-subtree':
          return transform.inverted ? Transforms.focusInvertedSubtree(thread, transform.callNodePath, transform.implementation) : Transforms.focusSubtree(thread, transform.callNodePath, transform.implementation);
        case 'merge-subtree':
          // TODO - Implement this transform.
          return thread;
        case 'merge-call-node':
          return Transforms.mergeCallNode(thread, transform.callNodePath, transform.implementation);
        case 'merge-function':
          return Transforms.mergeFunction(thread, transform.funcIndex);
        case 'focus-function':
          return Transforms.focusFunction(thread, transform.funcIndex);
        case 'collapse-resource':
          return Transforms.collapseResource(thread, transform.resourceIndex, transform.implementation);
        default:
          throw new Error('Unhandled transform.');
      }
    };
    // It becomes very expensive to apply each transform over and over again as they
    // typically take around 100ms to run per transform on a fast machine. Memoize
    // memoize each step individually so that they transform stack can be pushed and
    // popped frequently and easily.
    var applyTransformMemoized = (0, _memoizeImmutable2.default)(applyTransform, {
      limit: 15,
      cache: new _weaktuplemap2.default()
    });
    var _getTransformStack = function _getTransformStack(state) {
      return UrlState.getTransformStack(state, threadIndex);
    };
    var _getRangeAndTransformFilteredThread = (0, _reselect.createSelector)(_getRangeFilteredThread, _getTransformStack, function (startingThread, transforms) {
      return transforms.reduce(
      // Apply the reducer using an arrow function to ensure correct memoization.
      function (thread, transform) {
        return applyTransformMemoized(thread, transform);
      }, startingThread);
    });
    var _getImplementationFilteredThread = (0, _reselect.createSelector)(_getRangeAndTransformFilteredThread, UrlState.getImplementationFilter, ProfileData.filterThreadByImplementation);
    var _getImplementationAndSearchFilteredThread = (0, _reselect.createSelector)(_getImplementationFilteredThread, UrlState.getSearchString, function (thread, searchString) {
      return ProfileData.filterThreadToSearchString(thread, searchString);
    });
    var _getFilteredThread = (0, _reselect.createSelector)(_getImplementationAndSearchFilteredThread, UrlState.getInvertCallstack, function (thread, shouldInvertCallstack) {
      return shouldInvertCallstack ? ProfileData.invertCallstack(thread) : thread;
    });
    var _getRangeSelectionFilteredThread = (0, _reselect.createSelector)(_getFilteredThread, getProfileViewOptions, function (thread, viewOptions) {
      if (!viewOptions.selection.hasSelection) {
        return thread;
      }
      var _viewOptions$selectio = viewOptions.selection,
          selectionStart = _viewOptions$selectio.selectionStart,
          selectionEnd = _viewOptions$selectio.selectionEnd;

      return ProfileData.filterThreadToRange(thread, selectionStart, selectionEnd);
    });

    var _getViewOptions = function _getViewOptions(state) {
      return getProfileViewOptions(state).perThread[threadIndex];
    };
    var _getFriendlyThreadName = (0, _reselect.createSelector)(getThreads, _getThread, ProfileData.getFriendlyThreadName);
    var _getThreadProcessDetails = (0, _reselect.createSelector)(_getThread, ProfileData.getThreadProcessDetails);
    var _getTransformLabels = (0, _reselect.createSelector)(_getRangeAndTransformFilteredThread, _getFriendlyThreadName, _getTransformStack, Transforms.getTransformLabels);
    var _getRangeFilteredThreadSamples = (0, _reselect.createSelector)(_getRangeFilteredThread, function (thread) {
      return thread.samples;
    });
    var _getJankInstances = (0, _reselect.createSelector)(_getRangeFilteredThreadSamples, function (samples) {
      return ProfileData.getJankInstances(samples, 50);
    });
    var _getProcessedMarkersThread = (0, _reselect.createSelector)(_getThread, ProfileData.extractMarkerDataFromName);
    var _getTracingMarkers = (0, _reselect.createSelector)(_getProcessedMarkersThread, ProfileData.getTracingMarkers);
    var _getMarkerTiming = (0, _reselect.createSelector)(_getTracingMarkers, MarkerTiming.getMarkerTiming);
    var _getRangeSelectionFilteredTracingMarkers = (0, _reselect.createSelector)(_getTracingMarkers, getDisplayRange, function (markers, range) {
      var start = range.start,
          end = range.end;

      return ProfileData.filterTracingMarkersToRange(markers, start, end);
    });
    var _getRangeSelectionFilteredTracingMarkersForHeader = (0, _reselect.createSelector)(_getRangeSelectionFilteredTracingMarkers, function (markers) {
      return markers.filter(function (tm) {
        return tm.name !== 'GCMajor';
      });
    });
    var _getCallNodeInfo = (0, _reselect.createSelector)(_getFilteredThread, function (_ref) {
      var stackTable = _ref.stackTable,
          frameTable = _ref.frameTable,
          funcTable = _ref.funcTable;

      return ProfileData.getCallNodeInfo(stackTable, frameTable, funcTable);
    });
    var _getSelectedCallNodePath = (0, _reselect.createSelector)(_getViewOptions, function (threadViewOptions) {
      return threadViewOptions.selectedCallNodePath;
    });
    var _getSelectedCallNodeIndex = (0, _reselect.createSelector)(_getCallNodeInfo, _getSelectedCallNodePath, function (callNodeInfo, callNodePath) {
      return ProfileData.getCallNodeFromPath(callNodePath, callNodeInfo.callNodeTable);
    });
    var _getExpandedCallNodePaths = (0, _reselect.createSelector)(_getViewOptions, function (threadViewOptions) {
      return threadViewOptions.expandedCallNodePaths;
    });
    var _getExpandedCallNodeIndexes = (0, _reselect.createSelector)(_getCallNodeInfo, _getExpandedCallNodePaths, function (callNodeInfo, callNodePaths) {
      return callNodePaths.map(function (callNodePath) {
        return ProfileData.getCallNodeFromPath(callNodePath, callNodeInfo.callNodeTable);
      });
    });
    var _getCallTree = (0, _reselect.createSelector)(_getRangeSelectionFilteredThread, getProfileInterval, _getCallNodeInfo, UrlState.getImplementationFilter, UrlState.getInvertCallstack, CallTree.getCallTree);

    // The selectors below diverge from the thread filtering that's done above;
    // they respect the "hidePlatformDetails" setting instead of the "jsOnly"
    // setting. This type of filtering is needed for the stack chart.
    // This divergence is hopefully temporary, as we figure out how to filter
    // out unneeded detail from stacks in a way that satisfy both the stack
    // chart and the call tree.
    var _getFilteredThreadForStackChart = (0, _reselect.createSelector)(_getRangeFilteredThread, UrlState.getHidePlatformDetails, UrlState.getInvertCallstack, UrlState.getSearchString, function (thread, shouldHidePlatformDetails, shouldInvertCallstack, searchString) {
      // Unlike for the call tree filtered profile, the individual steps of
      // this filtering are not memoized. I hope it's not too bad.
      var filteredThread = thread;
      filteredThread = ProfileData.filterThreadToSearchString(filteredThread, searchString);
      if (shouldHidePlatformDetails) {
        filteredThread = ProfileData.collapsePlatformStackFrames(filteredThread);
      }
      if (shouldInvertCallstack) {
        filteredThread = ProfileData.invertCallstack(filteredThread);
      }
      return filteredThread;
    });
    var _getCallNodeInfoOfFilteredThreadForStackChart = (0, _reselect.createSelector)(_getFilteredThreadForStackChart, function (_ref2) {
      var stackTable = _ref2.stackTable,
          frameTable = _ref2.frameTable,
          funcTable = _ref2.funcTable;

      return ProfileData.getCallNodeInfo(stackTable, frameTable, funcTable);
    });
    var _getCallNodeMaxDepthForStackChart = (0, _reselect.createSelector)(_getFilteredThreadForStackChart, _getCallNodeInfoOfFilteredThreadForStackChart, StackTiming.computeCallNodeMaxDepth);
    var _getStackTimingByDepthForStackChart = (0, _reselect.createSelector)(_getFilteredThreadForStackChart, _getCallNodeInfoOfFilteredThreadForStackChart, _getCallNodeMaxDepthForStackChart, getProfileInterval, StackTiming.getStackTimingByDepth);
    var _getLeafCategoryStackTimingForStackChart = (0, _reselect.createSelector)(_getFilteredThreadForStackChart, getProfileInterval, _stackChart.getCategoryColorStrategy, StackTiming.getLeafCategoryStackTiming);
    var _getSearchFilteredMarkers = (0, _reselect.createSelector)(_getRangeSelectionFilteredThread, UrlState.getMarkersSearchString, ProfileData.getSearchFilteredMarkers);

    selectorsForThreads[threadIndex] = {
      getThread: _getThread,
      getViewOptions: _getViewOptions,
      getTransformStack: _getTransformStack,
      getTransformLabels: _getTransformLabels,
      getRangeFilteredThread: _getRangeFilteredThread,
      getRangeAndTransformFilteredThread: _getRangeAndTransformFilteredThread,
      getJankInstances: _getJankInstances,
      getProcessedMarkersThread: _getProcessedMarkersThread,
      getTracingMarkers: _getTracingMarkers,
      getMarkerTiming: _getMarkerTiming,
      getRangeSelectionFilteredTracingMarkers: _getRangeSelectionFilteredTracingMarkers,
      getRangeSelectionFilteredTracingMarkersForHeader: _getRangeSelectionFilteredTracingMarkersForHeader,
      getFilteredThread: _getFilteredThread,
      getRangeSelectionFilteredThread: _getRangeSelectionFilteredThread,
      getCallNodeInfo: _getCallNodeInfo,
      getSelectedCallNodePath: _getSelectedCallNodePath,
      getSelectedCallNodeIndex: _getSelectedCallNodeIndex,
      getExpandedCallNodePaths: _getExpandedCallNodePaths,
      getExpandedCallNodeIndexes: _getExpandedCallNodeIndexes,
      getCallTree: _getCallTree,
      getFilteredThreadForStackChart: _getFilteredThreadForStackChart,
      getCallNodeInfoOfFilteredThreadForStackChart: _getCallNodeInfoOfFilteredThreadForStackChart,
      getCallNodeMaxDepthForStackChart: _getCallNodeMaxDepthForStackChart,
      getStackTimingByDepthForStackChart: _getStackTimingByDepthForStackChart,
      getLeafCategoryStackTimingForStackChart: _getLeafCategoryStackTimingForStackChart,
      getFriendlyThreadName: _getFriendlyThreadName,
      getThreadProcessDetails: _getThreadProcessDetails,
      getSearchFilteredMarkers: _getSearchFilteredMarkers
    };
  }
  return selectorsForThreads[threadIndex];
};

var selectedThreadSelectors = exports.selectedThreadSelectors = function () {
  var anyThreadSelectors = selectorsForThread(0);
  var result = {};

  var _loop = function _loop(_key) {
    result[_key] = function (state) {
      return selectorsForThread(UrlState.getSelectedThreadIndex(state))[_key](state);
    };
  };

  for (var _key in anyThreadSelectors) {
    _loop(_key);
  }
  var result2 = result;
  return result2;
}();

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRangeFilterLabels = exports.getUrlPredictor = exports.getVisibleThreadOrder = exports.getHiddenThreads = exports.getThreadOrder = exports.getTransformStack = exports.getSelectedThreadIndex = exports.getSelectedTab = exports.getMarkersSearchString = exports.getSearchString = exports.getInvertCallstack = exports.getHidePlatformDetails = exports.getImplementationFilter = exports.getRangeFilters = exports.getProfileUrl = exports.getHash = exports.getDataSource = exports.getUrlState = undefined;

var _defineProperty2 = __webpack_require__(53);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _redux = __webpack_require__(44);

var _profileData = __webpack_require__(19);

var _reselect = __webpack_require__(125);

var _urlHandling = __webpack_require__(191);

var _rangeFilters = __webpack_require__(126);

var RangeFilters = _interopRequireWildcard(_rangeFilters);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Pre-allocate an array to help with strict equality tests in the selectors.
var EMPTY_TRANSFORM_STACK = []; /* This Source Code Form is subject to the terms of the Mozilla Public
                                 * License, v. 2.0. If a copy of the MPL was not distributed with this
                                 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function dataSource() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'none';
  var action = arguments[1];

  switch (action.type) {
    case 'WAITING_FOR_PROFILE_FROM_FILE':
      return 'from-file';
    case 'PROFILE_PUBLISHED':
      return 'public';
    default:
      return state;
  }
}

function hash() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var action = arguments[1];

  switch (action.type) {
    case 'PROFILE_PUBLISHED':
      return action.hash;
    default:
      return state;
  }
}

function profileUrl() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var action = arguments[1];

  switch (action.type) {
    default:
      return state;
  }
}

function selectedTab() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'calltree';
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_SELECTED_TAB':
      return action.selectedTab;
    default:
      return state;
  }
}

function rangeFilters() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case 'ADD_RANGE_FILTER':
      {
        var start = action.start,
            end = action.end;

        return [].concat((0, _toConsumableArray3.default)(state), [{ start: start, end: end }]);
      }
    case 'POP_RANGE_FILTERS':
      return state.slice(0, action.firstRemovedFilterIndex);
    default:
      return state;
  }
}

function selectedThread() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments[1];

  function findDefaultThreadIndex(threads) {
    var contentThreadId = threads.findIndex(function (thread) {
      return thread.name === 'GeckoMain' && thread.processType === 'tab';
    });
    return contentThreadId !== -1 ? contentThreadId : (0, _profileData.defaultThreadOrder)(threads)[0];
  }

  switch (action.type) {
    case 'CHANGE_SELECTED_THREAD':
      return action.selectedThread;
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_FILE':
      {
        // When loading in a brand new profile, select either the GeckoMain [tab] thread,
        // or the first thread in the thread order. For profiles from the Web, the
        // selectedThread has already been initialized from the URL and does not require
        // looking at the profile.
        return findDefaultThreadIndex(action.profile.threads);
      }
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
      {
        // For profiles from the web, we only need to ensure the selected thread
        // is actually valid.
        if (state < action.profile.threads.length) {
          return state;
        }
        return findDefaultThreadIndex(action.profile.threads);
      }
    case 'HIDE_THREAD':
      {
        var threadIndex = action.threadIndex,
            _hiddenThreads = action.hiddenThreads,
            _threadOrder = action.threadOrder;
        // If the currently selected thread is being hidden, then re-select a new one.

        if (state === threadIndex) {
          var index = _threadOrder.find(function (index) {
            return index !== threadIndex && !_hiddenThreads.includes(index);
          });
          if (index === undefined) {
            throw new Error('A new thread index must be found');
          }
          return index;
        }
        return state;
      }
    default:
      return state;
  }
}

function callTreeSearchString() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_CALL_TREE_SEARCH_STRING':
      return action.searchString;
    default:
      return state;
  }
}

function markersSearchString() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_MARKER_SEARCH_STRING':
      return action.searchString;
    default:
      return state;
  }
}

function transforms() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];

  switch (action.type) {
    case 'ADD_TRANSFORM_TO_STACK':
      {
        var threadIndex = action.threadIndex,
            transform = action.transform;

        var _transforms = state[threadIndex] || [];
        return Object.assign({}, state, (0, _defineProperty3.default)({}, threadIndex, [].concat((0, _toConsumableArray3.default)(_transforms), [transform])));
      }
    case 'POP_TRANSFORMS_FROM_STACK':
      {
        var _threadIndex = action.threadIndex,
            firstRemovedFilterIndex = action.firstRemovedFilterIndex;

        var _transforms2 = state[_threadIndex] || [];
        return Object.assign({}, state, (0, _defineProperty3.default)({}, _threadIndex, _transforms2.slice(0, firstRemovedFilterIndex)));
      }
    default:
      return state;
  }
}

/**
 * Represents the current filter applied to the stack frames, where it will show
 * frames only by implementation.
 */
function implementation() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'combined';
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_IMPLEMENTATION_FILTER':
      return action.implementation;
    default:
      return state;
  }
}

function invertCallstack() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_INVERT_CALLSTACK':
      return action.invertCallstack;
    default:
      return state;
  }
}

function hidePlatformDetails() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_HIDE_PLATFORM_DETAILS':
      return action.hidePlatformDetails;
    default:
      return state;
  }
}

function threadOrder() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      {
        // When receiving a new profile, try to use the thread order specified in the URL,
        // but ensure that the IDs are correct.
        var threads = (0, _profileData.defaultThreadOrder)(action.profile.threads);
        var validUrlThreads = state.filter(function (index) {
          return threads.includes(index);
        });
        var missingThreads = threads.filter(function (index) {
          return !state.includes(index);
        });
        return validUrlThreads.concat(missingThreads);
      }
    case 'CHANGE_THREAD_ORDER':
      return action.threadOrder;
    default:
      return state;
  }
}

function hiddenThreads() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      {
        // When receiving a new profile, try to use the hidden threads specified in the URL,
        // but ensure that the IDs are correct.
        var threads = action.profile.threads.map(function (_, threadIndex) {
          return threadIndex;
        });
        return state.filter(function (index) {
          return threads.includes(index);
        });
      }
    case 'HIDE_THREAD':
      return [].concat((0, _toConsumableArray3.default)(state), [action.threadIndex]);
    case 'SHOW_THREAD':
      {
        var threadIndex = action.threadIndex;

        return state.filter(function (index) {
          return index !== threadIndex;
        });
      }
    default:
      return state;
  }
}

var urlStateReducer = function (regularUrlStateReducer) {
  return function (state, action) {
    switch (action.type) {
      case '@@urlenhancer/updateUrlState':
        return action.urlState;
      default:
        return regularUrlStateReducer(state, action);
    }
  };
}((0, _redux.combineReducers)({
  dataSource: dataSource,
  hash: hash,
  profileUrl: profileUrl,
  selectedTab: selectedTab,
  rangeFilters: rangeFilters,
  selectedThread: selectedThread,
  callTreeSearchString: callTreeSearchString,
  implementation: implementation,
  invertCallstack: invertCallstack,
  hidePlatformDetails: hidePlatformDetails,
  threadOrder: threadOrder,
  hiddenThreads: hiddenThreads,
  markersSearchString: markersSearchString,
  transforms: transforms
}));
exports.default = urlStateReducer;
var getUrlState = exports.getUrlState = function getUrlState(state) {
  return state.urlState;
};

var getDataSource = exports.getDataSource = function getDataSource(state) {
  return getUrlState(state).dataSource;
};
var getHash = exports.getHash = function getHash(state) {
  return getUrlState(state).hash;
};
var getProfileUrl = exports.getProfileUrl = function getProfileUrl(state) {
  return getUrlState(state).profileUrl;
};
var getRangeFilters = exports.getRangeFilters = function getRangeFilters(state) {
  return getUrlState(state).rangeFilters;
};
var getImplementationFilter = exports.getImplementationFilter = function getImplementationFilter(state) {
  return getUrlState(state).implementation;
};
var getHidePlatformDetails = exports.getHidePlatformDetails = function getHidePlatformDetails(state) {
  return getUrlState(state).hidePlatformDetails;
};
var getInvertCallstack = exports.getInvertCallstack = function getInvertCallstack(state) {
  return getUrlState(state).invertCallstack;
};
var getSearchString = exports.getSearchString = function getSearchString(state) {
  return getUrlState(state).callTreeSearchString;
};
var getMarkersSearchString = exports.getMarkersSearchString = function getMarkersSearchString(state) {
  return getUrlState(state).markersSearchString;
};

var getSelectedTab = exports.getSelectedTab = function getSelectedTab(state) {
  return getUrlState(state).selectedTab;
};
var getSelectedThreadIndex = exports.getSelectedThreadIndex = function getSelectedThreadIndex(state) {
  return getUrlState(state).selectedThread;
};
var getTransformStack = exports.getTransformStack = function getTransformStack(state, threadIndex) {
  return getUrlState(state).transforms[threadIndex] || EMPTY_TRANSFORM_STACK;
};
var getThreadOrder = exports.getThreadOrder = function getThreadOrder(state) {
  return getUrlState(state).threadOrder;
};
var getHiddenThreads = exports.getHiddenThreads = function getHiddenThreads(state) {
  return getUrlState(state).hiddenThreads;
};
var getVisibleThreadOrder = exports.getVisibleThreadOrder = (0, _reselect.createSelector)(getThreadOrder, getHiddenThreads, function (threadOrder, hiddenThreads) {
  return threadOrder.filter(function (index) {
    return !hiddenThreads.includes(index);
  });
});
var getUrlPredictor = exports.getUrlPredictor = (0, _reselect.createSelector)(getUrlState, function (oldUrlState) {
  return function (actionOrActionList) {
    var actionList = Array.isArray(actionOrActionList) ? actionOrActionList : [actionOrActionList];
    var newUrlState = actionList.reduce(urlStateReducer, oldUrlState);
    return (0, _urlHandling.urlFromState)(newUrlState);
  };
});

var getRangeFilterLabels = exports.getRangeFilterLabels = (0, _reselect.createSelector)(getRangeFilters, RangeFilters.getRangeFilterLabels);

/***/ }),
/* 16 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(108)('wks')
  , uid        = __webpack_require__(75)
  , Symbol     = __webpack_require__(22).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resourceTypes = undefined;

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.getCallNodeInfo = getCallNodeInfo;
exports.getSampleCallNodes = getSampleCallNodes;
exports.getTimeRangeIncludingAllThreads = getTimeRangeIncludingAllThreads;
exports.defaultThreadOrder = defaultThreadOrder;
exports.toValidImplementationFilter = toValidImplementationFilter;
exports.filterThreadByImplementation = filterThreadByImplementation;
exports.collapsePlatformStackFrames = collapsePlatformStackFrames;
exports.filterThreadToSearchString = filterThreadToSearchString;
exports.filterThreadToRange = filterThreadToRange;
exports.getCallNodeFromPath = getCallNodeFromPath;
exports.getCallNodePath = getCallNodePath;
exports.invertCallstack = invertCallstack;
exports.getSampleIndexClosestToTime = getSampleIndexClosestToTime;
exports.getJankInstances = getJankInstances;
exports.getSearchFilteredMarkers = getSearchFilteredMarkers;
exports.extractMarkerDataFromName = extractMarkerDataFromName;
exports.getTracingMarkers = getTracingMarkers;
exports.filterTracingMarkersToRange = filterTracingMarkersToRange;
exports.getFriendlyThreadName = getFriendlyThreadName;
exports.getThreadProcessDetails = getThreadProcessDetails;
exports.getEmptyProfile = getEmptyProfile;

var _geckoProfileVersioning = __webpack_require__(122);

var _processedProfileVersioning = __webpack_require__(189);

var _timeCode = __webpack_require__(45);

var _taskTracer = __webpack_require__(79);

var _bisection = __webpack_require__(121);

var _bisection2 = _interopRequireDefault(_bisection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Various helpers for dealing with the profile as a data structure.
 * @module profile-data
 */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var resourceTypes = exports.resourceTypes = {
  unknown: 0,
  library: 1,
  addon: 2,
  webhost: 3,
  otherhost: 4,
  url: 5
};

/**
 * Generate the CallNodeInfo which contains the CallNodeTable, and a map to convert
 * an IndexIntoStackTable to a IndexIntoCallNodeTable. This function runs through
 * a stackTable, and de-duplicates stacks that have frames that point to the same
 * function.
 *
 * See `src/types/profile-derived.js` for the type definitions.
 * See `docs/call-trees.md` for a detailed explanation of CallNodes.
 */
function getCallNodeInfo(stackTable, frameTable, funcTable) {
  return (0, _timeCode.timeCode)('getCallNodeInfo', function () {
    var stackIndexToCallNodeIndex = new Uint32Array(stackTable.length);
    var funcCount = funcTable.length;
    // Maps can't key off of two items, so combine the prefixCallNode and the funcIndex
    // using the following formula: prefixCallNode * funcCount + funcIndex => callNode
    var prefixCallNodeAndFuncToCallNodeMap = new Map();

    // The callNodeTable components.
    var prefix = [];
    var func = [];
    var depth = [];
    var length = 0;

    function addCallNode(prefixIndex, funcIndex) {
      var index = length++;
      prefix[index] = prefixIndex;
      func[index] = funcIndex;
      if (prefixIndex === -1) {
        depth[index] = 0;
      } else {
        depth[index] = depth[prefixIndex] + 1;
      }
    }

    // Go through each stack, and create a new callNode table, which is based off of
    // functions rather than frames.
    for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
      var prefixStack = stackTable.prefix[stackIndex];
      // We know that at this point the following condition holds:
      // assert(prefixStack === null || prefixStack < stackIndex);
      var prefixCallNode = prefixStack === null ? -1 : stackIndexToCallNodeIndex[prefixStack];
      var frameIndex = stackTable.frame[stackIndex];
      var funcIndex = frameTable.func[frameIndex];
      var prefixCallNodeAndFuncIndex = prefixCallNode * funcCount + funcIndex;
      var callNodeIndex = prefixCallNodeAndFuncToCallNodeMap.get(prefixCallNodeAndFuncIndex);
      if (callNodeIndex === undefined) {
        callNodeIndex = length;
        addCallNode(prefixCallNode, funcIndex);
        prefixCallNodeAndFuncToCallNodeMap.set(prefixCallNodeAndFuncIndex, callNodeIndex);
      }
      stackIndexToCallNodeIndex[stackIndex] = callNodeIndex;
    }

    var callNodeTable = {
      prefix: new Int32Array(prefix),
      func: new Int32Array(func),
      depth: depth,
      length: length
    };

    return { callNodeTable: callNodeTable, stackIndexToCallNodeIndex: stackIndexToCallNodeIndex };
  });
}

function getSampleCallNodes(samples, stackIndexToCallNodeIndex) {
  return samples.stack.map(function (stack) {
    return stack === null ? null : stackIndexToCallNodeIndex[stack];
  });
}

function _getTimeRangeForThread(thread, interval) {
  if (thread.samples.length === 0) {
    return { start: Infinity, end: -Infinity };
  }
  return {
    start: thread.samples.time[0],
    end: thread.samples.time[thread.samples.length - 1] + interval
  };
}

function getTimeRangeIncludingAllThreads(profile) {
  var completeRange = { start: Infinity, end: -Infinity };
  profile.threads.forEach(function (thread) {
    var threadRange = _getTimeRangeForThread(thread, profile.meta.interval);
    completeRange.start = Math.min(completeRange.start, threadRange.start);
    completeRange.end = Math.max(completeRange.end, threadRange.end);
  });
  return completeRange;
}

function defaultThreadOrder(threads) {
  // Put the compositor/renderer thread last.
  var threadOrder = threads.map(function (thread, i) {
    return i;
  });
  threadOrder.sort(function (a, b) {
    var nameA = threads[a].name;
    var nameB = threads[b].name;
    if (nameA === nameB) {
      return a - b;
    }
    return nameA === 'Compositor' || nameA === 'Renderer' ? 1 : -1;
  });
  return threadOrder;
}

function toValidImplementationFilter(implementation) {
  switch (implementation) {
    case 'cpp':
    case 'js':
      return implementation;
    default:
      return 'combined';
  }
}

function filterThreadByImplementation(thread, implementation) {
  var funcTable = thread.funcTable,
      stringTable = thread.stringTable;


  switch (implementation) {
    case 'cpp':
      return _filterThreadByFunc(thread, function (funcIndex) {
        // Return quickly if this is a JS frame.
        if (funcTable.isJS[funcIndex]) {
          return false;
        }
        // Regular C++ functions are associated with a resource that describes the
        // shared library that these C++ functions were loaded from. Jitcode is not
        // loaded from shared libraries but instead generated at runtime, so Jitcode
        // frames are not associated with a shared library and thus have no resource
        var locationString = stringTable.getString(funcTable.name[funcIndex]);
        var isProbablyJitCode = funcTable.resource[funcIndex] === -1 && locationString.startsWith('0x');
        return !isProbablyJitCode;
      });
    case 'js':
      return _filterThreadByFunc(thread, function (funcIndex) {
        return funcTable.isJS[funcIndex];
      });
    default:
      return thread;
  }
}

function _filterThreadByFunc(thread, filter) {
  return (0, _timeCode.timeCode)('filterThread', function () {
    var stackTable = thread.stackTable,
        frameTable = thread.frameTable,
        samples = thread.samples;


    var newStackTable = {
      length: 0,
      frame: [],
      prefix: []
    };

    var oldStackToNewStack = new Map();
    var frameCount = frameTable.length;
    var prefixStackAndFrameToStack = new Map(); // prefixNewStack * frameCount + frame => newStackIndex

    function convertStack(stackIndex) {
      if (stackIndex === null) {
        return null;
      }
      var newStack = oldStackToNewStack.get(stackIndex);
      if (newStack === undefined) {
        var prefixNewStack = convertStack(stackTable.prefix[stackIndex]);
        var frameIndex = stackTable.frame[stackIndex];
        var funcIndex = frameTable.func[frameIndex];
        if (filter(funcIndex)) {
          var prefixStackAndFrameIndex = (prefixNewStack === null ? -1 : prefixNewStack) * frameCount + frameIndex;
          newStack = prefixStackAndFrameToStack.get(prefixStackAndFrameIndex);
          if (newStack === undefined) {
            newStack = newStackTable.length++;
            newStackTable.prefix[newStack] = prefixNewStack;
            newStackTable.frame[newStack] = frameIndex;
          }
          oldStackToNewStack.set(stackIndex, newStack);
          prefixStackAndFrameToStack.set(prefixStackAndFrameIndex, newStack);
        } else {
          newStack = prefixNewStack;
        }
      }
      return newStack;
    }

    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (oldStack) {
        return convertStack(oldStack);
      })
    });

    return Object.assign({}, thread, {
      samples: newSamples,
      stackTable: newStackTable
    });
  });
}

/**
 * Given a thread with stacks like below, collapse together the platform stack frames into
 * a single pseudo platform stack frame. In the diagram "J" represents JavaScript stack
 * frame timing, and "P" Platform stack frame timing. New psuedo-stack frames are created
 * for the platform stacks.
 *
 * JJJJJJJJJJJJJJJJ  --->  JJJJJJJJJJJJJJJJ
 * PPPPPPPPPPPPPPPP        PPPPPPPPPPPPPPPP
 *     PPPPPPPPPPPP            JJJJJJJJ
 *     PPPPPPPP                JJJ  PPP
 *     JJJJJJJJ                     JJJ
 *     JJJ  PPP
 *          JJJ
 *
 * @param {Object} thread - A thread.
 * @returns {Object} The thread with collapsed samples.
 */
function collapsePlatformStackFrames(thread) {
  return (0, _timeCode.timeCode)('collapsePlatformStackFrames', function () {
    var stackTable = thread.stackTable,
        funcTable = thread.funcTable,
        frameTable = thread.frameTable,
        samples = thread.samples,
        stringTable = thread.stringTable;

    // Create new tables for the data.

    var newStackTable = {
      length: 0,
      frame: [],
      prefix: []
    };
    var newFrameTable = {
      length: frameTable.length,
      implementation: frameTable.implementation.slice(),
      optimizations: frameTable.optimizations.slice(),
      line: frameTable.line.slice(),
      category: frameTable.category.slice(),
      func: frameTable.func.slice(),
      address: frameTable.address.slice()
    };
    var newFuncTable = {
      length: funcTable.length,
      name: funcTable.name.slice(),
      resource: funcTable.resource.slice(),
      address: funcTable.address.slice(),
      isJS: funcTable.isJS.slice(),
      fileName: funcTable.fileName.slice(),
      lineNumber: funcTable.lineNumber.slice()
    };

    // Create a Map that takes a prefix and frame as input, and maps it to the new stack
    // index. Since Maps can't be keyed off of two values, do a little math to key off
    // of both values: newStackPrefix * potentialFrameCount + frame => newStackIndex
    var prefixStackAndFrameToStack = new Map();
    var potentialFrameCount = newFrameTable.length * 2;
    var oldStackToNewStack = new Map();

    function convertStack(oldStack) {
      if (oldStack === null) {
        return null;
      }
      var newStack = oldStackToNewStack.get(oldStack);
      if (newStack === undefined) {
        // No stack was found, generate a new one.
        var oldStackPrefix = stackTable.prefix[oldStack];
        var newStackPrefix = convertStack(oldStackPrefix);
        var frameIndex = stackTable.frame[oldStack];
        var funcIndex = newFrameTable.func[frameIndex];
        var oldStackIsPlatform = !newFuncTable.isJS[funcIndex];
        var keepStackFrame = true;

        if (oldStackIsPlatform) {
          if (oldStackPrefix !== null) {
            // Only keep the platform stack frame if the prefix is JS.
            var prefixFrameIndex = stackTable.frame[oldStackPrefix];
            var prefixFuncIndex = newFrameTable.func[prefixFrameIndex];
            keepStackFrame = newFuncTable.isJS[prefixFuncIndex];
          }
        }

        if (keepStackFrame) {
          // Convert the old JS stack to a new JS stack.
          var prefixStackAndFrameIndex = (newStackPrefix === null ? -1 : newStackPrefix) * potentialFrameCount + frameIndex;
          newStack = prefixStackAndFrameToStack.get(prefixStackAndFrameIndex);
          if (newStack === undefined) {
            newStack = newStackTable.length++;
            newStackTable.prefix[newStack] = newStackPrefix;
            if (oldStackIsPlatform) {
              // Create a new platform frame
              var newFuncIndex = newFuncTable.length++;
              newFuncTable.name.push(stringTable.indexForString('Platform'));
              newFuncTable.resource.push(-1);
              newFuncTable.address.push(-1);
              newFuncTable.isJS.push(false);
              newFuncTable.fileName.push(null);
              newFuncTable.lineNumber.push(null);
              if (newFuncTable.name.length !== newFuncTable.length) {
                console.error('length is not correct', newFuncTable.name.length, newFuncTable.length);
              }

              newFrameTable.implementation.push(null);
              newFrameTable.optimizations.push(null);
              newFrameTable.line.push(null);
              newFrameTable.category.push(null);
              newFrameTable.func.push(newFuncIndex);
              newFrameTable.address.push(-1);

              newStackTable.frame[newStack] = newFrameTable.length++;
            } else {
              newStackTable.frame[newStack] = frameIndex;
            }
          }
          oldStackToNewStack.set(oldStack, newStack);
          prefixStackAndFrameToStack.set(prefixStackAndFrameIndex, newStack);
        }

        // If the the stack frame was not kept, use the prefix.
        if (newStack === undefined) {
          newStack = newStackPrefix;
        }
      }
      return newStack;
    }

    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (oldStack) {
        return convertStack(oldStack);
      })
    });

    return Object.assign({}, thread, {
      samples: newSamples,
      stackTable: newStackTable,
      frameTable: newFrameTable,
      funcTable: newFuncTable
    });
  });
}

function filterThreadToSearchString(thread, searchString) {
  return (0, _timeCode.timeCode)('filterThreadToSearchString', function () {
    if (searchString === '') {
      return thread;
    }
    var lowercaseSearchString = searchString.toLowerCase();
    var samples = thread.samples,
        funcTable = thread.funcTable,
        frameTable = thread.frameTable,
        stackTable = thread.stackTable,
        stringTable = thread.stringTable,
        resourceTable = thread.resourceTable;


    function computeFuncMatchesFilter(func) {
      var nameIndex = funcTable.name[func];
      var nameString = stringTable.getString(nameIndex);
      if (nameString.toLowerCase().includes(lowercaseSearchString)) {
        return true;
      }

      var fileNameIndex = funcTable.fileName[func];
      if (fileNameIndex !== null) {
        var fileNameString = stringTable.getString(fileNameIndex);
        if (fileNameString.toLowerCase().includes(lowercaseSearchString)) {
          return true;
        }
      }

      var resourceIndex = funcTable.resource[func];
      var resourceNameIndex = resourceTable.name[resourceIndex];
      if (resourceNameIndex !== undefined) {
        var resourceNameString = stringTable.getString(resourceNameIndex);
        if (resourceNameString.toLowerCase().includes(lowercaseSearchString)) {
          return true;
        }
      }

      return false;
    }

    var funcMatchesFilterCache = new Map();
    function funcMatchesFilter(func) {
      var result = funcMatchesFilterCache.get(func);
      if (result === undefined) {
        result = computeFuncMatchesFilter(func);
        funcMatchesFilterCache.set(func, result);
      }
      return result;
    }

    var stackMatchesFilterCache = new Map();
    function stackMatchesFilter(stackIndex) {
      if (stackIndex === null) {
        return false;
      }
      var result = stackMatchesFilterCache.get(stackIndex);
      if (result === undefined) {
        var prefix = stackTable.prefix[stackIndex];
        if (stackMatchesFilter(prefix)) {
          result = true;
        } else {
          var frame = stackTable.frame[stackIndex];
          var func = frameTable.func[frame];
          result = funcMatchesFilter(func);
        }
        stackMatchesFilterCache.set(stackIndex, result);
      }
      return result;
    }

    return Object.assign({}, thread, {
      samples: Object.assign({}, samples, {
        stack: samples.stack.map(function (s) {
          return stackMatchesFilter(s) ? s : null;
        })
      })
    });
  });
}

function _getSampleIndexRangeForSelection(samples, rangeStart, rangeEnd) {
  // TODO: This should really use bisect. samples.time is sorted.
  var firstSample = samples.time.findIndex(function (t) {
    return t >= rangeStart;
  });
  if (firstSample === -1) {
    return [samples.length, samples.length];
  }
  var afterLastSample = samples.time.slice(firstSample).findIndex(function (t) {
    return t >= rangeEnd;
  });
  if (afterLastSample === -1) {
    return [firstSample, samples.length];
  }
  return [firstSample, firstSample + afterLastSample];
}

function _getMarkerIndexRangeForSelection(markers, rangeStart, rangeEnd) {
  // TODO: This should really use bisect. samples.time is sorted.
  var firstMarker = markers.time.findIndex(function (t) {
    return t >= rangeStart;
  });
  if (firstMarker === -1) {
    return [markers.length, markers.length];
  }
  var afterLastSample = markers.time.slice(firstMarker).findIndex(function (t) {
    return t >= rangeEnd;
  });
  if (afterLastSample === -1) {
    return [firstMarker, markers.length];
  }
  return [firstMarker, firstMarker + afterLastSample];
}

function filterThreadToRange(thread, rangeStart, rangeEnd) {
  var samples = thread.samples,
      markers = thread.markers;

  var _getSampleIndexRangeF = _getSampleIndexRangeForSelection(samples, rangeStart, rangeEnd),
      _getSampleIndexRangeF2 = (0, _slicedToArray3.default)(_getSampleIndexRangeF, 2),
      sBegin = _getSampleIndexRangeF2[0],
      sEnd = _getSampleIndexRangeF2[1];

  var newSamples = {
    length: sEnd - sBegin,
    time: samples.time.slice(sBegin, sEnd),
    stack: samples.stack.slice(sBegin, sEnd),
    responsiveness: samples.responsiveness.slice(sBegin, sEnd),
    rss: samples.rss.slice(sBegin, sEnd),
    uss: samples.uss.slice(sBegin, sEnd)
  };

  var _getMarkerIndexRangeF = _getMarkerIndexRangeForSelection(markers, rangeStart, rangeEnd),
      _getMarkerIndexRangeF2 = (0, _slicedToArray3.default)(_getMarkerIndexRangeF, 2),
      mBegin = _getMarkerIndexRangeF2[0],
      mEnd = _getMarkerIndexRangeF2[1];

  var newMarkers = {
    length: mEnd - mBegin,
    time: markers.time.slice(mBegin, mEnd),
    name: markers.name.slice(mBegin, mEnd),
    data: markers.data.slice(mBegin, mEnd)
  };
  return Object.assign({}, thread, {
    samples: newSamples,
    markers: newMarkers
  });
}

function getCallNodeFromPath(callNodePath, callNodeTable) {
  var fs = -1;
  for (var i = 0; i < callNodePath.length; i++) {
    var func = callNodePath[i];
    var nextFS = -1;
    for (var callNodeIndex = fs + 1; callNodeIndex < callNodeTable.length; callNodeIndex++) {
      if (callNodeTable.prefix[callNodeIndex] === fs && callNodeTable.func[callNodeIndex] === func) {
        nextFS = callNodeIndex;
        break;
      }
    }
    if (nextFS === -1) {
      return null;
    }
    fs = nextFS;
  }
  return fs;
}

function getCallNodePath(callNodeIndex, callNodeTable) {
  if (callNodeIndex === null) {
    return [];
  }
  if (callNodeIndex * 1 !== callNodeIndex) {
    console.log('bad callNodeIndex in getCallNodePath:', callNodeIndex);
    return [];
  }
  var callNodePath = [];
  var fs = callNodeIndex;
  while (fs !== -1) {
    callNodePath.push(callNodeTable.func[fs]);
    fs = callNodeTable.prefix[fs];
  }
  callNodePath.reverse();
  return callNodePath;
}

function invertCallstack(thread) {
  return (0, _timeCode.timeCode)('invertCallstack', function () {
    var stackTable = thread.stackTable,
        frameTable = thread.frameTable,
        samples = thread.samples;


    var newStackTable = {
      length: 0,
      frame: [],
      prefix: []
    };
    // Create a Map that keys off of two values, both the prefix and frame combination
    // by using a bit of math: prefix * frameCount + frame => stackIndex
    var prefixAndFrameToStack = new Map();
    var frameCount = frameTable.length;

    function stackFor(prefix, frame) {
      var prefixAndFrameIndex = (prefix === null ? -1 : prefix) * frameCount + frame;
      var stackIndex = prefixAndFrameToStack.get(prefixAndFrameIndex);
      if (stackIndex === undefined) {
        stackIndex = newStackTable.length++;
        newStackTable.prefix[stackIndex] = prefix;
        newStackTable.frame[stackIndex] = frame;
        prefixAndFrameToStack.set(prefixAndFrameIndex, stackIndex);
      }
      return stackIndex;
    }

    var oldStackToNewStack = new Map();

    function convertStack(stackIndex) {
      if (stackIndex === null) {
        return null;
      }
      var newStack = oldStackToNewStack.get(stackIndex);
      if (newStack === undefined) {
        newStack = null;
        for (var currentStack = stackIndex; currentStack !== null; currentStack = stackTable.prefix[currentStack]) {
          newStack = stackFor(newStack, stackTable.frame[currentStack]);
        }
        oldStackToNewStack.set(stackIndex, newStack);
      }
      return newStack;
    }

    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (oldStack) {
        return convertStack(oldStack);
      })
    });

    return Object.assign({}, thread, {
      samples: newSamples,
      stackTable: newStackTable
    });
  });
}

function getSampleIndexClosestToTime(samples, time, interval) {
  // Bisect to find the index of the first sample after the provided time.
  var index = _bisection2.default.right(samples.time, time);

  if (index === 0) {
    return 0;
  }

  if (index === samples.length) {
    return samples.length - 1;
  }

  // Check the distance between the provided time and the center of the bisected sample
  // and its predecessor.
  var distanceToThis = samples.time[index] + interval / 2 - time;
  var distanceToLast = time - (samples.time[index - 1] + interval / 2);
  return distanceToThis < distanceToLast ? index : index - 1;
}

function getJankInstances(samples, thresholdInMs) {
  var addTracingMarker = function addTracingMarker() {
    return jankInstances.push({
      start: lastTimestamp - lastResponsiveness,
      dur: lastResponsiveness,
      title: lastResponsiveness.toFixed(2) + 'ms event processing delay',
      name: 'Jank',
      data: null
    });
  };

  var lastResponsiveness = 0;
  var lastTimestamp = 0;
  var jankInstances = [];
  for (var i = 0; i < samples.length; i++) {
    var currentResponsiveness = samples.responsiveness[i];
    if (currentResponsiveness < lastResponsiveness) {
      if (lastResponsiveness >= thresholdInMs) {
        addTracingMarker();
      }
    }
    lastResponsiveness = currentResponsiveness;
    lastTimestamp = samples.time[i];
  }
  if (lastResponsiveness >= thresholdInMs) {
    addTracingMarker();
  }
  return jankInstances;
}

function getSearchFilteredMarkers(thread, searchString) {
  if (!searchString) {
    return thread.markers;
  }
  var lowerCaseSearchString = searchString.toLowerCase();
  var stringTable = thread.stringTable,
      markers = thread.markers;

  var newMarkersTable = {
    data: [],
    name: [],
    time: [],
    length: 0
  };
  function addMarker(markerIndex) {
    newMarkersTable.data.push(markers.data[markerIndex]);
    newMarkersTable.time.push(markers.time[markerIndex]);
    newMarkersTable.name.push(markers.name[markerIndex]);
    newMarkersTable.length++;
  }
  for (var markerIndex = 0; markerIndex < markers.length; markerIndex++) {
    var stringIndex = markers.name[markerIndex];
    var name = stringTable.getString(stringIndex);
    var lowerCaseName = name.toLowerCase();
    if (lowerCaseName.includes(lowerCaseSearchString)) {
      addMarker(markerIndex);
      continue;
    }
    var data = markers.data[markerIndex];
    if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
      if (typeof data.eventType === 'string' && data.eventType.toLowerCase().includes(lowerCaseSearchString)) {
        // Match DOMevents data.eventType
        addMarker(markerIndex);
        continue;
      }
      if (typeof data.name === 'string' && data.name.toLowerCase().includes(lowerCaseSearchString)) {
        // Match UserTiming's name.
        addMarker(markerIndex);
        continue;
      }
      if (typeof data.category === 'string' && data.category.toLowerCase().includes(lowerCaseSearchString)) {
        // Match UserTiming's name.
        addMarker(markerIndex);
        continue;
      }
    }
  }
  return newMarkersTable;
}

/**
 * This function takes a marker that packs in a marker payload into the string of the
 * name. This extracts that and turns it into a payload.
 */
function extractMarkerDataFromName(thread) {
  var stringTable = thread.stringTable,
      markers = thread.markers;

  var newMarkers = {
    data: markers.data.slice(),
    name: markers.name.slice(),
    time: markers.time.slice(),
    length: markers.length
  };

  // Match: "Bailout_MonitorTypes after add on line 1013 of self-hosted:1008"
  // Match: "Bailout_TypeBarrierO at jumptarget on line 1490 of resource://devtools/shared/base-loader.js -> resource://devtools/client/shared/vendor/immutable.js:1484"
  var bailoutRegex =
  // Capture groups:
  //       type   afterAt    where        bailoutLine  script functionLine
  //        ↓     ↓          ↓                  ↓        ↓    ↓
  /^Bailout_(\w+) (after|at) ([\w _-]+) on line (\d+) of (.*):(\d+)$/;

  // Match: "Invalidate resource://devtools/shared/base-loader.js -> resource://devtools/client/shared/vendor/immutable.js:3662"
  // Match: "Invalidate self-hosted:4032"
  var invalidateRegex =
  // Capture groups:
  //         url    line
  //           ↓    ↓
  /^Invalidate (.*):(\d+)$/;

  var bailoutStringIndex = stringTable.indexForString('Bailout');
  var invalidationStringIndex = stringTable.indexForString('Invalidate');
  for (var markerIndex = 0; markerIndex < markers.length; markerIndex++) {
    var nameIndex = markers.name[markerIndex];
    var time = markers.time[markerIndex];
    var name = stringTable.getString(nameIndex);
    var matchFound = false;
    if (name.startsWith('Bailout_')) {
      matchFound = true;
      var match = name.match(bailoutRegex);
      if (!match) {
        console.error('Could not match regex for bailout: "' + name + '"');
      } else {
        var _match = (0, _slicedToArray3.default)(match, 7),
            type = _match[1],
            afterAt = _match[2],
            where = _match[3],
            bailoutLine = _match[4],
            script = _match[5],
            functionLine = _match[6];

        newMarkers.name[markerIndex] = bailoutStringIndex;
        newMarkers.data[markerIndex] = {
          type: 'Bailout',
          bailoutType: type,
          where: afterAt + ' ' + where,
          script: script,
          bailoutLine: +bailoutLine,
          functionLine: +functionLine,
          startTime: time,
          endTime: time
        };
      }
    } else if (name.startsWith('Invalidate ')) {
      matchFound = true;
      var _match2 = name.match(invalidateRegex);
      if (!_match2) {
        console.error('Could not match regex for bailout: "' + name + '"');
      } else {
        var _match3 = (0, _slicedToArray3.default)(_match2, 3),
            url = _match3[1],
            line = _match3[2];

        newMarkers.name[markerIndex] = invalidationStringIndex;
        newMarkers.data[markerIndex] = {
          type: 'Invalidation',
          url: url,
          line: line,
          startTime: time,
          endTime: time
        };
      }
    }
    if (matchFound && markers.data[markerIndex]) {
      console.error("A marker's payload was rewritten based off the text content of the marker. " + "perf.html assumed that the payload was empty, but it turns out it wasn't. " + 'This is most likely an error and should be fixed. The marker name is:', name);
    }
  }

  return Object.assign({}, thread, { markers: newMarkers });
}

function getTracingMarkers(thread) {
  var stringTable = thread.stringTable,
      markers = thread.markers;

  var tracingMarkers = [];
  var openMarkers = new Map();
  for (var i = 0; i < markers.length; i++) {
    var data = markers.data[i];
    if (!data) {
      // Add a marker with a zero duration
      var marker = {
        start: markers.time[i],
        dur: 0,
        name: stringTable.getString(markers.name[i]),
        title: null,
        data: null
      };
      tracingMarkers.push(marker);
    } else if (data.type === 'tracing') {
      var time = markers.time[i];
      var nameStringIndex = markers.name[i];
      if (data.interval === 'start') {
        openMarkers.set(nameStringIndex, {
          start: time,
          name: stringTable.getString(nameStringIndex),
          dur: 0,
          title: null,
          data: data
        });
      } else if (data.interval === 'end') {
        var _marker = openMarkers.get(nameStringIndex);
        if (_marker === undefined) {
          continue;
        }
        if (_marker.start !== undefined) {
          _marker.dur = time - _marker.start;
        }
        tracingMarkers.push(_marker);
      }
    } else if ('startTime' in data && 'endTime' in data) {
      var startTime = data.startTime,
          endTime = data.endTime;

      if (typeof startTime === 'number' && typeof endTime === 'number') {
        var name = stringTable.getString(markers.name[i]);
        var duration = endTime - startTime;
        tracingMarkers.push({
          start: startTime,
          dur: duration,
          name: name,
          data: data,
          title: null
        });
      }
    }
  }
  tracingMarkers.sort(function (a, b) {
    return a.start - b.start;
  });
  return tracingMarkers;
}

function filterTracingMarkersToRange(tracingMarkers, rangeStart, rangeEnd) {
  return tracingMarkers.filter(function (tm) {
    return tm.start < rangeEnd && tm.start + tm.dur >= rangeStart;
  });
}

function getFriendlyThreadName(threads, thread) {
  var label = void 0;
  switch (thread.name) {
    case 'GeckoMain':
      switch (thread.processType) {
        case 'default':
          label = 'Main Thread';
          break;
        case 'tab':
          {
            var contentThreads = threads.filter(function (thread) {
              return thread.name === 'GeckoMain' && thread.processType === 'tab';
            });
            if (contentThreads.length > 1) {
              var index = 1 + contentThreads.indexOf(thread);
              label = 'Content (' + index + ' of ' + contentThreads.length + ')';
            } else {
              label = 'Content';
            }
            break;
          }
        case 'plugin':
          label = 'Plugin';
          break;
        default:
        // should we throw here ?
      }
      break;
    default:
  }

  if (!label) {
    label = thread.name;
  }
  return label;
}

function getThreadProcessDetails(thread) {
  var label = 'thread: "' + thread.name + '"';
  if (thread.tid !== undefined) {
    label += ' (' + thread.tid + ')';
  }

  if (thread.processType) {
    label += '\nprocess: "' + thread.processType + '"';
    if (thread.pid !== undefined) {
      label += ' (' + thread.pid + ')';
    }
  }

  return label;
}

function getEmptyProfile() {
  return {
    meta: {
      interval: 1,
      startTime: 0,
      abi: '',
      misc: '',
      oscpu: '',
      platform: '',
      processType: 0,
      product: 'Firefox',
      stackwalk: 0,
      toolkit: '',
      version: _geckoProfileVersioning.CURRENT_VERSION,
      preprocessedProfileVersion: _processedProfileVersioning.CURRENT_VERSION
    },
    threads: [],
    tasktracer: (0, _taskTracer.getEmptyTaskTracerData)()
  };
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(47);

var ReactCurrentOwner = __webpack_require__(27);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
   true ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ?  true ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  true ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ?  true ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (true) {
  var ReactDebugTool = __webpack_require__(145);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };

/***/ }),
/* 22 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeSelectedCallNode = changeSelectedCallNode;
exports.changeSelectedThread = changeSelectedThread;
exports.changeThreadOrder = changeThreadOrder;
exports.hideThread = hideThread;
exports.showThread = showThread;
exports.changeCallTreeSearchString = changeCallTreeSearchString;
exports.changeExpandedCallNodes = changeExpandedCallNodes;
exports.changeSelectedMarker = changeSelectedMarker;
exports.changeMarkersSearchString = changeMarkersSearchString;
exports.changeImplementationFilter = changeImplementationFilter;
exports.changeInvertCallstack = changeInvertCallstack;
exports.changeHidePlatformDetails = changeHidePlatformDetails;
exports.updateProfileSelection = updateProfileSelection;
exports.addRangeFilter = addRangeFilter;
exports.addRangeFilterAndUnsetSelection = addRangeFilterAndUnsetSelection;
exports.popRangeFilters = popRangeFilters;
exports.popRangeFiltersAndUnsetSelection = popRangeFiltersAndUnsetSelection;
exports.addTransformToStack = addTransformToStack;
exports.popTransformsFromStack = popTransformsFromStack;

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

/**
 * The actions that pertain to changing the view on the profile, including searching
 * and filtering. Currently the call tree's actions are in this file, but should be
 * split apart. These actions should most likely affect every panel.
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function changeSelectedCallNode(threadIndex, selectedCallNodePath) {
  return {
    type: 'CHANGE_SELECTED_CALL_NODE',
    selectedCallNodePath: selectedCallNodePath,
    threadIndex: threadIndex
  };
}

function changeSelectedThread(selectedThread) {
  return {
    type: 'CHANGE_SELECTED_THREAD',
    selectedThread: selectedThread
  };
}

function changeThreadOrder(threadOrder) {
  return {
    type: 'CHANGE_THREAD_ORDER',
    threadOrder: threadOrder
  };
}

function hideThread(threadIndex, threadOrder, hiddenThreads) {
  return function (dispatch) {
    // Do not allow hiding the last thread.
    if (hiddenThreads.length + 1 === threadOrder.length) {
      return;
    }

    dispatch({
      type: 'HIDE_THREAD',
      threadIndex: threadIndex,
      threadOrder: threadOrder,
      hiddenThreads: hiddenThreads
    });
  };
}

function showThread(threadIndex) {
  return {
    type: 'SHOW_THREAD',
    threadIndex: threadIndex
  };
}

function changeCallTreeSearchString(searchString) {
  return {
    type: 'CHANGE_CALL_TREE_SEARCH_STRING',
    searchString: searchString
  };
}

function changeExpandedCallNodes(threadIndex, expandedCallNodePaths) {
  return {
    type: 'CHANGE_EXPANDED_CALL_NODES',
    threadIndex: threadIndex,
    expandedCallNodePaths: expandedCallNodePaths
  };
}

function changeSelectedMarker(threadIndex, selectedMarker) {
  return {
    type: 'CHANGE_SELECTED_MARKER',
    selectedMarker: selectedMarker,
    threadIndex: threadIndex
  };
}

function changeMarkersSearchString(searchString) {
  return {
    type: 'CHANGE_MARKER_SEARCH_STRING',
    searchString: searchString
  };
}

function changeImplementationFilter(implementation) {
  return function (dispatch, getState) {
    var previousImplementation = (0, _urlState.getImplementationFilter)(getState());
    var threadIndex = (0, _urlState.getSelectedThreadIndex)(getState());
    var transformedThread = _profileView.selectedThreadSelectors.getRangeAndTransformFilteredThread(getState());

    dispatch({
      type: 'CHANGE_IMPLEMENTATION_FILTER',
      implementation: implementation,
      threadIndex: threadIndex,
      transformedThread: transformedThread,
      previousImplementation: previousImplementation
    });
  };
}

function changeInvertCallstack(invertCallstack) {
  return {
    type: 'CHANGE_INVERT_CALLSTACK',
    invertCallstack: invertCallstack
  };
}

function changeHidePlatformDetails(hidePlatformDetails) {
  return {
    type: 'CHANGE_HIDE_PLATFORM_DETAILS',
    hidePlatformDetails: hidePlatformDetails
  };
}

function updateProfileSelection(selection) {
  return {
    type: 'UPDATE_PROFILE_SELECTION',
    selection: selection
  };
}

function addRangeFilter(start, end) {
  return {
    type: 'ADD_RANGE_FILTER',
    start: start,
    end: end
  };
}

function addRangeFilterAndUnsetSelection(start, end) {
  return function (dispatch) {
    dispatch(addRangeFilter(start, end));
    dispatch(updateProfileSelection({ hasSelection: false, isModifying: false }));
  };
}

function popRangeFilters(firstRemovedFilterIndex) {
  return {
    type: 'POP_RANGE_FILTERS',
    firstRemovedFilterIndex: firstRemovedFilterIndex
  };
}

function popRangeFiltersAndUnsetSelection(firstRemovedFilterIndex) {
  return function (dispatch) {
    dispatch(popRangeFilters(firstRemovedFilterIndex));
    dispatch(updateProfileSelection({ hasSelection: false, isModifying: false }));
  };
}

function addTransformToStack(threadIndex, transform) {
  return function (dispatch, getState) {
    var transformedThread = (0, _profileView.selectorsForThread)(threadIndex).getRangeAndTransformFilteredThread(getState());

    dispatch({
      type: 'ADD_TRANSFORM_TO_STACK',
      threadIndex: threadIndex,
      transform: transform,
      transformedThread: transformedThread
    });
  };
}

function popTransformsFromStack(threadIndex, firstRemovedFilterIndex) {
  return {
    type: 'POP_TRANSFORMS_FROM_STACK',
    threadIndex: threadIndex,
    firstRemovedFilterIndex: firstRemovedFilterIndex
  };
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(22)
  , core      = __webpack_require__(16)
  , ctx       = __webpack_require__(50)
  , hide      = __webpack_require__(39)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _isIterable2 = __webpack_require__(356);

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(359);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var CallbackQueue = __webpack_require__(150);
var PooledClass = __webpack_require__(38);
var ReactFeatureFlags = __webpack_require__(151);
var ReactReconciler = __webpack_require__(48);
var Transaction = __webpack_require__(69);

var invariant = __webpack_require__(5);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  true ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ?  true ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ?  true ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ?  true ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ?  true ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  true ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  true ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _app = __webpack_require__(415);

var app = _interopRequireWildcard(_app);

var _icons = __webpack_require__(416);

var icons = _interopRequireWildcard(_icons);

var _profileSummary = __webpack_require__(198);

var profileSummary = _interopRequireWildcard(_profileSummary);

var _profileView = __webpack_require__(23);

var profileView = _interopRequireWildcard(_profileView);

var _receiveProfile = __webpack_require__(115);

var receiveProfile = _interopRequireWildcard(_receiveProfile);

var _stackChart = __webpack_require__(417);

var stackChart = _interopRequireWildcard(_stackChart);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = Object.assign({}, app, icons, profileSummary, profileView, receiveProfile, stackChart);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var PooledClass = __webpack_require__(38);

var emptyFunction = __webpack_require__(24);
var warning = __webpack_require__(6);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (true) {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (true) {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (true) {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (true) {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

if (true) {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
               true ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
     true ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(32)
  , IE8_DOM_DEFINE = __webpack_require__(172)
  , toPrimitive    = __webpack_require__(102)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(33) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(40);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(51)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ?  true ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  true ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (true) {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (true) {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName:  true ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(324);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(334);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__(382);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var ReactCurrentOwner = __webpack_require__(27);

var warning = __webpack_require__(6);
var canDefineProperty = __webpack_require__(65);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(139);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (true) {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (true) {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
       true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
       true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (true) {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (true) {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (true) {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(31)
  , createDesc = __webpack_require__(59);
module.exports = __webpack_require__(33) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 41 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(177)
  , defined = __webpack_require__(104);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

if (true) {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(143)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/lodash-es/isPlainObject.js + 8 modules
var isPlainObject = __webpack_require__(114);

// EXTERNAL MODULE: ./node_modules/symbol-observable/index.js
var symbol_observable = __webpack_require__(353);
var symbol_observable_default = /*#__PURE__*/__webpack_require__.n(symbol_observable);

// CONCATENATED MODULE: ./node_modules/redux/es/createStore.js



/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var ActionTypes = {
  INIT: '@@redux/INIT'

  /**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */
};function createStore_createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore_createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */
  function getState() {
    return currentState;
  }

  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */
  function dispatch(action) {
    if (!Object(isPlainObject["a" /* default */])(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }

  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */
  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[symbol_observable_default.a] = function () {
      return this;
    }, _ref;
  }

  // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.
  dispatch({ type: ActionTypes.INIT });

  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[symbol_observable_default.a] = observable, _ref2;
}
// CONCATENATED MODULE: ./node_modules/redux/es/utils/warning.js
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}
// CONCATENATED MODULE: ./node_modules/redux/es/combineReducers.js




function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!Object(isPlainObject["a" /* default */])(inputState)) {
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });

  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });

  if (unexpectedKeys.length > 0) {
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: ActionTypes.INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }
  });
}

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (true) {
      if (typeof reducers[key] === 'undefined') {
        warning('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  var unexpectedKeyCache = void 0;
  if (true) {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError = void 0;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (true) {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}
// CONCATENATED MODULE: ./node_modules/redux/es/bindActionCreators.js
function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(undefined, arguments));
  };
}

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
// CONCATENATED MODULE: ./node_modules/redux/es/compose.js
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(undefined, arguments));
    };
  });
}
// CONCATENATED MODULE: ./node_modules/redux/es/applyMiddleware.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _dispatch = store.dispatch;
      var chain = [];

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(undefined, chain)(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}
// CONCATENATED MODULE: ./node_modules/redux/es/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "createStore", function() { return createStore_createStore; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "combineReducers", function() { return combineReducers; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "bindActionCreators", function() { return bindActionCreators; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "applyMiddleware", function() { return applyMiddleware; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "compose", function() { return compose; });







/*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
function isCrushed() {}

if ("development" !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}



/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeCode = timeCode;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function timeCode(label, codeAsACallback) {
  if (typeof performance !== 'undefined' && "development" === 'development') {
    var start = performance.now();
    var result = codeAsACallback();
    var elapsed = Math.round(performance.now() - start);
    console.log(label + ' took ' + elapsed + 'ms to execute.');
    return result;
  }
  return codeAsACallback();
}

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var ReactBaseClasses = __webpack_require__(137);
var ReactChildren = __webpack_require__(220);
var ReactDOMFactories = __webpack_require__(224);
var ReactElement = __webpack_require__(37);
var ReactPropTypes = __webpack_require__(228);
var ReactVersion = __webpack_require__(230);

var createReactClass = __webpack_require__(231);
var onlyChild = __webpack_require__(233);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (true) {
  var lowPriorityWarning = __webpack_require__(83);
  var canDefineProperty = __webpack_require__(65);
  var ReactElementValidator = __webpack_require__(141);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (true) {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (true) {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(249);
var ReactInstrumentation = __webpack_require__(21);

var warning = __webpack_require__(6);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
       true ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(90);
var setInnerHTML = __webpack_require__(71);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(91);
var setTextContent = __webpack_require__(155);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(100);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(171);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueStringArray = undefined;

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UniqueStringArray = exports.UniqueStringArray = function () {
  function UniqueStringArray() {
    var originalArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    (0, _classCallCheck3.default)(this, UniqueStringArray);

    this._array = originalArray.slice(0);
    this._stringToIndex = new Map();
    for (var i = 0; i < originalArray.length; i++) {
      this._stringToIndex.set(originalArray[i], i);
    }
  }

  (0, _createClass3.default)(UniqueStringArray, [{
    key: 'getString',
    value: function getString(index) {
      if (!(index in this._array)) {
        throw new Error('index ' + index + ' not in UniqueStringArray');
      }
      return this._array[index];
    }
  }, {
    key: 'indexForString',
    value: function indexForString(s) {
      var index = this._stringToIndex.get(s);
      if (index === undefined) {
        index = this._array.length;
        this._stringToIndex.set(s, index);
        this._array.push(s);
      }
      return index;
    }
  }, {
    key: 'serializeToArray',
    value: function serializeToArray() {
      return this._array.slice(0);
    }
  }]);
  return UniqueStringArray;
}(); /* This Source Code Form is subject to the terms of the Mozilla Public
      * License, v. 2.0. If a copy of the MPL was not distributed with this
      * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(56);
var EventPluginUtils = __webpack_require__(84);

var accumulateInto = __webpack_require__(147);
var forEachAccumulated = __webpack_require__(148);
var warning = __webpack_require__(6);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (true) {
     true ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var EventPluginRegistry = __webpack_require__(68);
var EventPluginUtils = __webpack_require__(84);
var ReactErrorUtils = __webpack_require__(85);

var accumulateInto = __webpack_require__(147);
var forEachAccumulated = __webpack_require__(148);
var invariant = __webpack_require__(5);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ?  true ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ?  true ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }
};

module.exports = EventPluginHub;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(30);

var getEventTarget = __webpack_require__(86);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at  = __webpack_require__(326)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(173)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(176)
  , enumBugKeys = __webpack_require__(109);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 62 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 63 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(426);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (true) {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (true) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(241);


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ?  true ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  true ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (true) {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames:  true ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (true) {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ?  true ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ?  true ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(57);
var ViewportMetrics = __webpack_require__(154);

var getEventModifierState = __webpack_require__(88);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(17);
var DOMNamespaces = __webpack_require__(90);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(91);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var EventPluginRegistry = __webpack_require__(68);
var ReactEventEmitterMixin = __webpack_require__(270);
var ViewportMetrics = __webpack_require__(154);

var getVendorPrefixedEventName = __webpack_require__(271);
var isEventSupported = __webpack_require__(87);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = true;

/***/ }),
/* 75 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(31).f
  , has = __webpack_require__(41)
  , TAG = __webpack_require__(18)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(331);
var global        = __webpack_require__(22)
  , hide          = __webpack_require__(39)
  , Iterators     = __webpack_require__(52)
  , TO_STRING_TAG = __webpack_require__(18)('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ }),
/* 78 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTasksByThread = getTasksByThread;
exports.getEmptyTaskTracerData = getEmptyTaskTracerData;

var _uniqueStringArray = __webpack_require__(54);

function getTasksByThread(taskTable, threadTable) {
  var threadIndexToTaskIndicesMap = new Map();

  var _loop = function _loop(threadIndex) {
    var taskIndices = [];
    for (var taskIndex = 0; taskIndex < taskTable.length; taskIndex++) {
      if (taskTable.threadIndex[taskIndex] === threadIndex) {
        taskIndices.push(taskIndex);
      }
    }
    var afterEnd = 1477254572877 * 2;
    taskIndices.sort(function (a, b) {
      return (taskTable.beginTime[a] || afterEnd) - (taskTable.beginTime[b] || afterEnd);
    });
    threadIndexToTaskIndicesMap.set(threadIndex, taskIndices);
  };

  for (var threadIndex = 0; threadIndex < threadTable.length; threadIndex++) {
    _loop(threadIndex);
  }
  return threadIndexToTaskIndicesMap;
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function getEmptyTaskTracerData() {
  return {
    taskTable: {
      length: 0,
      dispatchTime: [],
      sourceEventId: [],
      sourceEventType: [],
      parentTaskId: [],
      beginTime: [],
      processId: [],
      threadIndex: [],
      endTime: [],
      ipdlMsg: [],
      label: [],
      address: []
    },
    tasksIdToTaskIndexMap: new Map(),
    stringTable: new _uniqueStringArray.UniqueStringArray(),
    addressTable: {
      length: 0,
      address: [],
      className: [],
      lib: []
    },
    addressIndicesByLib: new Map(),
    threadTable: {
      length: 0,
      tid: [],
      name: [],
      start: []
    },
    tidToThreadIndexMap: new Map()
  };
}

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/react/react.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(43);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(12);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// EXTERNAL MODULE: ./node_modules/object-assign/index.js
var object_assign = __webpack_require__(8);
var object_assign_default = /*#__PURE__*/__webpack_require__.n(object_assign);

// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/helpers.js
function callIfExists(func) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    return typeof func === 'function' && func.apply(undefined, args);
}

function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}

function uniqueId() {
    return Math.random().toString(36).substring(7);
}

var cssClasses = {
    menu: 'react-contextmenu',
    menuVisible: 'react-contextmenu--visible',
    menuWrapper: 'react-contextmenu-wrapper',
    menuItem: 'react-contextmenu-item',
    menuItemActive: 'react-contextmenu-item--active',
    menuItemDisabled: 'react-contextmenu-item--disabled',
    menuItemDivider: 'react-contextmenu-item--divider',
    menuItemSelected: 'react-contextmenu-item--selected',
    subMenu: 'react-contextmenu-submenu'
};

var store = {};

var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/actions.js




var MENU_SHOW = 'REACT_CONTEXTMENU_SHOW';
var MENU_HIDE = 'REACT_CONTEXTMENU_HIDE';

function dispatchGlobalEvent(eventName, opts) {
    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;

    // Compatibale with IE
    // @see http://stackoverflow.com/questions/26596123/internet-explorer-9-10-11-event-constructor-doesnt-work
    var event = void 0;

    if (typeof window.CustomEvent === 'function') {
        event = new window.CustomEvent(eventName, { detail: opts });
    } else {
        event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, false, true, opts);
    }

    if (target) {
        target.dispatchEvent(event);
        object_assign_default()(store, opts);
    }
}

function showMenu() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var target = arguments[1];

    dispatchGlobalEvent(MENU_SHOW, object_assign_default()({}, opts, { type: MENU_SHOW }), target);
}

function hideMenu() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var target = arguments[1];

    dispatchGlobalEvent(MENU_HIDE, object_assign_default()({}, opts, { type: MENU_HIDE }), target);
}
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/globalEventListener.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var globalEventListener_GlobalEventListener = function GlobalEventListener() {
    var _this = this;

    _classCallCheck(this, GlobalEventListener);

    this.handleShowEvent = function (event) {
        for (var id in _this.callbacks) {
            if (hasOwnProp(_this.callbacks, id)) _this.callbacks[id].show(event);
        }
    };

    this.handleHideEvent = function (event) {
        for (var id in _this.callbacks) {
            if (hasOwnProp(_this.callbacks, id)) _this.callbacks[id].hide(event);
        }
    };

    this.register = function (showCallback, hideCallback) {
        var id = uniqueId();

        _this.callbacks[id] = {
            show: showCallback,
            hide: hideCallback
        };

        return id;
    };

    this.unregister = function (id) {
        if (id && _this.callbacks[id]) {
            delete _this.callbacks[id];
        }
    };

    this.callbacks = {};

    if (canUseDOM) {
        window.addEventListener(MENU_SHOW, this.handleShowEvent);
        window.addEventListener(MENU_HIDE, this.handleHideEvent);
    }
};

/* harmony default export */ var globalEventListener = (new globalEventListener_GlobalEventListener());
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/MenuItem.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function MenuItem__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }









var MenuItem_MenuItem = function (_Component) {
    _inherits(MenuItem, _Component);

    function MenuItem() {
        var _ref;

        var _temp, _this, _ret;

        MenuItem__classCallCheck(this, MenuItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MenuItem.__proto__ || Object.getPrototypeOf(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {
            event.preventDefault();

            if (_this.props.disabled || _this.props.divider) return;

            callIfExists(_this.props.onClick, event, object_assign_default()({}, _this.props.data, store.data), store.target);

            if (_this.props.preventClose) return;

            hideMenu();
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(MenuItem, [{
        key: 'render',
        value: function render() {
            var _cx,
                _this2 = this;

            var _props = this.props,
                disabled = _props.disabled,
                divider = _props.divider,
                children = _props.children,
                attributes = _props.attributes,
                selected = _props.selected;

            var menuItemClassNames = classnames_default()(cssClasses.menuItem, attributes && attributes.className, (_cx = {}, _defineProperty(_cx, cssClasses.menuItemDisabled, disabled), _defineProperty(_cx, cssClasses.menuItemDivider, divider), _defineProperty(_cx, cssClasses.menuItemSelected, selected), _cx));

            return react_default.a.createElement(
                'div',
                _extends({}, attributes, { className: menuItemClassNames,
                    role: 'menuitem', tabIndex: '-1', 'aria-disabled': disabled ? 'true' : 'false',
                    'aria-orientation': divider ? 'horizontal' : null,
                    ref: function ref(_ref2) {
                        _this2.ref = _ref2;
                    },
                    onMouseMove: this.props.onMouseMove, onMouseLeave: this.props.onMouseLeave,
                    onTouchEnd: this.handleClick, onClick: this.handleClick }),
                divider ? null : children
            );
        }
    }]);

    return MenuItem;
}(react["Component"]);

MenuItem_MenuItem.propTypes = {
    children: prop_types_default.a.node,
    attributes: prop_types_default.a.object,
    data: prop_types_default.a.object,
    disabled: prop_types_default.a.bool,
    divider: prop_types_default.a.bool,
    preventClose: prop_types_default.a.bool,
    onClick: prop_types_default.a.func,
    selected: prop_types_default.a.bool,
    onMouseMove: prop_types_default.a.func,
    onMouseLeave: prop_types_default.a.func
};
MenuItem_MenuItem.defaultProps = {
    disabled: false,
    data: {},
    divider: false,
    attributes: {},
    preventClose: false,
    onClick: function onClick() {
        return null;
    },

    children: null,
    selected: false,
    onMouseMove: function onMouseMove() {
        return null;
    },
    onMouseLeave: function onMouseLeave() {
        return null;
    }
};
/* harmony default export */ var es6_MenuItem = (MenuItem_MenuItem);
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/AbstractMenu.js
function AbstractMenu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function AbstractMenu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function AbstractMenu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var AbstractMenu = function (_Component) {
    AbstractMenu__inherits(AbstractMenu, _Component);

    function AbstractMenu(props) {
        AbstractMenu__classCallCheck(this, AbstractMenu);

        var _this = AbstractMenu__possibleConstructorReturn(this, (AbstractMenu.__proto__ || Object.getPrototypeOf(AbstractMenu)).call(this, props));

        AbstractMenu__initialiseProps.call(_this);

        _this.seletedItemRef = null;
        _this.state = {
            selectedItem: null,
            forceSubMenuOpen: false
        };
        return _this;
    }

    return AbstractMenu;
}(react["Component"]);

AbstractMenu.propTypes = {
    children: prop_types_default.a.node.isRequired
};

var AbstractMenu__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.handleKeyNavigation = function (e) {
        if (!_this2.state.isVisible) {
            return;
        }

        switch (e.keyCode) {
            case 37: // left arrow
            case 27:
                // escape
                e.preventDefault();
                _this2.hideMenu(e);
                break;
            case 38:
                // up arrow
                e.preventDefault();
                _this2.selectChildren(true);
                break;
            case 40:
                // down arrow
                e.preventDefault();
                _this2.selectChildren(false);
                break;
            case 39:
                // right arrow
                _this2.tryToOpenSubMenu(e);
                break;
            case 13:
                // enter
                e.preventDefault();
                _this2.tryToOpenSubMenu(e);
                if (_this2.seletedItemRef && _this2.seletedItemRef.ref instanceof HTMLElement) {
                    _this2.seletedItemRef.ref.click();
                }
                break;
            default:
            // do nothing
        }
    };

    this.handleForceClose = function () {
        _this2.setState({ forceSubMenuOpen: false });
    };

    this.tryToOpenSubMenu = function (e) {
        if (_this2.state.selectedItem && _this2.state.selectedItem.type === _this2.getSubMenuType()) {
            e.preventDefault();
            _this2.setState({ forceSubMenuOpen: true });
        }
    };

    this.selectChildren = function (forward) {
        var selectedItem = _this2.state.selectedItem;

        var children = [];
        var childCollector = function childCollector(child) {
            // child can be empty in case you do conditional rendering of components, in which
            // case it should not be accounted for as a real child
            if (!child) {
                return;
            }

            if ([es6_MenuItem, _this2.getSubMenuType()].indexOf(child.type) < 0) {
                // Maybe the MenuItem or SubMenu is capsuled in a wrapper div or something else
                react_default.a.Children.forEach(child.props.children, childCollector);
            } else if (!child.props.divider) {
                children.push(child);
            }
        };
        react_default.a.Children.forEach(_this2.props.children, childCollector);
        var currentIndex = children.indexOf(selectedItem);
        if (currentIndex < 0) {
            _this2.setState({
                selectedItem: forward ? children[children.length - 1] : children[0],
                forceSubMenuOpen: false
            });
        } else if (forward) {
            _this2.setState({
                selectedItem: children[currentIndex - 1 < 0 ? children.length - 1 : currentIndex - 1],
                forceSubMenuOpen: false
            });
        } else {
            _this2.setState({
                selectedItem: children[currentIndex + 1 < children.length ? currentIndex + 1 : 0],
                forceSubMenuOpen: false
            });
        }
    };

    this.onChildMouseMove = function (child) {
        if (_this2.state.selectedItem !== child) {
            _this2.setState({ selectedItem: child, forceSubMenuOpen: false });
        }
    };

    this.onChildMouseLeave = function () {
        _this2.setState({ selectedItem: null, forceSubMenuOpen: false });
    };

    this.renderChildren = function (children) {
        return react_default.a.Children.map(children, function (child) {
            var props = {};
            if (!react_default.a.isValidElement(child)) return child;
            if ([es6_MenuItem, _this2.getSubMenuType()].indexOf(child.type) < 0) {
                // Maybe the MenuItem or SubMenu is capsuled in a wrapper div or something else
                props.children = _this2.renderChildren(child.props.children);
                return react_default.a.cloneElement(child, props);
            }
            props.onMouseLeave = _this2.onChildMouseLeave.bind(_this2);
            if (child.type === _this2.getSubMenuType()) {
                // special props for SubMenu only
                props.forceOpen = _this2.state.forceSubMenuOpen && _this2.state.selectedItem === child;
                props.forceClose = _this2.handleForceClose;
                props.parentKeyNavigationHandler = _this2.handleKeyNavigation;
            }
            if (!child.props.divider && _this2.state.selectedItem === child) {
                // special props for selected item only
                props.selected = true;
                props.ref = function (ref) {
                    _this2.seletedItemRef = ref;
                };
                return react_default.a.cloneElement(child, props);
            }
            // onMouseMove is only needed for non selected items
            props.onMouseMove = function () {
                return _this2.onChildMouseMove(child);
            };
            return react_default.a.cloneElement(child, props);
        });
    };
};

/* harmony default export */ var es6_AbstractMenu = (AbstractMenu);
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/SubMenu.js
var SubMenu__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var SubMenu__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function SubMenu__defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function SubMenu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function SubMenu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function SubMenu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








var SubMenu_SubMenu = function (_AbstractMenu) {
    SubMenu__inherits(SubMenu, _AbstractMenu);

    function SubMenu(props) {
        SubMenu__classCallCheck(this, SubMenu);

        var _this = SubMenu__possibleConstructorReturn(this, (SubMenu.__proto__ || Object.getPrototypeOf(SubMenu)).call(this, props));

        _this.getMenuPosition = function () {
            var _window = window,
                innerWidth = _window.innerWidth,
                innerHeight = _window.innerHeight;

            var rect = _this.subMenu.getBoundingClientRect();
            var position = {};

            if (rect.bottom > innerHeight) {
                position.bottom = 0;
            } else {
                position.top = 0;
            }

            if (rect.right < innerWidth) {
                position.left = '100%';
            } else {
                position.right = '100%';
            }

            return position;
        };

        _this.getRTLMenuPosition = function () {
            var _window2 = window,
                innerHeight = _window2.innerHeight;

            var rect = _this.subMenu.getBoundingClientRect();
            var position = {};

            if (rect.bottom > innerHeight) {
                position.bottom = 0;
            } else {
                position.top = 0;
            }

            if (rect.left < 0) {
                position.left = '100%';
            } else {
                position.right = '100%';
            }

            return position;
        };

        _this.hideMenu = function () {
            if (_this.props.forceOpen) {
                _this.props.forceClose();
            }
            _this.setState({ visible: false, selectedItem: null });
        };

        _this.handleClick = function (e) {
            e.preventDefault();
        };

        _this.handleMouseEnter = function () {
            if (_this.closetimer) clearTimeout(_this.closetimer);

            if (_this.props.disabled || _this.state.visible) return;

            _this.opentimer = setTimeout(function () {
                return _this.setState({
                    visible: true,
                    selectedItem: null
                });
            }, _this.props.hoverDelay);
        };

        _this.handleMouseLeave = function () {
            if (_this.opentimer) clearTimeout(_this.opentimer);

            if (!_this.state.visible) return;

            _this.closetimer = setTimeout(function () {
                return _this.setState({
                    visible: false,
                    selectedItem: null
                });
            }, _this.props.hoverDelay);
        };

        _this.menuRef = function (c) {
            _this.menu = c;
        };

        _this.subMenuRef = function (c) {
            _this.subMenu = c;
        };

        _this.registerHandlers = function () {
            document.removeEventListener('keydown', _this.props.parentKeyNavigationHandler);
            document.addEventListener('keydown', _this.handleKeyNavigation);
        };

        _this.unregisterHandlers = function () {
            document.removeEventListener('keydown', _this.handleKeyNavigation);
            document.addEventListener('keydown', _this.props.parentKeyNavigationHandler);
        };

        _this.state = Object.assign({}, _this.state, {
            visible: false
        });
        return _this;
    }

    SubMenu__createClass(SubMenu, [{
        key: 'getSubMenuType',
        value: function getSubMenuType() {
            // eslint-disable-line class-methods-use-this
            return SubMenu;
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            this.isVisibilityChange = (this.state.visible !== nextState.visible || this.props.forceOpen !== nextProps.forceOpen) && !(this.state.visible && nextProps.forceOpen) && !(this.props.forceOpen && nextState.visible);
            return true;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var _this2 = this;

            if (!this.isVisibilityChange) return;
            if (this.props.forceOpen || this.state.visible) {
                var wrapper = window.requestAnimationFrame || setTimeout;
                wrapper(function () {
                    var styles = _this2.props.rtl ? _this2.getRTLMenuPosition() : _this2.getMenuPosition();

                    _this2.subMenu.style.removeProperty('top');
                    _this2.subMenu.style.removeProperty('bottom');
                    _this2.subMenu.style.removeProperty('left');
                    _this2.subMenu.style.removeProperty('right');

                    if (hasOwnProp(styles, 'top')) _this2.subMenu.style.top = styles.top;
                    if (hasOwnProp(styles, 'left')) _this2.subMenu.style.left = styles.left;
                    if (hasOwnProp(styles, 'bottom')) _this2.subMenu.style.bottom = styles.bottom;
                    if (hasOwnProp(styles, 'right')) _this2.subMenu.style.right = styles.right;
                    _this2.subMenu.classList.add(cssClasses.menuVisible);

                    _this2.registerHandlers();
                    _this2.setState({ selectedItem: null });
                });
            } else {
                var cleanup = function cleanup() {
                    _this2.subMenu.removeEventListener('transitionend', cleanup);
                    _this2.subMenu.style.removeProperty('bottom');
                    _this2.subMenu.style.removeProperty('right');
                    _this2.subMenu.style.top = 0;
                    _this2.subMenu.style.left = '100%';
                    _this2.unregisterHandlers();
                };
                this.subMenu.addEventListener('transitionend', cleanup);
                this.subMenu.classList.remove(cssClasses.menuVisible);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.opentimer) clearTimeout(this.opentimer);

            if (this.closetimer) clearTimeout(this.closetimer);

            this.unregisterHandlers();
        }
    }, {
        key: 'render',
        value: function render() {
            var _cx;

            var _props = this.props,
                children = _props.children,
                disabled = _props.disabled,
                title = _props.title,
                selected = _props.selected;
            var visible = this.state.visible;

            var menuProps = {
                ref: this.menuRef,
                onMouseEnter: this.handleMouseEnter,
                onMouseLeave: this.handleMouseLeave,
                className: classnames_default()(cssClasses.menuItem, cssClasses.subMenu),
                style: {
                    position: 'relative'
                }
            };
            var menuItemProps = {
                className: classnames_default()(cssClasses.menuItem, (_cx = {}, SubMenu__defineProperty(_cx, cssClasses.menuItemDisabled, disabled), SubMenu__defineProperty(_cx, cssClasses.menuItemActive, visible), SubMenu__defineProperty(_cx, cssClasses.menuItemSelected, selected), _cx)),
                onMouseMove: this.props.onMouseMove,
                onMouseOut: this.props.onMouseOut,
                onClick: this.handleClick
            };
            var subMenuProps = {
                ref: this.subMenuRef,
                style: {
                    position: 'absolute',
                    transition: 'opacity 1ms', // trigger transitionend event
                    top: 0,
                    left: '100%'
                },
                className: classnames_default()(cssClasses.menu, this.props.className)
            };

            return react_default.a.createElement(
                'nav',
                SubMenu__extends({}, menuProps, { role: 'menuitem', tabIndex: '-1', 'aria-haspopup': 'true' }),
                react_default.a.createElement(
                    'div',
                    menuItemProps,
                    title
                ),
                react_default.a.createElement(
                    'nav',
                    SubMenu__extends({}, subMenuProps, { role: 'menu', tabIndex: '-1' }),
                    this.renderChildren(children)
                )
            );
        }
    }]);

    return SubMenu;
}(es6_AbstractMenu);

SubMenu_SubMenu.propTypes = {
    children: prop_types_default.a.node.isRequired,
    title: prop_types_default.a.node.isRequired,
    className: prop_types_default.a.string,
    disabled: prop_types_default.a.bool,
    hoverDelay: prop_types_default.a.number,
    rtl: prop_types_default.a.bool,
    selected: prop_types_default.a.bool,
    onMouseMove: prop_types_default.a.func,
    onMouseOut: prop_types_default.a.func,
    forceOpen: prop_types_default.a.bool,
    forceClose: prop_types_default.a.func,
    parentKeyNavigationHandler: prop_types_default.a.func
};
SubMenu_SubMenu.defaultProps = {
    disabled: false,
    hoverDelay: 500,
    className: '',
    rtl: false,
    selected: false,
    onMouseMove: function onMouseMove() {
        return null;
    },
    onMouseOut: function onMouseOut() {
        return null;
    },
    forceOpen: false,
    forceClose: function forceClose() {
        return null;
    },
    parentKeyNavigationHandler: function parentKeyNavigationHandler() {
        return null;
    }
};
/* harmony default export */ var es6_SubMenu = (SubMenu_SubMenu);
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/ContextMenu.js
var ContextMenu__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function ContextMenu__defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function ContextMenu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ContextMenu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function ContextMenu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }












var ContextMenu_ContextMenu = function (_AbstractMenu) {
    ContextMenu__inherits(ContextMenu, _AbstractMenu);

    function ContextMenu(props) {
        ContextMenu__classCallCheck(this, ContextMenu);

        var _this = ContextMenu__possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).call(this, props));

        _this.registerHandlers = function () {
            document.addEventListener('mousedown', _this.handleOutsideClick);
            document.addEventListener('ontouchstart', _this.handleOutsideClick);
            document.addEventListener('scroll', _this.handleHide);
            document.addEventListener('contextmenu', _this.handleHide);
            document.addEventListener('keydown', _this.handleKeyNavigation);
            window.addEventListener('resize', _this.handleHide);
        };

        _this.unregisterHandlers = function () {
            document.removeEventListener('mousedown', _this.handleOutsideClick);
            document.removeEventListener('ontouchstart', _this.handleOutsideClick);
            document.removeEventListener('scroll', _this.handleHide);
            document.removeEventListener('contextmenu', _this.handleHide);
            document.removeEventListener('keydown', _this.handleKeyNavigation);
            window.removeEventListener('resize', _this.handleHide);
        };

        _this.handleShow = function (e) {
            if (e.detail.id !== _this.props.id || _this.state.isVisible) return;

            var _e$detail$position = e.detail.position,
                x = _e$detail$position.x,
                y = _e$detail$position.y;


            _this.setState({ isVisible: true, x: x, y: y });
            _this.registerHandlers();
            callIfExists(_this.props.onShow, e);
        };

        _this.handleHide = function (e) {
            if (_this.state.isVisible && (!e.detail || !e.detail.id || e.detail.id === _this.props.id)) {
                _this.unregisterHandlers();
                _this.setState({ isVisible: false, selectedItem: null, forceSubMenuOpen: false });
                callIfExists(_this.props.onHide, e);
            }
        };

        _this.handleOutsideClick = function (e) {
            if (!_this.menu.contains(e.target)) hideMenu();
        };

        _this.handleMouseLeave = function (event) {
            event.preventDefault();

            callIfExists(_this.props.onMouseLeave, event, object_assign_default()({}, _this.props.data, store.data), store.target);

            if (_this.props.hideOnLeave) hideMenu();
        };

        _this.handleContextMenu = function (e) {
            if (false) {
                e.preventDefault();
            }
            _this.handleHide(e);
        };

        _this.hideMenu = function (e) {
            if (e.keyCode === 27) {
                // enter
                hideMenu();
            }
        };

        _this.getMenuPosition = function () {
            var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var menuStyles = {
                top: y,
                left: x
            };

            if (!_this.menu) return menuStyles;

            var _window = window,
                innerWidth = _window.innerWidth,
                innerHeight = _window.innerHeight;

            var rect = _this.menu.getBoundingClientRect();

            if (y + rect.height > innerHeight) {
                menuStyles.top -= rect.height;
            }

            if (x + rect.width > innerWidth) {
                menuStyles.left -= rect.width;
            }

            if (menuStyles.top < 0) {
                menuStyles.top = rect.height < innerHeight ? (innerHeight - rect.height) / 2 : 0;
            }

            if (menuStyles.left < 0) {
                menuStyles.left = rect.width < innerWidth ? (innerWidth - rect.width) / 2 : 0;
            }

            return menuStyles;
        };

        _this.menuRef = function (c) {
            _this.menu = c;
        };

        _this.state = Object.assign({}, _this.state, {
            x: 0,
            y: 0,
            isVisible: false
        });
        return _this;
    }

    ContextMenu__createClass(ContextMenu, [{
        key: 'getSubMenuType',
        value: function getSubMenuType() {
            // eslint-disable-line class-methods-use-this
            return es6_SubMenu;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.listenId = globalEventListener.register(this.handleShow, this.handleHide);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var _this2 = this;

            if (this.state.isVisible) {
                var wrapper = window.requestAnimationFrame || setTimeout;

                wrapper(function () {
                    var _state = _this2.state,
                        x = _state.x,
                        y = _state.y;

                    var _getMenuPosition = _this2.getMenuPosition(x, y),
                        top = _getMenuPosition.top,
                        left = _getMenuPosition.left;

                    wrapper(function () {
                        if (!_this2.menu) return;
                        _this2.menu.style.top = top + 'px';
                        _this2.menu.style.left = left + 'px';
                        _this2.menu.style.opacity = 1;
                        _this2.menu.style.pointerEvents = 'auto';
                    });
                });
            } else {
                if (!this.menu) return;
                this.menu.style.opacity = 0;
                this.menu.style.pointerEvents = 'none';
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.listenId) {
                globalEventListener.unregister(this.listenId);
            }

            this.unregisterHandlers();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                className = _props.className;
            var isVisible = this.state.isVisible;

            var style = { position: 'fixed', opacity: 0, pointerEvents: 'none' };
            var menuClassnames = classnames_default()(cssClasses.menu, className, ContextMenu__defineProperty({}, cssClasses.menuVisible, isVisible));

            return react_default.a.createElement(
                'nav',
                {
                    role: 'menu', tabIndex: '-1', ref: this.menuRef, style: style, className: menuClassnames,
                    onContextMenu: this.handleContextMenu, onMouseLeave: this.handleMouseLeave },
                this.renderChildren(children)
            );
        }
    }]);

    return ContextMenu;
}(es6_AbstractMenu);

ContextMenu_ContextMenu.propTypes = {
    id: prop_types_default.a.string.isRequired,
    children: prop_types_default.a.node.isRequired,
    data: prop_types_default.a.object,
    className: prop_types_default.a.string,
    hideOnLeave: prop_types_default.a.bool,
    onHide: prop_types_default.a.func,
    onMouseLeave: prop_types_default.a.func,
    onShow: prop_types_default.a.func
};
ContextMenu_ContextMenu.defaultProps = {
    className: '',
    data: {},
    hideOnLeave: false,
    onHide: function onHide() {
        return null;
    },
    onMouseLeave: function onMouseLeave() {
        return null;
    },
    onShow: function onShow() {
        return null;
    }
};
/* harmony default export */ var es6_ContextMenu = (ContextMenu_ContextMenu);
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/ContextMenuTrigger.js
var ContextMenuTrigger__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function ContextMenuTrigger__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ContextMenuTrigger__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function ContextMenuTrigger__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }









var ContextMenuTrigger_ContextMenuTrigger = function (_Component) {
    ContextMenuTrigger__inherits(ContextMenuTrigger, _Component);

    function ContextMenuTrigger() {
        var _ref;

        var _temp, _this, _ret;

        ContextMenuTrigger__classCallCheck(this, ContextMenuTrigger);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = ContextMenuTrigger__possibleConstructorReturn(this, (_ref = ContextMenuTrigger.__proto__ || Object.getPrototypeOf(ContextMenuTrigger)).call.apply(_ref, [this].concat(args))), _this), _this.touchHandled = false, _this.handleMouseDown = function (event) {
            if (_this.props.holdToDisplay >= 0 && event.button === 0) {
                event.persist();

                _this.mouseDownTimeoutId = setTimeout(function () {
                    return _this.handleContextClick(event);
                }, _this.props.holdToDisplay);
            }
            callIfExists(_this.props.attributes.onMouseDown, event);
        }, _this.handleMouseUp = function (event) {
            if (event.button === 0) {
                clearTimeout(_this.mouseDownTimeoutId);
            }
            callIfExists(_this.props.attributes.onMouseUp, event);
        }, _this.handleMouseOut = function (event) {
            if (event.button === 0) {
                clearTimeout(_this.mouseDownTimeoutId);
            }
            callIfExists(_this.props.attributes.onMouseOut, event);
        }, _this.handleTouchstart = function (event) {
            _this.touchHandled = false;

            if (_this.props.holdToDisplay >= 0) {
                event.persist();

                _this.touchstartTimeoutId = setTimeout(function () {
                    _this.handleContextClick(event);
                    _this.touchHandled = true;
                }, _this.props.holdToDisplay);
            }
            callIfExists(_this.props.attributes.onTouchStart, event);
        }, _this.handleTouchEnd = function (event) {
            if (_this.touchHandled) {
                event.preventDefault();
            }
            clearTimeout(_this.touchstartTimeoutId);
            callIfExists(_this.props.attributes.onTouchEnd, event);
        }, _this.handleContextMenu = function (event) {
            _this.handleContextClick(event);
            callIfExists(_this.props.attributes.onContextMenu, event);
        }, _this.handleContextClick = function (event) {
            if (_this.props.disable) return;

            event.preventDefault();
            event.stopPropagation();

            var x = event.clientX || event.touches && event.touches[0].pageX;
            var y = event.clientY || event.touches && event.touches[0].pageY;

            hideMenu();

            var data = callIfExists(_this.props.collect, _this.props);
            var showMenuConfig = {
                position: { x: x, y: y },
                target: _this.elem,
                id: _this.props.id,
                data: data
            };
            if (data && typeof data.then === 'function') {
                // it's promise
                data.then(function (resp) {
                    showMenuConfig.data = resp;
                    showMenu(showMenuConfig);
                });
            } else {
                showMenu(showMenuConfig);
            }
        }, _this.elemRef = function (c) {
            _this.elem = c;
        }, _temp), ContextMenuTrigger__possibleConstructorReturn(_this, _ret);
    }

    ContextMenuTrigger__createClass(ContextMenuTrigger, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                renderTag = _props.renderTag,
                attributes = _props.attributes,
                children = _props.children;

            var newAttrs = object_assign_default()({}, attributes, {
                className: classnames_default()(cssClasses.menuWrapper, attributes.className),
                onContextMenu: this.handleContextMenu,
                onMouseDown: this.handleMouseDown,
                onMouseUp: this.handleMouseUp,
                onTouchStart: this.handleTouchstart,
                onTouchEnd: this.handleTouchEnd,
                onMouseOut: this.handleMouseOut,
                ref: this.elemRef
            });

            return react_default.a.createElement(renderTag, newAttrs, children);
        }
    }]);

    return ContextMenuTrigger;
}(react["Component"]);

ContextMenuTrigger_ContextMenuTrigger.propTypes = {
    id: prop_types_default.a.string.isRequired,
    children: prop_types_default.a.node.isRequired,
    attributes: prop_types_default.a.object,
    collect: prop_types_default.a.func,
    disable: prop_types_default.a.bool,
    holdToDisplay: prop_types_default.a.number,
    renderTag: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.func])
};
ContextMenuTrigger_ContextMenuTrigger.defaultProps = {
    attributes: {},
    collect: function collect() {
        return null;
    },

    disable: false,
    holdToDisplay: 1000,
    renderTag: 'div'
};
/* harmony default export */ var es6_ContextMenuTrigger = (ContextMenuTrigger_ContextMenuTrigger);
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/connectMenu.js
var connectMenu__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var connectMenu__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function connectMenu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function connectMenu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function connectMenu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }






// collect ContextMenuTrigger's expected props to NOT pass them on as part of the context
var ignoredTriggerProps = [].concat(_toConsumableArray(Object.keys(es6_ContextMenuTrigger.propTypes)), ['children']);

// expect the id of the menu to be responsible for as outer parameter
/* harmony default export */ var connectMenu = (function (menuId) {
    // expect menu component to connect as inner parameter
    // <Child/> is presumably a wrapper of <ContextMenu/>
    return function (Child) {
        // return wrapper for <Child/> that forwards the ContextMenuTrigger's additional props
        return function (_Component) {
            connectMenu__inherits(ConnectMenu, _Component);

            function ConnectMenu(props) {
                connectMenu__classCallCheck(this, ConnectMenu);

                var _this = connectMenu__possibleConstructorReturn(this, (ConnectMenu.__proto__ || Object.getPrototypeOf(ConnectMenu)).call(this, props));

                _this.handleShow = function (e) {
                    if (e.detail.id !== menuId) return;

                    // the onShow event's detail.data object holds all ContextMenuTrigger props
                    var data = e.detail.data;

                    var filteredData = {};

                    for (var key in data) {
                        // exclude props the ContextMenuTrigger is expecting itself
                        if (!ignoredTriggerProps.includes(key)) {
                            filteredData[key] = data[key];
                        }
                    }
                    _this.setState({ trigger: filteredData });
                };

                _this.handleHide = function () {
                    _this.setState({ trigger: null });
                };

                _this.state = { trigger: null };
                return _this;
            }

            connectMenu__createClass(ConnectMenu, [{
                key: 'componentDidMount',
                value: function componentDidMount() {
                    this.listenId = globalEventListener.register(this.handleShow, this.handleHide);
                }
            }, {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    if (this.listenId) {
                        globalEventListener.unregister(this.listenId);
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    return react_default.a.createElement(Child, connectMenu__extends({}, this.props, { id: menuId, trigger: this.state.trigger }));
                }
            }]);

            return ConnectMenu;
        }(react["Component"]);
    };
});
// CONCATENATED MODULE: ./node_modules/react-contextmenu/es6/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ContextMenu", function() { return es6_ContextMenu; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ContextMenuTrigger", function() { return es6_ContextMenuTrigger; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MenuItem", function() { return es6_MenuItem; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SubMenu", function() { return es6_SubMenu; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "connectMenu", function() { return connectMenu; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "hideMenu", function() { return hideMenu; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "showMenu", function() { return showMenu; });







/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(440)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHasZoomedViaMousewheel = exports.getIsUrlSetupDone = exports.getView = exports.getApp = undefined;

var _redux = __webpack_require__(44);

function view() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { phase: 'INITIALIZING' };
  var action = arguments[1];

  if (state.phase === 'PROFILE') {
    // Let's not come back at another phase if we're already displaying a profile
    return state;
  }

  switch (action.type) {
    case 'TEMPORARY_ERROR_RECEIVING_PROFILE_FROM_STORE':
    case 'TEMPORARY_ERROR_RECEIVING_PROFILE_FROM_URL':
    case 'TEMPORARY_ERROR_RECEIVING_PROFILE_FROM_ADDON':
      return {
        phase: 'INITIALIZING',
        additionalData: {
          message: action.error.message,
          attempt: action.error.attempt
        }
      };
    case 'ERROR_RECEIVING_PROFILE_FROM_FILE':
    case 'FATAL_ERROR_RECEIVING_PROFILE_FROM_ADDON':
    case 'FATAL_ERROR_RECEIVING_PROFILE_FROM_STORE':
    case 'FATAL_ERROR_RECEIVING_PROFILE_FROM_URL':
      return { phase: 'FATAL_ERROR', error: action.error };
    case 'WAITING_FOR_PROFILE_FROM_ADDON':
      return { phase: 'INITIALIZING' };
    case 'ROUTE_NOT_FOUND':
      return { phase: 'ROUTE_NOT_FOUND' };
    case 'RECEIVE_PROFILE_FROM_ADDON':
    case 'RECEIVE_PROFILE_FROM_STORE':
    case 'RECEIVE_PROFILE_FROM_URL':
    case 'RECEIVE_PROFILE_FROM_FILE':
      return { phase: 'PROFILE' };
    default:
      return state;
  }
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function isUrlSetupDone() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments[1];

  switch (action.type) {
    case '@@urlenhancer/urlSetupDone':
      return true;
    default:
      return state;
  }
}

function hasZoomedViaMousewheel() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments[1];

  switch (action.type) {
    case 'HAS_ZOOMED_VIA_MOUSEWHEEL':
      {
        return true;
      }
    default:
      return state;
  }
}

var appStateReducer = (0, _redux.combineReducers)({
  view: view,
  isUrlSetupDone: isUrlSetupDone,
  hasZoomedViaMousewheel: hasZoomedViaMousewheel
});
exports.default = appStateReducer;
var getApp = exports.getApp = function getApp(state) {
  return state.app;
};
var getView = exports.getView = function getView(state) {
  return getApp(state).view;
};
var getIsUrlSetupDone = exports.getIsUrlSetupDone = function getIsUrlSetupDone(state) {
  return getApp(state).isUrlSetupDone;
};
var getHasZoomedViaMousewheel = exports.getHasZoomedViaMousewheel = function getHasZoomedViaMousewheel(state) {
  return getApp(state).hasZoomedViaMousewheel;
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (true) {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactErrorUtils = __webpack_require__(85);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (true) {
       true ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (true) {
       true ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (true) {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

     true ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (true) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (true) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (true) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ?  true ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (true) {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(17);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(49);
var Danger = __webpack_require__(255);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactInstrumentation = __webpack_require__(21);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(91);
var setInnerHTML = __webpack_require__(71);
var setTextContent = __webpack_require__(155);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (true) {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (true) {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (true) {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactPropTypesSecret = __webpack_require__(159);
var propTypesFactory = __webpack_require__(142);

var React = __webpack_require__(46);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
         true ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ?  true ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactCurrentOwner = __webpack_require__(27);
var ReactInstanceMap = __webpack_require__(58);
var ReactInstrumentation = __webpack_require__(21);
var ReactUpdates = __webpack_require__(28);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (true) {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
       true ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (true) {
     true ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (true) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
         true ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (true) {
      ReactInstrumentation.debugTool.onSetState();
       true ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ?  true ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var emptyFunction = __webpack_require__(24);
var warning = __webpack_require__(6);

var validateDOMNesting = emptyFunction;

if (true) {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
       true ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(40)
  , document = __webpack_require__(22).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(40);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 103 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 104 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(32)
  , dPs         = __webpack_require__(175)
  , enumBugKeys = __webpack_require__(109)
  , IE_PROTO    = __webpack_require__(107)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(101)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(178).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(103)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(108)('keys')
  , uid    = __webpack_require__(75);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(22)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 109 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(104);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(18);

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(22)
  , core           = __webpack_require__(16)
  , LIBRARY        = __webpack_require__(74)
  , wksExt         = __webpack_require__(111)
  , defineProperty = __webpack_require__(31).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 113 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/lodash-es/_freeGlobal.js
var _freeGlobal = __webpack_require__(352);

// CONCATENATED MODULE: ./node_modules/lodash-es/_root.js


/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal["a" /* default */] || freeSelf || Function('return this')();

/* harmony default export */ var _root = (root);

// CONCATENATED MODULE: ./node_modules/lodash-es/_Symbol.js


/** Built-in value references. */
var Symbol = _root.Symbol;

/* harmony default export */ var _Symbol = (Symbol);

// CONCATENATED MODULE: ./node_modules/lodash-es/_getRawTag.js


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/* harmony default export */ var _getRawTag = (getRawTag);

// CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js
/** Used for built-in method references. */
var _objectToString_objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var _objectToString_nativeObjectToString = _objectToString_objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return _objectToString_nativeObjectToString.call(value);
}

/* harmony default export */ var _objectToString = (objectToString);

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js




/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

/* harmony default export */ var _baseGetTag = (baseGetTag);

// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ var _overArg = (overArg);

// CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js


/** Built-in value references. */
var getPrototype = _overArg(Object.getPrototypeOf, Object);

/* harmony default export */ var _getPrototype = (getPrototype);

// CONCATENATED MODULE: ./node_modules/lodash-es/isObjectLike.js
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ var lodash_es_isObjectLike = (isObjectLike);

// CONCATENATED MODULE: ./node_modules/lodash-es/isPlainObject.js




/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    isPlainObject_objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var isPlainObject_hasOwnProperty = isPlainObject_objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!lodash_es_isObjectLike(value) || _baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = _getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = isPlainObject_hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/* harmony default export */ var lodash_es_isPlainObject = __webpack_exports__["a"] = (isPlainObject);


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _taggedTemplateLiteral2 = __webpack_require__(184);

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _regenerator = __webpack_require__(118);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(119);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

var getProfileFromAddon = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(dispatch, geckoProfiler) {
    var rawGeckoProfile, profile;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dispatch(waitingForProfileFromAddon());

            // XXX update state to show that we're connected to the profiler addon
            _context.next = 3;
            return geckoProfiler.getProfile();

          case 3:
            rawGeckoProfile = _context.sent;
            profile = (0, _processProfile.processProfile)(_unpackGeckoProfileFromAddon(rawGeckoProfile));

            dispatch(receiveProfileFromAddon(profile));

            return _context.abrupt('return', profile);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getProfileFromAddon(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getSymbolStore = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(dispatch, geckoProfiler) {
    var _this2 = this;

    var symbolStore;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            symbolStore = new _symbolStore.SymbolStore('perf-html-async-storage', {
              requestSymbolTable: function () {
                var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(debugName, breakpadId) {
                  var requestedLib, symbolTable;
                  return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          requestedLib = { debugName: debugName, breakpadId: breakpadId };

                          dispatch(requestingSymbolTable(requestedLib));
                          _context2.prev = 2;
                          _context2.next = 5;
                          return geckoProfiler.getSymbolTable(debugName, breakpadId);

                        case 5:
                          symbolTable = _context2.sent;

                          dispatch(receivedSymbolTableReply(requestedLib));
                          return _context2.abrupt('return', symbolTable);

                        case 10:
                          _context2.prev = 10;
                          _context2.t0 = _context2['catch'](2);

                          dispatch(receivedSymbolTableReply(requestedLib));
                          throw _context2.t0;

                        case 14:
                        case 'end':
                          return _context2.stop();
                      }
                    }
                  }, _callee2, _this2, [[2, 10]]);
                }));

                function requestSymbolTable(_x5, _x6) {
                  return _ref3.apply(this, arguments);
                }

                return requestSymbolTable;
              }()
            });
            return _context3.abrupt('return', symbolStore);

          case 2:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getSymbolStore(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var doSymbolicateProfile = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(dispatch, profile, symbolStore) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            dispatch(startSymbolicating());
            _context4.next = 3;
            return (0, _symbolication.symbolicateProfile)(profile, symbolStore, {
              onMergeFunctions: function onMergeFunctions(threadIndex, oldFuncToNewFuncMap) {
                dispatch(mergeFunctions(threadIndex, oldFuncToNewFuncMap));
              },
              onGotFuncNames: function onGotFuncNames(threadIndex, funcIndices, funcNames) {
                dispatch(assignFunctionNames(threadIndex, funcIndices, funcNames));
              },
              onGotTaskTracerNames: function onGotTaskTracerNames(addressIndices, symbolNames) {
                dispatch(assignTaskTracerNames(addressIndices, symbolNames));
              }
            });

          case 3:
            _context4.next = 5;
            return gCoalescedFunctionsUpdateDispatcher.scheduledUpdatesDone;

          case 5:

            dispatch(doneSymbolicating());

          case 6:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function doSymbolicateProfile(_x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();

/**
 * Tries to fetch a profile on `url`. If the profile is not found,
 * `onTemporaryError` is called with an appropriate error, we wait 1 second, and
 * then tries again. If we still can't find the profile after 11 tries, the
 * returned promise is rejected with a fatal error.
 * If we can retrieve the profile properly, the returned promise is resolved
 * with the JSON.parsed profile.
 */
var _fetchProfile = function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(_ref8) {
    var url = _ref8.url,
        onTemporaryError = _ref8.onTemporaryError;
    var MAX_WAIT_SECONDS, i, response, json;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            MAX_WAIT_SECONDS = 10;
            i = 0;

          case 2:
            if (false) {
              _context6.next = 20;
              break;
            }

            _context6.next = 5;
            return fetch(url);

          case 5:
            response = _context6.sent;

            if (!response.ok) {
              _context6.next = 11;
              break;
            }

            _context6.next = 9;
            return response.json();

          case 9:
            json = _context6.sent;
            return _context6.abrupt('return', json);

          case 11:
            if (!(response.status !== 403)) {
              _context6.next = 13;
              break;
            }

            throw new Error((0, _commonTags.oneLine)(_templateObject2, response.status, response.statusText));

          case 13:
            if (!(i++ === MAX_WAIT_SECONDS)) {
              _context6.next = 15;
              break;
            }

            return _context6.abrupt('break', 20);

          case 15:

            onTemporaryError(new _errors.TemporaryError('Profile not found on remote server.', { count: i, total: MAX_WAIT_SECONDS + 1 // 11 tries during 10 seconds
            }));

            _context6.next = 18;
            return _wait(1000);

          case 18:
            _context6.next = 2;
            break;

          case 20:
            throw new Error((0, _commonTags.oneLine)(_templateObject3, MAX_WAIT_SECONDS));

          case 21:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function _fetchProfile(_x11) {
    return _ref9.apply(this, arguments);
  };
}();

var _templateObject = (0, _taggedTemplateLiteral3.default)(['\n            We were unable to connect to the Gecko profiler add-on within thirty seconds.\n            This might be because the profile is big or your machine is slower than usual.\n            Still waiting...\n          '], ['\n            We were unable to connect to the Gecko profiler add-on within thirty seconds.\n            This might be because the profile is big or your machine is slower than usual.\n            Still waiting...\n          ']),
    _templateObject2 = (0, _taggedTemplateLiteral3.default)(['\n        Could not fetch the profile on remote server.\n        Response was: ', ' ', '.\n      '], ['\n        Could not fetch the profile on remote server.\n        Response was: ', ' ', '.\n      ']),
    _templateObject3 = (0, _taggedTemplateLiteral3.default)(['\n    Could not fetch the profile on remote server:\n    still not found after ', ' seconds.\n  '], ['\n    Could not fetch the profile on remote server:\n    still not found after ', ' seconds.\n  ']); /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                                                                                                                                                                                                                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                                                                                                                                                                                                                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.waitingForProfileFromAddon = waitingForProfileFromAddon;
exports.receiveProfileFromAddon = receiveProfileFromAddon;
exports.requestingSymbolTable = requestingSymbolTable;
exports.receivedSymbolTableReply = receivedSymbolTableReply;
exports.startSymbolicating = startSymbolicating;
exports.doneSymbolicating = doneSymbolicating;
exports.coalescedFunctionsUpdate = coalescedFunctionsUpdate;
exports.mergeFunctions = mergeFunctions;
exports.assignFunctionNames = assignFunctionNames;
exports.assignTaskTracerNames = assignTaskTracerNames;
exports.temporaryErrorReceivingProfileFromAddon = temporaryErrorReceivingProfileFromAddon;
exports.fatalErrorReceivingProfileFromAddon = fatalErrorReceivingProfileFromAddon;
exports.retrieveProfileFromAddon = retrieveProfileFromAddon;
exports.waitingForProfileFromStore = waitingForProfileFromStore;
exports.waitingForProfileFromUrl = waitingForProfileFromUrl;
exports.receiveProfileFromStore = receiveProfileFromStore;
exports.receiveProfileFromUrl = receiveProfileFromUrl;
exports.temporaryErrorReceivingProfileFromStore = temporaryErrorReceivingProfileFromStore;
exports.fatalErrorReceivingProfileFromStore = fatalErrorReceivingProfileFromStore;
exports.temporaryErrorReceivingProfileFromUrl = temporaryErrorReceivingProfileFromUrl;
exports.fatalErrorReceivingProfileFromUrl = fatalErrorReceivingProfileFromUrl;
exports.retrieveProfileFromStore = retrieveProfileFromStore;
exports.retrieveProfileFromUrl = retrieveProfileFromUrl;
exports.waitingForProfileFromFile = waitingForProfileFromFile;
exports.receiveProfileFromFile = receiveProfileFromFile;
exports.errorReceivingProfileFromFile = errorReceivingProfileFromFile;
exports.retrieveProfileFromFile = retrieveProfileFromFile;

var _commonTags = __webpack_require__(381);

var _profileView = __webpack_require__(14);

var _processProfile = __webpack_require__(193);

var _symbolStore = __webpack_require__(404);

var _symbolication = __webpack_require__(120);

var _gz = __webpack_require__(194);

var _profileData = __webpack_require__(19);

var _errors = __webpack_require__(406);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file collects all the actions that are used for receiving the profile in the
 * client and getting it into the processed format.
 */

function waitingForProfileFromAddon() {
  return {
    type: 'WAITING_FOR_PROFILE_FROM_ADDON'
  };
}

function receiveProfileFromAddon(profile) {
  return {
    type: 'RECEIVE_PROFILE_FROM_ADDON',
    profile: profile
  };
}

function requestingSymbolTable(requestedLib) {
  return {
    type: 'REQUESTING_SYMBOL_TABLE',
    requestedLib: requestedLib
  };
}

function receivedSymbolTableReply(requestedLib) {
  return {
    type: 'RECEIVED_SYMBOL_TABLE_REPLY',
    requestedLib: requestedLib
  };
}

function startSymbolicating() {
  return {
    type: 'START_SYMBOLICATING'
  };
}

function doneSymbolicating() {
  return function (dispatch, getState) {
    dispatch({ type: 'DONE_SYMBOLICATING' });

    // TODO - Do not use selectors here.
    dispatch({
      toWorker: true,
      type: 'PROFILE_PROCESSED',
      profile: (0, _profileView.getProfile)(getState())
    });

    dispatch({
      toWorker: true,
      type: 'SUMMARIZE_PROFILE'
    });
  };
}

function coalescedFunctionsUpdate(functionsUpdatePerThread) {
  return {
    type: 'COALESCED_FUNCTIONS_UPDATE',
    functionsUpdatePerThread: functionsUpdatePerThread
  };
}

var requestIdleCallbackPolyfill = (typeof window === 'undefined' ? 'undefined' : (0, _typeof3.default)(window)) === 'object' && window.requestIdleCallback ? window.requestIdleCallback : function (callback) {
  return setTimeout(callback, 0);
};

var ColascedFunctionsUpdateDispatcher = function () {
  function ColascedFunctionsUpdateDispatcher() {
    (0, _classCallCheck3.default)(this, ColascedFunctionsUpdateDispatcher);

    this._updates = {};
    this._requestedUpdate = false;
    this._requestIdleTimeout = { timeout: 2000 };
    this.scheduledUpdatesDone = Promise.resolve();
  }

  (0, _createClass3.default)(ColascedFunctionsUpdateDispatcher, [{
    key: '_scheduleUpdate',
    value: function _scheduleUpdate(dispatch) {
      var _this = this;

      // Only request an update if one hasn't already been schedule.
      if (!this._requestedUpdate) {
        // Let any consumers of this class be able to know when all scheduled updates
        // are done.
        this.scheduledUpdatesDone = new Promise(function (resolve) {
          requestIdleCallbackPolyfill(function () {
            _this._dispatchUpdate(dispatch);
            resolve();
          }, _this._requestIdleTimeout);
        });
        this._requestedUpdate = true;
      }
    }
  }, {
    key: '_dispatchUpdate',
    value: function _dispatchUpdate(dispatch) {
      var updates = this._updates;
      this._updates = {};
      this._requestedUpdate = false;
      dispatch(coalescedFunctionsUpdate(updates));
    }
  }, {
    key: 'mergeFunctions',
    value: function mergeFunctions(dispatch, threadIndex, oldFuncToNewFuncMap) {
      this._scheduleUpdate(dispatch);
      if (!this._updates[threadIndex]) {
        this._updates[threadIndex] = {
          oldFuncToNewFuncMap: oldFuncToNewFuncMap,
          funcIndices: [],
          funcNames: []
        };
      } else {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = oldFuncToNewFuncMap.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var oldFunc = _step.value;

            var funcIndex = oldFuncToNewFuncMap.get(oldFunc);
            if (funcIndex === undefined) {
              throw new Error('Unable to merge functions together, an undefined funcIndex was returned.');
            }
            this._updates[threadIndex].oldFuncToNewFuncMap.set(oldFunc, funcIndex);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: 'assignFunctionNames',
    value: function assignFunctionNames(dispatch, threadIndex, funcIndices, funcNames) {
      this._scheduleUpdate(dispatch);
      if (!this._updates[threadIndex]) {
        this._updates[threadIndex] = {
          funcIndices: funcIndices,
          funcNames: funcNames,
          oldFuncToNewFuncMap: new Map()
        };
      } else {
        this._updates[threadIndex].funcIndices = this._updates[threadIndex].funcIndices.concat(funcIndices);
        this._updates[threadIndex].funcNames = this._updates[threadIndex].funcNames.concat(funcNames);
      }
    }
  }]);
  return ColascedFunctionsUpdateDispatcher;
}();

var gCoalescedFunctionsUpdateDispatcher = new ColascedFunctionsUpdateDispatcher();

function mergeFunctions(threadIndex, oldFuncToNewFuncMap) {
  return function (dispatch) {
    gCoalescedFunctionsUpdateDispatcher.mergeFunctions(dispatch, threadIndex, oldFuncToNewFuncMap);
  };
}

function assignFunctionNames(threadIndex, funcIndices, funcNames) {
  return function (dispatch) {
    gCoalescedFunctionsUpdateDispatcher.assignFunctionNames(dispatch, threadIndex, funcIndices, funcNames);
  };
}

function assignTaskTracerNames(addressIndices, symbolNames) {
  return {
    type: 'ASSIGN_TASK_TRACER_NAMES',
    addressIndices: addressIndices,
    symbolNames: symbolNames
  };
}

/**
 * If the profile object we got from the add-on is an ArrayBuffer, convert it
 * to a gecko profile object by parsing the JSON.
 */
function _unpackGeckoProfileFromAddon(profile) {
  if (profile instanceof ArrayBuffer) {
    var textDecoder = new TextDecoder();
    return JSON.parse(textDecoder.decode(profile));
  }
  return profile;
}

function temporaryErrorReceivingProfileFromAddon(error) {
  return {
    type: 'TEMPORARY_ERROR_RECEIVING_PROFILE_FROM_ADDON',
    error: error
  };
}

function fatalErrorReceivingProfileFromAddon(error) {
  return {
    type: 'FATAL_ERROR_RECEIVING_PROFILE_FROM_ADDON',
    error: error
  };
}

function retrieveProfileFromAddon() {
  var _this3 = this;

  return function () {
    var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(dispatch) {
      var timeoutId, geckoProfiler, _ref6, _ref7, profile, symbolStore;

      return _regenerator2.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              timeoutId = setTimeout(function () {
                dispatch(temporaryErrorReceivingProfileFromAddon(new _errors.TemporaryError((0, _commonTags.oneLine)(_templateObject))));
              }, 30000);
              _context5.next = 4;
              return window.geckoProfilerPromise;

            case 4:
              geckoProfiler = _context5.sent;

              clearTimeout(timeoutId);

              _context5.next = 8;
              return Promise.all([getProfileFromAddon(dispatch, geckoProfiler), getSymbolStore(dispatch, geckoProfiler)]);

            case 8:
              _ref6 = _context5.sent;
              _ref7 = (0, _slicedToArray3.default)(_ref6, 2);
              profile = _ref7[0];
              symbolStore = _ref7[1];
              _context5.next = 14;
              return doSymbolicateProfile(dispatch, profile, symbolStore);

            case 14:
              _context5.next = 20;
              break;

            case 16:
              _context5.prev = 16;
              _context5.t0 = _context5['catch'](0);

              dispatch(fatalErrorReceivingProfileFromAddon(_context5.t0));
              throw _context5.t0;

            case 20:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, _this3, [[0, 16]]);
    }));

    return function (_x10) {
      return _ref5.apply(this, arguments);
    };
  }();
}

function waitingForProfileFromStore() {
  return {
    type: 'WAITING_FOR_PROFILE_FROM_STORE'
  };
}

function waitingForProfileFromUrl() {
  return {
    type: 'WAITING_FOR_PROFILE_FROM_URL'
  };
}

function receiveProfileFromStore(profile) {
  return function (dispatch) {
    dispatch({
      type: 'RECEIVE_PROFILE_FROM_STORE',
      profile: profile
    });
    dispatch({
      toWorker: true,
      type: 'PROFILE_PROCESSED',
      profile: profile
    });
    dispatch({
      toWorker: true,
      type: 'SUMMARIZE_PROFILE'
    });
  };
}

function receiveProfileFromUrl(profile) {
  return function (dispatch) {
    dispatch({
      type: 'RECEIVE_PROFILE_FROM_URL',
      profile: profile
    });
    dispatch({
      toWorker: true,
      type: 'PROFILE_PROCESSED',
      profile: profile
    });
    dispatch({
      toWorker: true,
      type: 'SUMMARIZE_PROFILE'
    });
  };
}

function temporaryErrorReceivingProfileFromStore(error) {
  return {
    type: 'TEMPORARY_ERROR_RECEIVING_PROFILE_FROM_STORE',
    error: error
  };
}

function fatalErrorReceivingProfileFromStore(error) {
  return {
    type: 'FATAL_ERROR_RECEIVING_PROFILE_FROM_STORE',
    error: error
  };
}

function temporaryErrorReceivingProfileFromUrl(error) {
  return {
    type: 'TEMPORARY_ERROR_RECEIVING_PROFILE_FROM_URL',
    error: error
  };
}

function fatalErrorReceivingProfileFromUrl(error) {
  return {
    type: 'FATAL_ERROR_RECEIVING_PROFILE_FROM_URL',
    error: error
  };
}

function _wait(delayMs) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, delayMs);
  });
}

function retrieveProfileFromStore(hash) {
  return function () {
    var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(dispatch) {
      var serializedProfile, profile, zeroAt;
      return _regenerator2.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              dispatch(waitingForProfileFromStore());

              _context7.prev = 1;
              _context7.next = 4;
              return _fetchProfile({
                url: 'https://profile-store.commondatastorage.googleapis.com/' + hash,
                onTemporaryError: function onTemporaryError(e) {
                  dispatch(temporaryErrorReceivingProfileFromStore(e));
                }
              });

            case 4:
              serializedProfile = _context7.sent;
              profile = (0, _processProfile.unserializeProfileOfArbitraryFormat)(serializedProfile);

              if (!(profile === undefined)) {
                _context7.next = 8;
                break;
              }

              throw new Error('Unable to parse the profile.');

            case 8:

              if (typeof window !== 'undefined' && window.legacyRangeFilters) {
                zeroAt = (0, _profileData.getTimeRangeIncludingAllThreads)(profile).start;

                window.legacyRangeFilters.forEach(function (_ref11) {
                  var start = _ref11.start,
                      end = _ref11.end;
                  return dispatch({
                    type: 'ADD_RANGE_FILTER',
                    start: start - zeroAt,
                    end: end - zeroAt
                  });
                });
              }

              dispatch(receiveProfileFromStore(profile));
              _context7.next = 15;
              break;

            case 12:
              _context7.prev = 12;
              _context7.t0 = _context7['catch'](1);

              dispatch(fatalErrorReceivingProfileFromStore(_context7.t0));

            case 15:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, this, [[1, 12]]);
    }));

    return function (_x12) {
      return _ref10.apply(this, arguments);
    };
  }();
}

function retrieveProfileFromUrl(profileUrl) {
  return function () {
    var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(dispatch) {
      var serializedProfile, profile, zeroAt;
      return _regenerator2.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              dispatch(waitingForProfileFromUrl());

              _context8.prev = 1;
              _context8.next = 4;
              return _fetchProfile({
                url: profileUrl,
                onTemporaryError: function onTemporaryError(e) {
                  dispatch(temporaryErrorReceivingProfileFromUrl(e));
                }
              });

            case 4:
              serializedProfile = _context8.sent;
              profile = (0, _processProfile.unserializeProfileOfArbitraryFormat)(serializedProfile);

              if (!(profile === undefined)) {
                _context8.next = 8;
                break;
              }

              throw new Error('Unable to parse the profile.');

            case 8:

              if (typeof window !== 'undefined' && window.legacyRangeFilters) {
                zeroAt = (0, _profileData.getTimeRangeIncludingAllThreads)(profile).start;

                window.legacyRangeFilters.forEach(function (_ref13) {
                  var start = _ref13.start,
                      end = _ref13.end;
                  return dispatch({
                    type: 'ADD_RANGE_FILTER',
                    start: start - zeroAt,
                    end: end - zeroAt
                  });
                });
              }

              dispatch(receiveProfileFromUrl(profile));
              _context8.next = 15;
              break;

            case 12:
              _context8.prev = 12;
              _context8.t0 = _context8['catch'](1);

              dispatch(fatalErrorReceivingProfileFromUrl(_context8.t0));

            case 15:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, this, [[1, 12]]);
    }));

    return function (_x13) {
      return _ref12.apply(this, arguments);
    };
  }();
}

function waitingForProfileFromFile() {
  return {
    type: 'WAITING_FOR_PROFILE_FROM_FILE'
  };
}

function receiveProfileFromFile(profile) {
  return function (dispatch) {
    dispatch({
      type: 'RECEIVE_PROFILE_FROM_FILE',
      profile: profile
    });
    dispatch({
      toWorker: true,
      type: 'PROFILE_PROCESSED',
      profile: profile
    });
    dispatch({
      toWorker: true,
      type: 'SUMMARIZE_PROFILE'
    });
  };
}

function errorReceivingProfileFromFile(error) {
  return {
    type: 'ERROR_RECEIVING_PROFILE_FROM_FILE',
    error: error
  };
}

function _fileReader(input) {
  var reader = new FileReader();
  var promise = new Promise(function (resolve, reject) {
    // Flow's definition for FileReader doesn't handle the polymorphic nature of
    // reader.result very well, as its definition is <string | ArrayBuffer>.
    // Here we ensure type safety by returning the proper Promise type from the
    // methods below.
    reader.onload = function () {
      return resolve(reader.result);
    };
    reader.onerror = function () {
      return reject(reader.error);
    };
  });

  return {
    asText: function asText() {
      reader.readAsText(input);
      return promise;
    },
    asArrayBuffer: function asArrayBuffer() {
      reader.readAsArrayBuffer(input);
      return promise;
    }
  };
}

function retrieveProfileFromFile(file) {
  var _this4 = this;

  return function () {
    var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(dispatch) {
      var text, profile, buffer, arrayBuffer, decompressedArrayBuffer, textDecoder, _text, _profile;

      return _regenerator2.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              dispatch(waitingForProfileFromFile());

              _context9.prev = 1;
              _context9.next = 4;
              return _fileReader(file).asText();

            case 4:
              text = _context9.sent;
              profile = (0, _processProfile.unserializeProfileOfArbitraryFormat)(text);

              if (!(profile === undefined)) {
                _context9.next = 8;
                break;
              }

              throw new Error('Unable to parse the profile.');

            case 8:

              dispatch(receiveProfileFromFile(profile));
              return _context9.abrupt('return');

            case 12:
              _context9.prev = 12;
              _context9.t0 = _context9['catch'](1);

            case 14:
              _context9.prev = 14;
              _context9.next = 17;
              return _fileReader(file).asArrayBuffer();

            case 17:
              buffer = _context9.sent;
              arrayBuffer = new Uint8Array(buffer);
              _context9.next = 21;
              return (0, _gz.decompress)(arrayBuffer);

            case 21:
              decompressedArrayBuffer = _context9.sent;
              textDecoder = new TextDecoder();
              _context9.next = 25;
              return textDecoder.decode(decompressedArrayBuffer);

            case 25:
              _text = _context9.sent;
              _profile = (0, _processProfile.unserializeProfileOfArbitraryFormat)(_text);

              if (!(_profile === undefined)) {
                _context9.next = 29;
                break;
              }

              throw new Error('Unable to parse the profile.');

            case 29:

              dispatch(receiveProfileFromFile(_profile));
              _context9.next = 35;
              break;

            case 32:
              _context9.prev = 32;
              _context9.t1 = _context9['catch'](14);

              dispatch(errorReceivingProfileFromFile(_context9.t1));

            case 35:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, _this4, [[1, 12], [14, 32]]);
    }));

    return function (_x14) {
      return _ref14.apply(this, arguments);
    };
  }();
}

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(62)
  , TAG = __webpack_require__(18)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(116)
  , ITERATOR  = __webpack_require__(18)('iterator')
  , Iterators = __webpack_require__(52);
module.exports = __webpack_require__(16).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(369);


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(371);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = __webpack_require__(118);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = __webpack_require__(119);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Symbolicate the given thread. Calls the symbolication handlers `onMergeFunctions`
 * and `onGotFuncNames` after each bit of symbolication, and resolves the returned
 * promise once completely done.
 */
var symbolicateThread = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(thread, threadIndex, symbolStore, symbolicationHandlers) {
    var foundFuncMap;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            foundFuncMap = gatherFuncsInThread(thread);
            _context.next = 3;
            return Promise.all(Array.from(foundFuncMap).map(function (_ref2) {
              var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
                  lib = _ref3[0],
                  funcsToSymbolicate = _ref3[1];

              // lib is a lib object from thread.libs.
              // funcsToSymbolicate is an array of funcIndex.
              return symbolStore.getFuncAddressTableForLib(lib).then(function (funcAddressTable) {
                // We now have the func address table for lib. This lets us merge funcs
                // that are actually the same function.
                // We don't have any symbols yet. We'll request those after we've merged
                // the functions.
                var _findFunctionsToMerge = findFunctionsToMergeAndSymbolicationAddresses(funcAddressTable, funcsToSymbolicate, thread.funcTable),
                    funcAddrIndices = _findFunctionsToMerge.funcAddrIndices,
                    funcIndices = _findFunctionsToMerge.funcIndices,
                    oldFuncToNewFuncMap = _findFunctionsToMerge.oldFuncToNewFuncMap;

                symbolicationHandlers.onMergeFunctions(threadIndex, oldFuncToNewFuncMap);

                // Now list the func addresses that we want symbols for, and request them.
                return symbolStore.getSymbolsForAddressesInLib(funcAddrIndices, lib).then(function (funcNames) {
                  symbolicationHandlers.onGotFuncNames(threadIndex, funcIndices, funcNames);
                });
              }).catch(function () {
                // We could not find symbols for this library.
                // Don't throw, so that the resulting promise will be resolved, thereby
                // indicating that we're done symbolicating with lib.
              });
            }));

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function symbolicateThread(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var symbolicateTaskTracer = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(tasktracer, symbolStore, symbolicationHandlers) {
    var addressTable, addressIndicesByLib;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            addressTable = tasktracer.addressTable, addressIndicesByLib = tasktracer.addressIndicesByLib;
            _context2.next = 3;
            return Promise.all(Array.from(addressIndicesByLib).map(function (_ref5) {
              var _ref6 = (0, _slicedToArray3.default)(_ref5, 2),
                  lib = _ref6[0],
                  addressIndices = _ref6[1];

              return symbolStore.getFuncAddressTableForLib(lib).then(function (funcAddressTable) {
                addressIndices.sort(function (a, b) {
                  return addressTable.address[a] - addressTable.address[b];
                });
                var funcAddrIndices = [];
                var addressIndicesToSymbolicate = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = addressIndices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var addressIndex = _step2.value;

                    var address = addressTable.address[addressIndex];
                    var funcAddressIndex = _bisection2.default.right(funcAddressTable, address, 0) - 1;
                    if (funcAddressIndex >= 0) {
                      funcAddrIndices.push(funcAddressIndex);
                      addressIndicesToSymbolicate.push(addressIndex);
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }

                return symbolStore.getSymbolsForAddressesInLib(funcAddrIndices, lib).then(function (symbolNames) {
                  symbolicationHandlers.onGotTaskTracerNames(addressIndicesToSymbolicate, symbolNames);
                });
              });
            }));

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function symbolicateTaskTracer(_x5, _x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();

/**
 * Modify certain known symbol names for cleaner presentations.
 */


exports.getContainingLibrary = getContainingLibrary;
exports.getClosestLibrary = getClosestLibrary;
exports.setFuncNames = setFuncNames;
exports.applyFunctionMerging = applyFunctionMerging;
exports.setTaskTracerNames = setTaskTracerNames;
exports.symbolicateProfile = symbolicateProfile;

var _bisection = __webpack_require__(121);

var _bisection2 = _interopRequireDefault(_bisection);

var _profileData = __webpack_require__(19);

var _flow = __webpack_require__(124);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return the library object that contains the address such that
 * rv.start <= address < rv.end, or null if no such lib object exists.
 */
function getContainingLibrary(libs, address) {
  if (isNaN(address)) {
    return null;
  }

  var left = 0;
  var right = libs.length - 1;
  while (left <= right) {
    var mid = (left + right) / 2 | 0;
    if (address >= libs[mid].end) {
      left = mid + 1;
    } else if (address < libs[mid].start) {
      right = mid - 1;
    } else {
      return libs[mid];
    }
  }
  return null;
}

/**
 * Given a memory address, find the nearest library.
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


function getClosestLibrary(libs, address) {
  if (isNaN(address)) {
    return null;
  }

  var startAddresses = libs.map(function (lib) {
    return lib.start;
  });
  var libIndex = _bisection2.default.right(startAddresses, address, 0) - 1;
  if (libIndex < 0) {
    return null;
  }
  return libs[libIndex];
}

/**
 * Find the functions in this thread's funcTable that we need symbols for. The map
 * that is returned is keyed off the Lib objects, and has a list of IndexIntoFuncTable
 * for the still unsymbolicated functions.
 */
function gatherFuncsInThread(thread) {
  var libs = thread.libs,
      funcTable = thread.funcTable,
      stringTable = thread.stringTable,
      resourceTable = thread.resourceTable;

  var foundAddresses = new Map();
  for (var funcIndex = 0; funcIndex < funcTable.length; funcIndex++) {
    var resourceIndex = funcTable.resource[funcIndex];
    if (resourceIndex === -1) {
      continue;
    }
    var resourceType = resourceTable.type[resourceIndex];
    if (resourceType !== _profileData.resourceTypes.library) {
      continue;
    }

    var name = stringTable.getString(funcTable.name[funcIndex]);
    if (!name.startsWith('0x')) {
      // Somebody already symbolicated this function for us.
      continue;
    }

    var libIndex = resourceTable.lib[resourceIndex];
    if (libIndex === null || libIndex === undefined) {
      throw new Error('libIndex must be a valid index.');
    }
    var lib = libs[libIndex];
    if (lib === undefined) {
      throw new Error('Did not find a lib.');
    }
    var libFuncs = foundAddresses.get(lib);
    if (libFuncs === undefined) {
      libFuncs = [];
      foundAddresses.set(lib, libFuncs);
    }
    libFuncs.push(funcIndex);
  }
  return foundAddresses;
}

/**
 * Using the provided func address table, find out which funcs are actually the
 * same function, and make a list of the real func addresses that we need
 * symbols for.
 *
 * Before we had the func address table for this library, we weren't able to
 * tell whether two frames are the same function, so we naively created one
 * function per frame, giving each function the address of the frame.
 * Now that we know at which address each function truly starts, we can find
 * out which of the naively-created funcs are the same function and collapse
 * those into just one func. This information is returned in the
 * oldFuncToNewFuncMap.
 *
 * Before we can request symbols, we need to make a list of func addresses for
 * the symbols we need. These addresses need to be the true function start
 * addresses from the func address table. This information is returned in the
 * return value - the return value is a map whose keys are the true func
 * addresses that we need symbols for. The value of each map entry is the
 * funcIndex for the func that has become the "one true func" for this function.
 */
function findFunctionsToMergeAndSymbolicationAddresses(funcAddressTable, funcsToSymbolicate, funcTable) {
  var oldFuncToNewFuncMap = new Map();
  var funcAddrIndices = [];
  var funcIndices = [];

  // Sort funcsToSymbolicate by address.
  funcsToSymbolicate.sort(function (i1, i2) {
    var address1 = funcTable.address[i1];
    var address2 = funcTable.address[i2];
    if (address1 === address2) {
      // Two funcs had the same address? This shouldn't happen.
      return i1 - i2;
    }
    return address1 - address2;
  });

  var lastFuncIndex = -1;
  var nextFuncAddress = 0;
  var nextFuncAddressIndex = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = funcsToSymbolicate[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var funcIndex = _step.value;

      var funcAddress = funcTable.address[funcIndex];
      if (funcAddress < nextFuncAddress) {
        // The address of the func at funcIndex is still inside the
        // lastFuncIndex func. So those are actually the same function.
        // Collapse them into each other.
        oldFuncToNewFuncMap.set(funcIndex, lastFuncIndex);
        continue;
      }

      // Now funcAddress >= nextFuncAddress.
      // Find the index in funcAddressTable of the function that funcAddress is
      // inside of.
      var funcAddressIndex = _bisection2.default.right(funcAddressTable, funcAddress, nextFuncAddressIndex) - 1;
      if (funcAddressIndex >= 0) {
        // TODO: Take realFuncAddress and put it into the func table.
        // const realFuncAddress = funcAddressTable[funcAddressIndex];
        nextFuncAddressIndex = funcAddressIndex + 1;
        nextFuncAddress = nextFuncAddressIndex < funcAddressTable.length ? funcAddressTable[nextFuncAddressIndex] : Infinity;
        lastFuncIndex = funcIndex;
        funcAddrIndices.push(funcAddressIndex);
        funcIndices.push(funcIndex);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return { funcAddrIndices: funcAddrIndices, funcIndices: funcIndices, oldFuncToNewFuncMap: oldFuncToNewFuncMap };
}

/**
 * Modify the symbolicated funcs to point to the new func name strings.
 * This function adds the func names to the thread's string table and
 * adjusts the funcTable to point to those strings.
 */
function setFuncNames(thread, funcIndices, funcNames) {
  var funcTable = Object.assign({}, thread.funcTable);
  funcTable.name = funcTable.name.slice();
  var stringTable = thread.stringTable;
  funcIndices.forEach(function (funcIndex, i) {
    var symbolName = funcNames[i];
    var symbolIndex = stringTable.indexForString(symbolName);
    funcTable.name[funcIndex] = symbolIndex;
  });
  return Object.assign({}, thread, { funcTable: funcTable, stringTable: stringTable });
}

/**
 * Correctly collapse a function into another function and return a consistent
 * profile that no longer refers to the collapsed-away function.
 * The new frameTable has an updated func column, where all indices
 * to old funcs have been replaced to the corresponding new func.
 * "Functions" in a profile are created before the library's function table is
 * known, by creating one function per frame address. Once the function table
 * is known, different addresses that are inside the same function need to be
 * merged into that same function.
 */
function applyFunctionMerging(thread, oldFuncToNewFuncMap) {
  var frameTable = Object.assign({}, thread.frameTable, {
    func: thread.frameTable.func.map(function (oldFunc) {
      var newFunc = oldFuncToNewFuncMap.get(oldFunc);
      return newFunc === undefined ? oldFunc : newFunc;
    })
  });
  return Object.assign({}, thread, { frameTable: frameTable });
}function classNameFromSymbolName(symbolName) {
  var className = symbolName;

  var vtablePrefix = 'vtable for ';
  if (className.startsWith(vtablePrefix)) {
    className = className.substring(vtablePrefix.length);
  }

  var sourceEventMarkerPos = className.indexOf('SourceEventType)::CreateSourceEvent');
  if (sourceEventMarkerPos !== -1) {
    return className.substring(sourceEventMarkerPos + 'SourceEventType)::Create'.length);
  }

  var runnableFunctionMarker = 'mozilla::detail::RunnableFunction<';
  if (className.startsWith(runnableFunctionMarker)) {
    var parenPos = className.indexOf('(', runnableFunctionMarker.length + 1);
    var functionName = className.substring(runnableFunctionMarker.length, parenPos);
    return 'RunnableFunction(' + functionName + ')';
  }

  var runnableMethodMarker = 'mozilla::detail::RunnableMethodImpl<';
  if (className.startsWith(runnableMethodMarker)) {
    var _parenPos = className.indexOf('(', runnableMethodMarker.length);
    var endPos = className.indexOf('::*)', _parenPos + 1);
    className = className.substring(_parenPos + 1, endPos);
    return 'RunnableMethod(' + className + ')';
  }

  return className;
}

function setTaskTracerNames(tasktracer, addressIndices, symbolNames) {
  var stringTable = tasktracer.stringTable,
      addressTable = tasktracer.addressTable;

  var className = addressTable.className.slice();
  for (var i = 0; i < addressIndices.length; i++) {
    var addressIndex = addressIndices[i];
    var classNameString = classNameFromSymbolName(symbolNames[i]);
    className[addressIndex] = stringTable.indexForString(classNameString);
  }
  return (0, _flow.immutableUpdate)(tasktracer, {
    addressTable: (0, _flow.immutableUpdate)(tasktracer.addressTable, { className: className })
  });
}

/**
 * When collecting profile samples, the profiler only collects raw memory addresses
 * of the program's functions. This function takes the list of memory addresses, and
 * uses a symbol store to look up the symbols (names) of all of the functions. Initially
 * each memory address is a assigned a function in the profile, but these addresses may
 * actually point to the same function. During the processes of symbolication, any memory
 * addresses that share the same function have their FrameTable and FuncTable updated
 * to point to same function.
 */
function symbolicateProfile(profile, symbolStore, symbolicationHandlers) {
  var symbolicationPromises = profile.threads.map(function (thread, threadIndex) {
    return symbolicateThread(thread, threadIndex, symbolStore, symbolicationHandlers);
  });
  if ('tasktracer' in profile) {
    symbolicationPromises.push(symbolicateTaskTracer(profile.tasktracer, symbolStore, symbolicationHandlers));
  }
  return Promise.all(symbolicationPromises).then(function () {
    return undefined;
  });
}

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Calculates the index of the Array where item X should be placed, assuming the Array is sorted.
 *
 * @param {Array} array The array containing the items.
 * @param {Number} x The item that needs to be added to the array.
 * @param {Number} low Inital Index that is used to start searching, optional.
 * @param {Number} high The maximum Index that is used to stop searching, optional.
 * @returns {Number} the index where item X should be placed
 */
function bisection(array, x, low, high){
  // The low and high bounds the inital slice of the array that needs to be searched
  // this is optional
  low = low || 0;
  high = high || array.length;

  var mid;

  while (low < high) {
    mid = (low + high) >> 1;

    if (x < array[mid]) {
      high = mid;
    } else {
      low = mid + 1;
    }
  }

  return low;
}

/**
 * A right bisection is default, so just reference the same function
 */
bisection.right = bisection;

/**
 * Calculates the index of the Array where item X should be placed, assuming the Array is sorted.
 * @param {Array} array The array containing the items.
 * @param {number} x The item that needs to be added to the array.
 * @param {number} low Inital Index that is used to start searching, optional.
 * @param {number} high The maximum Index that is used to stop searching, optional.
 * @return {number} the index where item X should be placed
 */
bisection.left = function left( array, x, low , high ){
  // The low and high bounds the inital slice of the array that needs to be searched
  // this is optional
  low = low || 0;
  high = high || array.length;

  var mid;

  while (low < high) {
    mid = (low + high) >> 1;

    if (x < array[mid]) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }

  return low;
};

/**
 * Library version
 */
bisection.version = '0.0.3';

module.exports = bisection;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CURRENT_VERSION = undefined;

var _defineProperty2 = __webpack_require__(53);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _upgraders2; /* This Source Code Form is subject to the terms of the Mozilla Public
                  * License, v. 2.0. If a copy of the MPL was not distributed with this
                  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This file deals with old versions of the Gecko profile format, i.e. the
 * format that the Gecko profiler platform outputs. We want to be able to
 * run perf.html on non-Nightly versions of Firefox, and we want to be able
 * to load old saved profiles, so this file upgrades old profiles to the
 * current format.
*/

exports.upgradeGeckoProfileToCurrentVersion = upgradeGeckoProfileToCurrentVersion;

var _convertMarkers = __webpack_require__(123);

var _uniqueStringArray = __webpack_require__(54);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CURRENT_VERSION = exports.CURRENT_VERSION = 9; // The current version of the Gecko profile format.

// Gecko profiles before version 1 did not have a profile.meta.version field.
// Treat those as version zero.
var UNANNOTATED_VERSION = 0;

/**
 * Upgrades the supplied profile to the current version, by mutating |profile|.
 * Throws an exception if the profile is too new.
 * @param {object} profile The profile in the "Gecko profile" format.
 */
function upgradeGeckoProfileToCurrentVersion(profile) {
  var profileVersion = profile.meta.version || UNANNOTATED_VERSION;
  if (profileVersion === CURRENT_VERSION) {
    return;
  }

  if (profileVersion > CURRENT_VERSION) {
    throw new Error('Unable to parse a Gecko profile of version ' + profileVersion + ' - are you running an outdated version of perf.html? ' + ('The most recent version understood by this version of perf.html is version ' + CURRENT_VERSION + '.\n') + 'You can try refreshing this page in case perf.html has updated in the meantime.');
  }

  // Convert to CURRENT_VERSION, one step at a time.
  for (var destVersion = profileVersion + 1; destVersion <= CURRENT_VERSION; destVersion++) {
    if (destVersion in _upgraders) {
      _upgraders[destVersion](profile);
    }
  }

  profile.meta.version = CURRENT_VERSION;
}

function _archFromAbi(abi) {
  if (abi === 'x86_64-gcc3') {
    return 'x86_64';
  }
  return abi;
}

// _upgraders[i] converts from version i - 1 to version i.
// Every "upgrader" takes the profile as its single argument and mutates it.
/* eslint-disable no-useless-computed-key */
var _upgraders = (_upgraders2 = {}, (0, _defineProperty3.default)(_upgraders2, 1, function _() {
  throw new Error('Gecko profiles without version numbers are very old and no conversion code has been written for that version of the profile format.');
}), (0, _defineProperty3.default)(_upgraders2, 2, function _() {
  throw new Error('Gecko profile version 1 is very old and no conversion code has been written for that version of the profile format.');
}), (0, _defineProperty3.default)(_upgraders2, 3, function _() {
  throw new Error('Gecko profile version 2 is very old and no conversion code has been written for that version of the profile format.');
}), (0, _defineProperty3.default)(_upgraders2, 4, function _(profile) {
  function convertToVersionFourRecursive(p) {
    // In version < 3, p.libs was a JSON string.
    // Starting with version 4, libs is an actual array, each lib has
    // "debugName", "debugPath", "breakpadId" and "path" fields, and the
    // array is sorted by start address.
    p.libs = JSON.parse(p.libs).map(function (lib) {
      if ('breakpadId' in lib) {
        lib.debugName = lib.name.substr(lib.name.lastIndexOf('/') + 1);
        lib.breakpadId = lib.breakpadId;
      } else {
        lib.debugName = lib.pdbName;
        var pdbSig = lib.pdbSignature.replace(/[{}-]/g, '').toUpperCase();
        lib.breakpadId = pdbSig + lib.pdbAge;
      }
      delete lib.pdbName;
      delete lib.pdbAge;
      delete lib.pdbSignature;
      lib.path = lib.name;
      lib.name = lib.debugName.endsWith('.pdb') ? lib.debugName.substr(0, lib.debugName.length - 4) : lib.debugName;
      lib.arch = _archFromAbi(p.meta.abi);
      lib.debugPath = '';
      return lib;
    }).sort(function (a, b) {
      return a.start - b.start;
    });

    for (var threadIndex = 0; threadIndex < p.threads.length; threadIndex++) {
      if (typeof p.threads[threadIndex] === 'string') {
        // Also do the modification to embedded subprocess profiles.
        var subprocessProfile = JSON.parse(p.threads[threadIndex]);
        convertToVersionFourRecursive(subprocessProfile);
        p.threads[threadIndex] = JSON.stringify(subprocessProfile);
      } else {
        // At the beginning of format version 3, the thread name for any
        // threads in a "tab" process was "Content", and the processType
        // field did not exist. When this was changed, the version was not
        // updated, so we handle both cases here.
        var thread = p.threads[threadIndex];
        if (!('processType' in thread)) {
          if (thread.name === 'Content') {
            thread.processType = 'tab';
            thread.name = 'GeckoMain';
          } else if (thread.name === 'Plugin') {
            thread.processType = 'plugin';
          } else {
            thread.processType = 'default';
          }
        }
      }
    }

    p.meta.version = 4;
  }
  convertToVersionFourRecursive(profile);
}), (0, _defineProperty3.default)(_upgraders2, 5, function _(profile) {
  // In version 4, profiles from other processes were embedded as JSON
  // strings in the threads array. Version 5 breaks those out into a
  // separate "processes" array and no longer stringifies them.
  function convertToVersionFiveRecursive(p) {
    var allThreadsAndProcesses = p.threads.map(function (threadOrProcess) {
      if (typeof threadOrProcess === 'string') {
        var processProfile = JSON.parse(threadOrProcess);
        convertToVersionFiveRecursive(processProfile);
        return {
          type: 'process',
          data: processProfile
        };
      }
      return {
        type: 'thread',
        data: threadOrProcess
      };
    });
    p.processes = allThreadsAndProcesses.filter(function (x) {
      return x.type === 'process';
    }).map(function (p) {
      return p.data;
    });
    p.threads = allThreadsAndProcesses.filter(function (x) {
      return x.type === 'thread';
    }).map(function (t) {
      return t.data;
    });
    p.meta.version = 5;
  }
  convertToVersionFiveRecursive(profile);
}), (0, _defineProperty3.default)(_upgraders2, 6, function _(profile) {
  // The frameNumber column was removed from the samples table.
  function convertToVersionSixRecursive(p) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = p.threads[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var thread = _step.value;

        delete thread.samples.schema.frameNumber;
        for (var sampleIndex = 0; sampleIndex < thread.samples.data.length; sampleIndex++) {
          // Truncate the array to a maximum length of 5.
          // The frameNumber used to be the last item, at index 5.
          thread.samples.data[sampleIndex].splice(5);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = p.processes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var subprocessProfile = _step2.value;

        convertToVersionSixRecursive(subprocessProfile);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
  convertToVersionSixRecursive(profile);
}), (0, _defineProperty3.default)(_upgraders2, 7, function _(profile) {
  // The type field for DOMEventMarkerPayload was renamed to eventType.
  function convertToVersionSevenRecursive(p) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = p.threads[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var thread = _step3.value;

        var stringTable = new _uniqueStringArray.UniqueStringArray(thread.stringTable);
        var nameIndex = thread.markers.schema.name;
        var dataIndex = thread.markers.schema.data;
        for (var i = 0; i < thread.markers.data.length; i++) {
          var name = stringTable.getString(thread.markers.data[i][nameIndex]);
          if (name === 'DOMEvent') {
            var data = thread.markers.data[i][dataIndex];
            data.eventType = data.type;
            data.type = 'DOMEvent';
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = p.processes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var subprocessProfile = _step4.value;

        convertToVersionSevenRecursive(subprocessProfile);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  }
  convertToVersionSevenRecursive(profile);
}), (0, _defineProperty3.default)(_upgraders2, 8, function _(profile) {
  // Profiles have the following new attributes:
  //  - meta.shutdownTime: null if the process is still running, otherwise
  //    the shutdown time of the process in milliseconds relative to
  //    meta.startTime
  //  - pausedRanges: an array of
  //    { startTime: number | null, endTime: number | null, reason: string }
  // Each thread has the following new attributes:
  //  - registerTime: The time this thread was registered with the profiler,
  //    in milliseconds since meta.startTime
  //  - unregisterTime: The time this thread was unregistered from the
  //    profiler, in milliseconds since meta.startTime, or null
  function convertToVersionEightRecursive(p) {
    // We can't invent missing data, so just initialize everything with some
    // kind of empty value.

    // "The profiler was never paused during the recorded range, and we never
    // collected a profile."
    p.pausedRanges = [];

    // "All processes were still alive by the time the profile was captured."
    p.meta.shutdownTime = null;

    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = p.threads[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var thread = _step5.value;

        // "All threads were registered instantly at process startup."
        thread.registerTime = 0;

        // "All threads were still alive by the time the profile was captured."
        thread.unregisterTime = null;
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = p.processes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var subprocessProfile = _step6.value;

        convertToVersionEightRecursive(subprocessProfile);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  }
  convertToVersionEightRecursive(profile);
}), (0, _defineProperty3.default)(_upgraders2, 9, function _(profile) {
  function convertToVersionNineRecursive(p) {
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = p.threads[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var thread = _step7.value;

        //const stringTable = new UniqueStringArray(thread.stringTable);
        //const nameIndex = thread.markers.schema.name;
        var dataIndex = thread.markers.schema.data;
        for (var i = 0; i < thread.markers.data.length; i++) {
          var marker = thread.markers.data[i][dataIndex];
          if (marker) {
            switch (marker.type) {
              case 'GCMinor':
                marker = (0, _convertMarkers.upgradeGCMinorMarker)(marker);
                break;
              case 'GCMajor':
                marker = (0, _convertMarkers.upgradeGCMajorMarker_Gecko8To9)(marker);
                break;
              default:
                break;
            }
            thread.markers.data[i][dataIndex] = marker;
          }
        }
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
      for (var _iterator8 = p.processes[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
        var subprocessProfile = _step8.value;

        convertToVersionNineRecursive(subprocessProfile);
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8.return) {
          _iterator8.return();
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }
  }
  convertToVersionNineRecursive(profile);
}), _upgraders2);
/* eslint-enable no-useless-computed-key */

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upgradeGCMinorMarker = upgradeGCMinorMarker;
exports.convertPhaseTimes = convertPhaseTimes;
exports.upgradeGCMajorMarker_Gecko8To9 = upgradeGCMajorMarker_Gecko8To9;
exports.upgradeGCMajorMarker_Processed8to9 = upgradeGCMajorMarker_Processed8to9;
function upgradeGCMinorMarker(marker8) {
  if ('nursery' in marker8) {
    if ('status' in marker8.nursery) {
      if (marker8.nursery.status === 'no collection') {
        marker8.nursery.status = 'nursery empty';
      }
      return Object.assign(marker8);
    } else {
      /*
       * This is the old format for GCMinor, rename some
       * properties to the more sensible names in the newer
       * format and set the status.
       *
       * Note that we don't delete certain properties such as
       * promotion_rate, leave them so that anyone opening the
       * raw json data can still see them in converted profiles.
       */
      var marker = Object.assign(marker8, {
        nursery: Object.assign(marker8.nursery, {
          status: 'complete',
          bytes_used: marker8.nursery.nursery_bytes,
          // cur_capacity cannot be filled in.
          new_capacity: marker8.nursery.new_nursery_bytes,
          phase_times: marker8.nursery.timings
        })
      });
      delete marker.nursery.nursery_bytes;
      delete marker.nursery.new_nursery_bytes;
      delete marker.nursery.timings;
      return marker;
    }
  } else {
    return marker8;
  }
}

/*
 * Fix the units for GCMajor and GCSlice phase times.
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function convertPhaseTimes(old_phases) {
  var phases = {};
  for (var phase in old_phases) {
    phases[phase] = old_phases[phase] * 1000;
  }
  return phases;
}

/*
 * Upgrade a GCMajor marker in the Gecko profile format.
 */
function upgradeGCMajorMarker_Gecko8To9(marker) {
  if ('timings' in marker) {
    if (!('status' in marker.timings)) {
      /*
       * This is the old version of the GCMajor marker.
       */

      var timings = marker.timings;

      timings.status = 'completed';

      /*
       * The old version had a bug where the slices field could be included
       * twice with different meanings.  So we attempt to read it as either
       * the number of slices or a list of slices.
       */
      if (Array.isArray(timings.sices)) {
        timings.slices_list = timings.slices;
        timings.slices = timings.slices.length;
      }

      timings.allocated_bytes = timings.allocated * 1024 * 1024;
    }
  }

  return marker;
}

function upgradeGCMajorMarker_Processed8to9(marker8) {
  // The Processed 8-to-9 upgrade is a superset of the gecko 8-to-9 upgrade.
  var marker9 = upgradeGCMajorMarker_Gecko8To9(marker8);
  var mt = marker9.timings;
  switch (mt.status) {
    case 'completed':
      {
        var timings = Object.assign({}, mt, {
          phase_times: convertPhaseTimes(mt.totals),
          mmu_20ms: mt.mmu_20ms / 100,
          mmu_50ms: mt.mmu_50ms / 100
        });
        return {
          type: 'GCMajor',
          startTime: marker9.startTime,
          endTime: marker9.endTime,
          timings: timings
        };
      }
    case 'aborted':
      {
        return {
          type: 'GCMajor',
          startTime: marker9.startTime,
          endTime: marker9.endTime,
          timings: { status: 'aborted' }
        };
      }
    default:
      console.log('Unknown GCMajor status');
      throw new Error('Unknown GCMajor status');
  }
}

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.unexpectedCase = unexpectedCase;
exports.immutableUpdate = immutableUpdate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


/**
 * This file contains utils that help Flow understand things better. Occasionally
 * statements can be logically equivalent, but Flow infers them in a specific way. Most
 * of the time tweaks can be done by editing the type system, but occasionally functions
 * are needed to get the desired result.
 */

/**
 * This function can be run as the default arm of a switch statement to ensure exhaustive
 * checking of a given type. It relies on an assumption that a given case will not be
 * the string 'Error: non exhaustive switch found.' This assumption generates more
 * readable errors. Flow will only generate an error if it's possible to get there
 * within the type system.
 */
function unexpectedCase(notValid) {
  throw new Error("Unexpected case " + notValid);
}

/**
 * Immutably update an object through Object.assign, but retain the original
 * type information of the object. Flow will occasionally throw errors when
 * inferring what is going on with Object.assign.
 */
function immutableUpdate(object) {
  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  return Object.assign.apply(Object, [{}, object].concat((0, _toConsumableArray3.default)(rest)));
}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.defaultMemoize = defaultMemoize;
exports.createSelectorCreator = createSelectorCreator;
exports.createStructuredSelector = createStructuredSelector;
function defaultEqualityCheck(a, b) {
  return a === b;
}

function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }

  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
  var length = prev.length;
  for (var i = 0; i < length; i++) {
    if (!equalityCheck(prev[i], next[i])) {
      return false;
    }
  }

  return true;
}

function defaultMemoize(func) {
  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;

  var lastArgs = null;
  var lastResult = null;
  // we reference arguments instead of spreading them for performance reasons
  return function () {
    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
      // apply arguments instead of spreading for performance.
      lastResult = func.apply(null, arguments);
    }

    lastArgs = arguments;
    return lastResult;
  };
}

function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;

  if (!dependencies.every(function (dep) {
    return typeof dep === 'function';
  })) {
    var dependencyTypes = dependencies.map(function (dep) {
      return typeof dep;
    }).join(', ');
    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));
  }

  return dependencies;
}

function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptions[_key - 1] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }

    var recomputations = 0;
    var resultFunc = funcs.pop();
    var dependencies = getDependencies(funcs);

    var memoizedResultFunc = memoize.apply(undefined, [function () {
      recomputations++;
      // apply arguments instead of spreading for performance.
      return resultFunc.apply(null, arguments);
    }].concat(memoizeOptions));

    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.
    var selector = defaultMemoize(function () {
      var params = [];
      var length = dependencies.length;

      for (var i = 0; i < length; i++) {
        // apply arguments instead of spreading and mutate a local list of params for performance.
        params.push(dependencies[i].apply(null, arguments));
      }

      // apply arguments instead of spreading for performance.
      return memoizedResultFunc.apply(null, params);
    });

    selector.resultFunc = resultFunc;
    selector.recomputations = function () {
      return recomputations;
    };
    selector.resetRecomputations = function () {
      return recomputations = 0;
    };
    return selector;
  };
}

var createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);

function createStructuredSelector(selectors) {
  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;

  if (typeof selectors !== 'object') {
    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));
  }
  var objectKeys = Object.keys(selectors);
  return selectorCreator(objectKeys.map(function (key) {
    return selectors[key];
  }), function () {
    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      values[_key3] = arguments[_key3];
    }

    return values.reduce(function (composition, value, index) {
      composition[objectKeys[index]] = value;
      return composition;
    }, {});
  });
}

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseRangeFilters = parseRangeFilters;
exports.stringifyRangeFilters = stringifyRangeFilters;
exports.getFormattedTimeLength = getFormattedTimeLength;
exports.getRangeFilterLabels = getRangeFilterLabels;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function parseRangeFilters() {
  var stringValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  if (!stringValue) {
    return [];
  }
  return stringValue.split('~').map(function (s) {
    var m = s.match(/(-?[0-9.]+)_(-?[0-9.]+)/);
    if (!m) {
      return { start: 0, end: 1000 };
    }
    return { start: m[1] * 1000, end: m[2] * 1000 };
  });
}

function stringifyRangeFilters() {
  var arrayValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return arrayValue.map(function (_ref) {
    var start = _ref.start,
        end = _ref.end;

    var startStr = (start / 1000).toFixed(4);
    var endStr = (end / 1000).toFixed(4);
    return startStr + '_' + endStr;
  }).join('~');
}

function getFormattedTimeLength(length) {
  if (length >= 10000) {
    return (length / 1000).toFixed(0) + ' sec';
  }
  if (length >= 1000) {
    return (length / 1000).toFixed(1) + ' sec';
  }
  return length.toFixed(0) + ' ms';
}

function getRangeFilterLabels(rangeFilters) {
  var labels = rangeFilters.map(function (range) {
    return getFormattedTimeLength(range.end - range.start);
  });
  labels.unshift('Full Range');
  return labels;
}

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabelingStrategy = exports.getCategoryColorStrategy = exports.getStackChart = undefined;

var _redux = __webpack_require__(44);

var _colorCategories = __webpack_require__(399);

var _labelingStrategies = __webpack_require__(400);

function categoryColorStrategy() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _colorCategories.getCategoryByImplementation;
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_STACK_CHART_COLOR_STRATEGY':
      return action.getCategory;
    default:
      return state;
  }
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


function labelingStrategy() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _labelingStrategies.getFunctionName;
  var action = arguments[1];

  switch (action.type) {
    case 'CHANGE_STACK_CHART_LABELING_STRATEGY':
      return action.getLabel;
    default:
      return state;
  }
}

exports.default = (0, _redux.combineReducers)({ categoryColorStrategy: categoryColorStrategy, labelingStrategy: labelingStrategy });
var getStackChart = exports.getStackChart = function getStackChart(state) {
  return state.stackChart;
};
var getCategoryColorStrategy = exports.getCategoryColorStrategy = function getCategoryColorStrategy(state) {
  return getStackChart(state).categoryColorStrategy;
};
var getLabelingStrategy = exports.getLabelingStrategy = function getLabelingStrategy(state) {
  return getStackChart(state).labelingStrategy;
};

/***/ }),
/* 128 */
/***/ (function(module, exports) {

/* Firefox Colors JS Variables v1.0.4 */

exports.MAGENTA_50 = '#ff1ad9';
exports.MAGENTA_60 = '#ed00b5';
exports.MAGENTA_70 = '#b5007f';
exports.MAGENTA_80 = '#7d004f';
exports.MAGENTA_90 = '#440027';

exports.PURPLE_50 = '#9400ff';
exports.PURPLE_60 = '#8000d7';
exports.PURPLE_70 = '#6200a4';
exports.PURPLE_80 = '#440071';
exports.PURPLE_90 = '#25003e';

exports.BLUE_40 = '#45a1ff';
exports.BLUE_50 = '#0a84ff';
exports.BLUE_60 = '#0060df';
exports.BLUE_70 = '#003eaa';
exports.BLUE_80 = '#002275';
exports.BLUE_90 = '#000f40';

exports.TEAL_50 = '#00feff';
exports.TEAL_60 = '#00c8d7';
exports.TEAL_70 = '#008ea4';
exports.TEAL_80 = '#005a71';
exports.TEAL_90 = '#002d3e';

exports.GREEN_50 = '#30e60b';
exports.GREEN_60 = '#12bc00';
exports.GREEN_70 = '#058b00';
exports.GREEN_80 = '#006504';
exports.GREEN_90 = '#003706';

exports.YELLOW_50 = '#ffe900';
exports.YELLOW_60 = '#d7b600';
exports.YELLOW_70 = '#a47f00';
exports.YELLOW_80 = '#715100';
exports.YELLOW_90 = '#3e2800';

exports.RED_50 = '#ff0039';
exports.RED_60 = '#d70022';
exports.RED_70 = '#a4000f';
exports.RED_80 = '#5a0002';
exports.RED_90 = '#3e0200';

exports.ORANGE_50 = '#ff9400';
exports.ORANGE_60 = '#d76e00';
exports.ORANGE_70 = '#a44900';
exports.ORANGE_80 = '#712b00';
exports.ORANGE_90 = '#3e1300';

exports.GREY_10 = '#f9f9fa';
exports.GREY_20 = '#ededf0';
exports.GREY_30 = '#d7d7db';
exports.GREY_40 = '#b1b1b3';
exports.GREY_50 = '#737373';
exports.GREY_60 = '#4a4a4f';
exports.GREY_70 = '#38383d';
exports.GREY_80 = '#2a2a2e';
exports.GREY_90 = '#0c0c0d';

exports.INK_70 = '#363959';
exports.INK_80 = '#202340';
exports.INK_90 = '#0f1126';



/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _class = function _class(file) {
  (0, _classCallCheck3.default)(this, _class);

  return new window.Worker("/" + file + ".js");
};

exports.default = _class;

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = clamp

function clamp(value, min, max) {
  return min < max
    ? (value < min ? min : value > max ? max : value)
    : (value < max ? max : value > min ? min : value)
}


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HEIGHT = 30; /* This Source Code Form is subject to the terms of the Mozilla Public
                  * License, v. 2.0. If a copy of the MPL was not distributed with this
                  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var STROKE = 3;
var HALF_STROKE = STROKE / 2;

var SummarizeLineGraph = function (_PureComponent) {
  (0, _inherits3.default)(SummarizeLineGraph, _PureComponent);

  function SummarizeLineGraph() {
    (0, _classCallCheck3.default)(this, SummarizeLineGraph);
    return (0, _possibleConstructorReturn3.default)(this, (SummarizeLineGraph.__proto__ || Object.getPrototypeOf(SummarizeLineGraph)).apply(this, arguments));
  }

  (0, _createClass3.default)(SummarizeLineGraph, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var resize = function resize() {
        return _this2.updateWidth();
      };
      window.addEventListener('resize', resize);
      this.setState({ resize: resize });
      this.updateWidth();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.state.resize);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.updateWidth(props);
    }
  }, {
    key: 'updateWidth',
    value: function updateWidth() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      if (!props.rollingSummary) {
        return;
      }
      var rollingSummary = props.rollingSummary,
          category = props.category;

      var width = this.el.offsetWidth;
      var height = HEIGHT - STROKE;

      // Map the summary data to points inside the SVG, adjust the positioning so the
      // stroke does not fall out of the box at the top and bottom.
      var pointsInSvg = rollingSummary.map(function (_ref, i) {
        var percentage = _ref.percentage;
        return [width * (i / (rollingSummary.length - 1)), HALF_STROKE + height * (1 - (percentage[category] || 0))];
      });

      // Filter out any summaries that have 0 samples.
      var points = pointsInSvg.filter(function (points, i) {
        var samples = rollingSummary[i].samples;

        for (var key in samples) {
          if (samples.hasOwnProperty(key)) {
            if (samples[key] > 0) {
              return true;
            }
          }
        }
        return false;
      });

      // Gradients are set by the bounding box, so draw a line from the top of the box
      // to the bottom to make sure the gradient is applied correctly to the line.
      var initialLine = moveTo(-10, 0) + lineTo(-10, HEIGHT);

      // Reduce the points into a single "d" attribute for an SVG path.
      // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d
      var dAttribute = points.reduce(function (text, _ref2, i) {
        var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
            x = _ref3[0],
            y = _ref3[1];

        var draw = i === 0 ? moveTo : lineTo;
        return text + draw(round(x), round(y));
      }, initialLine);

      this.setState({ width: width, dAttribute: dAttribute });
    }
  }, {
    key: 'renderGradient',
    value: function renderGradient() {
      return this.props.category === 'idle' ? _react2.default.createElement(
        'linearGradient',
        {
          id: 'summarize-line-graph-gradient-idle',
          x1: '0%',
          y1: '0%',
          x2: '0%',
          y2: '100%'
        },
        _react2.default.createElement('stop', { offset: '0%', stopColor: 'rgba(200, 249, 131, 0)' }),
        _react2.default.createElement('stop', { offset: '50%', stopColor: '#c8f983' }),
        _react2.default.createElement('stop', { offset: '75%', stopColor: '#56b300' }),
        _react2.default.createElement('stop', { offset: '100%', stopColor: '#e11800' })
      ) : _react2.default.createElement(
        'linearGradient',
        {
          id: 'summarize-line-graph-gradient',
          x1: '0%',
          y1: '0%',
          x2: '0%',
          y2: '100%'
        },
        _react2.default.createElement('stop', { offset: '10%', stopColor: '#e11800' /* Red */ }),
        _react2.default.createElement('stop', { offset: '60%', stopColor: '#56b300' /* Dark Green */ }),
        _react2.default.createElement('stop', { offset: '85%', stopColor: '#c8f983' /* Light Green */ }),
        _react2.default.createElement('stop', {
          offset: '95%',
          stopColor: 'rgba(200, 249, 131, 0)' /* Transparent */
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        {
          className: 'summarize-line-graph',
          ref: function ref(el) {
            _this3.el = el;
          }
        },
        this.state && this.props && this.props.rollingSummary ? _react2.default.createElement(
          'svg',
          {
            style: { width: this.state.width + 'px', height: HEIGHT + 'px' },
            width: this.state.width,
            height: HEIGHT
          },
          _react2.default.createElement(
            'defs',
            null,
            this.renderGradient()
          ),
          _react2.default.createElement('path', {
            d: this.state.dAttribute,
            stroke: this.props.category === 'idle' ? 'url(#summarize-line-graph-gradient-idle)' : 'url(#summarize-line-graph-gradient)',
            strokeWidth: STROKE,
            fill: 'none'
          })
        ) : _react2.default.createElement('div', {
          style: { height: HEIGHT + 'px' },
          className: (this.props.isBlank ? '' : 'filler') + ' summarize-line-graph-filler'
        })
      );
    }
  }]);
  return SummarizeLineGraph;
}(_react.PureComponent);

SummarizeLineGraph.propTypes = {
  rollingSummary: _react.PropTypes.array,
  category: _react.PropTypes.string,
  isBlank: _react.PropTypes.bool
};

exports.default = SummarizeLineGraph;


function round(n) {
  return Math.round(n * 1000) / 1000;
}

function moveTo(x, y) {
  return 'M' + x + ',' + y;
}

function lineTo(x, y) {
  return 'L' + x + ',' + y;
}

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIconsWithClassNames = exports.getIconClassNameForNode = exports.getIconForNode = exports.getIcons = undefined;

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _reselect = __webpack_require__(125);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function classNameFromUrl(url) {
  return url.replace(/[/:.+>< ~()#,]/g, '_');
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function favicons() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();
  var action = arguments[1];

  switch (action.type) {
    case 'ICON_HAS_LOADED':
      return new Set([].concat((0, _toConsumableArray3.default)(state), [action.icon]));
    case 'ICON_IN_ERROR': // nothing to do
    default:
      return state;
  }
}

var iconsStateReducer = favicons;
exports.default = iconsStateReducer;
var getIcons = exports.getIcons = function getIcons(state) {
  return state.icons;
};

var getIconForNode = exports.getIconForNode = function getIconForNode(state, node) {
  // Without an intermediary variable, flow doesn't seem to be able to refine
  // node.icon type from `string | null` to `string`.
  // See https://github.com/facebook/flow/issues/3715
  var icons = getIcons(state);
  return node.icon !== null && icons.has(node.icon) ? node.icon : null;
};

var getIconClassNameForNode = exports.getIconClassNameForNode = (0, _reselect.createSelector)(getIcons, function (state, node) {
  return node;
}, function (icons, node) {
  return node.icon !== null && icons.has(node.icon) ? classNameFromUrl(node.icon) : null;
});

var getIconsWithClassNames = exports.getIconsWithClassNames = (0, _reselect.createSelector)(getIcons, function (icons) {
  return [].concat((0, _toConsumableArray3.default)(icons)).map(function (icon) {
    return { icon: icon, className: classNameFromUrl(icon) };
  });
});

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

__webpack_require__(432);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IdleSearchField = function (_PureComponent) {
  (0, _inherits3.default)(IdleSearchField, _PureComponent);

  function IdleSearchField(props) {
    (0, _classCallCheck3.default)(this, IdleSearchField);

    var _this = (0, _possibleConstructorReturn3.default)(this, (IdleSearchField.__proto__ || Object.getPrototypeOf(IdleSearchField)).call(this, props));

    _this._onSearchFieldChange = _this._onSearchFieldChange.bind(_this);
    _this._onSearchFieldFocus = _this._onSearchFieldFocus.bind(_this);
    _this._onClearButtonClick = _this._onClearButtonClick.bind(_this);
    _this._onTimeout = _this._onTimeout.bind(_this);
    _this._timeout = 0;
    _this.state = {
      value: props.defaultValue || ''
    };
    _this._previouslyNotifiedValue = _this.state.value;
    return _this;
  }

  (0, _createClass3.default)(IdleSearchField, [{
    key: '_onSearchFieldFocus',
    value: function _onSearchFieldFocus(e) {
      e.currentTarget.select();
    }
  }, {
    key: '_onSearchFieldChange',
    value: function _onSearchFieldChange(e) {
      this.setState({
        value: e.currentTarget.value
      });

      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      this._timeout = setTimeout(this._onTimeout, this.props.idlePeriod);
    }
  }, {
    key: '_onTimeout',
    value: function _onTimeout() {
      this._timeout = 0;
      this._notifyIfChanged(this.state.value);
    }
  }, {
    key: '_notifyIfChanged',
    value: function _notifyIfChanged(value) {
      if (value !== this._previouslyNotifiedValue) {
        this._previouslyNotifiedValue = value;
        this.props.onIdleAfterChange(value);
      }
    }
  }, {
    key: '_onClearButtonClick',
    value: function _onClearButtonClick() {
      this.setState({ value: '' });
      this._notifyIfChanged('');
    }
  }, {
    key: '_onClearButtonFocus',
    value: function _onClearButtonFocus(e) {
      // prevent the focus on the clear button
      if (e.relatedTarget) {
        e.relatedTarget.focus();
      } else {
        e.currentTarget.blur();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.defaultValue !== this.props.defaultValue) {
        this._notifyIfChanged(nextProps.defaultValue || '');
        this.setState({
          value: nextProps.defaultValue || ''
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          title = _props.title;

      return _react2.default.createElement(
        'form',
        {
          className: (0, _classnames2.default)('idleSearchField', className),
          onSubmit: function onSubmit(e) {
            return e.preventDefault();
          }
        },
        _react2.default.createElement('input', {
          type: 'search',
          name: 'search',
          className: 'idleSearchFieldInput',
          required: 'required',
          title: title,
          value: this.state.value,
          onChange: this._onSearchFieldChange,
          onFocus: this._onSearchFieldFocus
        }),
        _react2.default.createElement('input', {
          type: 'reset',
          className: 'idleSearchFieldButton',
          onClick: this._onClearButtonClick,
          onFocus: this._onClearButtonFocus
        })
      );
    }
  }]);
  return IdleSearchField;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

IdleSearchField.propTypes = {
  onIdleAfterChange: _react.PropTypes.func.isRequired,
  idlePeriod: _react.PropTypes.number.isRequired,
  defaultValue: _react.PropTypes.string,
  className: _react.PropTypes.string,
  title: _react.PropTypes.string
};

exports.default = IdleSearchField;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatNumber = formatNumber;
exports.formatPercent = formatPercent;
exports.formatBytes = formatBytes;
exports.formatValueTotal = formatValueTotal;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Format a positive float into a string.
 *
 * Try to format the value to 2 significant digits as much as possible but
 * without using scientific notation.  The number of decimal places depends
 * on the value: the closer to zero the value is, the more decimal places
 * are used in the resulting string.
 *
 * For example:
 *
 * formatNumber(123,   ) = "123"
 * formatNumber(12.3,  ) =  "12"
 * formatNumber(1.23,  ) =   "1.2"
 * formatNumber(0.01234) =   "0.012"
 */
function formatNumber(value) {
  var result = void 0;
  if (value >= 10) {
    result = value.toFixed(0);
  } else if (value >= 1) {
    result = value.toFixed(1);
  } else if (value >= 0.1) {
    result = value.toFixed(2);
  } else {
    result = value.toFixed(3);
  }

  return result;
}

function formatPercent(value) {
  return formatNumber(value * 100) + '%';
}

function formatBytes(bytes) {
  if (bytes < 4 * 1024) {
    return formatNumber(bytes) + 'B';
  } else if (bytes < 4 * 1024 * 1024) {
    return formatNumber(bytes / 1024) + 'KB';
  } else if (bytes < 4 * 1024 * 1024 * 1024) {
    return formatNumber(bytes / (1024 * 1024)) + 'MB';
  } else {
    return formatNumber(bytes / (1024 * 1024 * 1024)) + 'GB';
  }
}

/*
 * Format a value and a total to the form "v/t (p%)".  For example this can
 * be used to print "7MB/10MB (70%)"  fornatNum is a function to format the
 * individual numbers and includePercent may be set to false if you do not
 * wish to print the percentage.
 */
function formatValueTotal(a, b) {
  var formatNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : String;
  var includePercent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var value_total = formatNum(a) + ' / ' + formatNum(b);
  var percent = '';
  if (includePercent) {
    percent = ' (' + formatPercent(a / b) + ')';
  }

  return value_total + percent;
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withSize = undefined;

var _extends2 = __webpack_require__(64);

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(67);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a React component and makes 'width' and 'height' available in the
 * wrapped component's props. These props start out at zero and are updated to
 * the component's DOM node's getBoundingClientRect().width/.height after the
 * component has been mounted. They also get updated when the window is
 * resized.
 * Note that the props are *not* updated if the size of the element changes
 * for reasons other than a window resize.
 * @param  {class} Wrapped The class that gets wrapped.
 * @return {class}         The resulting Component class.
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var withSize = exports.withSize = function withSize(Wrapped) {
  return function (_PureComponent) {
    (0, _inherits3.default)(WithSizeWrapper, _PureComponent);

    function WithSizeWrapper(props) {
      (0, _classCallCheck3.default)(this, WithSizeWrapper);

      var _this = (0, _possibleConstructorReturn3.default)(this, (WithSizeWrapper.__proto__ || Object.getPrototypeOf(WithSizeWrapper)).call(this, props));

      _this.state = { width: 0, height: 0 };
      _this._observeSize = _this._observeSize.bind(_this);
      return _this;
    }

    (0, _createClass3.default)(WithSizeWrapper, [{
      key: '_observeSize',
      value: function _observeSize(wrappedComponent) {
        var _this2 = this;

        if (!wrappedComponent) {
          return;
        }
        var container = (0, _reactDom.findDOMNode)(wrappedComponent); // eslint-disable-line react/no-find-dom-node
        this._resizeListener = function () {
          return _this2._updateWidth(container);
        };
        window.addEventListener('resize', this._resizeListener);
        this._updateWidth(container);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        window.removeEventListener('resize', this._resizeListener);
      }
    }, {
      key: '_updateWidth',
      value: function _updateWidth(container) {
        var _container$getBoundin = container.getBoundingClientRect(),
            width = _container$getBoundin.width,
            height = _container$getBoundin.height;

        this.setState({ width: width, height: height });
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Wrapped, (0, _extends3.default)({ ref: this._observeSize }, this.props, this.state));
      }
    }]);
    return WithSizeWrapper;
  }(_react.PureComponent);
};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(524); /* This Source Code Form is subject to the terms of the Mozilla Public
                               * License, v. 2.0. If a copy of the MPL was not distributed with this
                               * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


var FooterLinks = function (_PureComponent) {
  (0, _inherits3.default)(FooterLinks, _PureComponent);

  function FooterLinks() {
    (0, _classCallCheck3.default)(this, FooterLinks);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FooterLinks.__proto__ || Object.getPrototypeOf(FooterLinks)).call(this));

    _this.state = {
      hide: false
    };
    return _this;
  }

  (0, _createClass3.default)(FooterLinks, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (this.state.hide) {
        return null;
      }
      return _react2.default.createElement(
        'div',
        { className: 'appFooterLinks' },
        _react2.default.createElement(
          'button',
          {
            'aria-label': 'Hide links to legal information',
            title: 'Hide links to legal information',
            className: 'appFooterLinksClose',
            onClick: function onClick() {
              return _this2.setState({ hide: true });
            }
          },
          '\u2715'
        ),
        _react2.default.createElement(
          'a',
          {
            className: 'appFooterLinksLink',
            href: 'https://www.mozilla.org/about/legal/terms/mozilla',
            target: '_blank',
            rel: 'noopener noreferrer'
          },
          'Legal'
        ),
        _react2.default.createElement(
          'a',
          {
            className: 'appFooterLinksLink',
            href: 'https://www.mozilla.org/privacy/websites',
            target: '_blank',
            rel: 'noopener noreferrer'
          },
          'Privacy'
        ),
        _react2.default.createElement(
          'a',
          {
            className: 'appFooterLinksLink',
            href: 'https://www.mozilla.org/privacy/websites/#cookies',
            target: '_blank',
            rel: 'noopener noreferrer'
          },
          'Cookies'
        )
      );
    }
  }]);
  return FooterLinks;
}(_react.PureComponent);

exports.default = FooterLinks;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(47),
    _assign = __webpack_require__(8);

var ReactNoopUpdateQueue = __webpack_require__(138);

var canDefineProperty = __webpack_require__(65);
var emptyObject = __webpack_require__(66);
var invariant = __webpack_require__(5);
var lowPriorityWarning = __webpack_require__(83);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (true) {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(6);

function warnNoop(publicInstance, callerName) {
  if (true) {
    var constructor = publicInstance.constructor;
     true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(27);
var ReactComponentTreeHook = __webpack_require__(20);
var ReactElement = __webpack_require__(37);

var checkReactTypeSpec = __webpack_require__(225);

var canDefineProperty = __webpack_require__(65);
var getIteratorFn = __webpack_require__(140);
var warning = __webpack_require__(6);
var lowPriorityWarning = __webpack_require__(83);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

   true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
     true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
         true ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (true) {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = __webpack_require__(143);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(24);
var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

var ReactPropTypesSecret = __webpack_require__(144);
var checkPropTypes = __webpack_require__(229);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
       true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(236);
var ReactHostOperationHistoryHook = __webpack_require__(237);
var ReactComponentTreeHook = __webpack_require__(20);
var ExecutionEnvironment = __webpack_require__(17);

var performanceNow = __webpack_require__(238);
var warning = __webpack_require__(6);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
     true ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
     true ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ?  true ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(17);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(38);

var invariant = __webpack_require__(5);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ?  true ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(13);

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },


  track: function (inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function () {
        return descriptor.get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(17);
var escapeTextContentForBrowser = __webpack_require__(72);
var setInnerHTML = __webpack_require__(71);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(34);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactInstrumentation = __webpack_require__(21);

var quoteAttributeValueForBrowser = __webpack_require__(269);
var warning = __webpack_require__(6);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
   true ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (true) {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (true) {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (true) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (true) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var LinkedValueUtils = __webpack_require__(92);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactUpdates = __webpack_require__(28);

var warning = __webpack_require__(6);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
     true ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
       true ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
       true ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (true) {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
       true ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var ReactCompositeComponent = __webpack_require__(277);
var ReactEmptyComponent = __webpack_require__(163);
var ReactHostComponent = __webpack_require__(164);

var getNextDebugID = __webpack_require__(280);
var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (true) {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ?  true ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ?  true ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (true) {
     true ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (true) {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (true) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var React = __webpack_require__(46);

var invariant = __webpack_require__(5);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ?  true ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ?  true ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactCurrentOwner = __webpack_require__(27);
var REACT_ELEMENT_TYPE = __webpack_require__(281);

var getIteratorFn = __webpack_require__(282);
var invariant = __webpack_require__(5);
var KeyEscapeUtils = __webpack_require__(96);
var warning = __webpack_require__(6);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (true) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (true) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(24);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (true) {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(294);

var containsNode = __webpack_require__(296);
var focusNode = __webpack_require__(156);
var getActiveElement = __webpack_require__(168);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var DOMLazyTree = __webpack_require__(49);
var DOMProperty = __webpack_require__(34);
var React = __webpack_require__(46);
var ReactBrowserEventEmitter = __webpack_require__(73);
var ReactCurrentOwner = __webpack_require__(27);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactDOMContainerInfo = __webpack_require__(311);
var ReactDOMFeatureFlags = __webpack_require__(312);
var ReactFeatureFlags = __webpack_require__(151);
var ReactInstanceMap = __webpack_require__(58);
var ReactInstrumentation = __webpack_require__(21);
var ReactMarkupChecksum = __webpack_require__(313);
var ReactReconciler = __webpack_require__(48);
var ReactUpdateQueue = __webpack_require__(97);
var ReactUpdates = __webpack_require__(28);

var emptyObject = __webpack_require__(66);
var instantiateReactComponent = __webpack_require__(161);
var invariant = __webpack_require__(5);
var setInnerHTML = __webpack_require__(71);
var shouldUpdateReactComponent = __webpack_require__(95);
var warning = __webpack_require__(6);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (true) {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (true) {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (true) {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
     true ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ?  true ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  true ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ?  true ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

     true ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (true) {
       true ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
             true ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
     true ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ?  true ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (true) {
       true ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (true) {
         true ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ?  true ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (true) {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (true) {
           true ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (true) {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(162);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(322), __esModule: true };

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(33) && !__webpack_require__(51)(function(){
  return Object.defineProperty(__webpack_require__(101)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(74)
  , $export        = __webpack_require__(25)
  , redefine       = __webpack_require__(174)
  , hide           = __webpack_require__(39)
  , has            = __webpack_require__(41)
  , Iterators      = __webpack_require__(52)
  , $iterCreate    = __webpack_require__(327)
  , setToStringTag = __webpack_require__(76)
  , getPrototypeOf = __webpack_require__(330)
  , ITERATOR       = __webpack_require__(18)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(39);

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(31)
  , anObject = __webpack_require__(32)
  , getKeys  = __webpack_require__(61);

module.exports = __webpack_require__(33) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(41)
  , toIObject    = __webpack_require__(42)
  , arrayIndexOf = __webpack_require__(328)(false)
  , IE_PROTO     = __webpack_require__(107)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(62);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(22).document && document.documentElement;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(75)('meta')
  , isObject = __webpack_require__(40)
  , has      = __webpack_require__(41)
  , setDesc  = __webpack_require__(31).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(51)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(176)
  , hiddenKeys = __webpack_require__(109).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(78)
  , createDesc     = __webpack_require__(59)
  , toIObject      = __webpack_require__(42)
  , toPrimitive    = __webpack_require__(102)
  , has            = __webpack_require__(41)
  , IE8_DOM_DEFINE = __webpack_require__(172)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(33) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 182 */
/***/ (function(module, exports) {



/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperties = __webpack_require__(362);

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _freeze = __webpack_require__(365);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (strings, raw) {
  return (0, _freeze2.default)((0, _defineProperties2.default)(strings, {
    raw: {
      value: (0, _freeze2.default)(raw)
    }
  }));
};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(32);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(52)
  , ITERATOR   = __webpack_require__(18)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(50)
  , invoke             = __webpack_require__(377)
  , html               = __webpack_require__(178)
  , cel                = __webpack_require__(101)
  , global             = __webpack_require__(22)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(62)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(18)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CURRENT_VERSION = undefined;

var _defineProperty2 = __webpack_require__(53);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _upgraders2; /* This Source Code Form is subject to the terms of the Mozilla Public
                  * License, v. 2.0. If a copy of the MPL was not distributed with this
                  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This file deals with old versions of the "processed" profile format,
 * i.e. the format that perf.html uses internally. Profiles in this format
 * can be saved out to files or uploaded to the profile store server, and we
 * want to be able to display profiles that were saved at any point in the
 * past, regardless of their version. So this file upgrades old profiles to
 * the current format.
 */

exports.isProcessedProfile = isProcessedProfile;
exports.upgradeProcessedProfileToCurrentVersion = upgradeProcessedProfileToCurrentVersion;

var _dataTableUtils = __webpack_require__(389);

var _profileData = __webpack_require__(19);

var _convertMarkers = __webpack_require__(123);

var _uniqueStringArray = __webpack_require__(54);

var _timeCode = __webpack_require__(45);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CURRENT_VERSION = exports.CURRENT_VERSION = 9; // The current version of the "processed" profile format.

// Processed profiles before version 1 did not have a profile.meta.preprocessedProfileVersion
// field. Treat those as version zero.
var UNANNOTATED_VERSION = 0;

function isProcessedProfile(profile) {
  // If this profile has a .meta.preprocessedProfileVersion field,
  // then it is definitely a preprocessed profile.
  if ('meta' in profile && 'preprocessedProfileVersion' in profile.meta) {
    return true;
  }

  // This could also be a pre-version 1 profile.
  return 'threads' in profile && profile.threads.length >= 1 && 'stringArray' in profile.threads[0];
}

/**
 * Upgrades the supplied profile to the current version, by mutating |profile|.
 * Throws an exception if the profile is too new.
 * @param {object} profile The "serialized" form of a processed profile,
 *                         i.e. stringArray instead of stringTable.
 */
function upgradeProcessedProfileToCurrentVersion(profile) {
  var profileVersion = profile.meta.preprocessedProfileVersion || UNANNOTATED_VERSION;
  if (profileVersion === CURRENT_VERSION) {
    return;
  }

  if (profileVersion > CURRENT_VERSION) {
    throw new Error('Unable to parse a processed profile of version ' + profileVersion + ' - are you running an outdated version of perf.html? ' + ('The most recent version understood by this version of perf.html is version ' + CURRENT_VERSION + '.\n') + 'You can try refreshing this page in case perf.html has updated in the meantime.');
  }

  // Convert to CURRENT_VERSION, one step at a time.
  for (var destVersion = profileVersion + 1; destVersion <= CURRENT_VERSION; destVersion++) {
    if (destVersion in _upgraders) {
      _upgraders[destVersion](profile);
    }
  }

  profile.meta.preprocessedProfileVersion = CURRENT_VERSION;
}

function _archFromAbi(abi) {
  if (abi === 'x86_64-gcc3') {
    return 'x86_64';
  }
  return abi;
}

function _getRealScriptURI(url) {
  if (url) {
    var urls = url.split(' -> ');
    return urls[urls.length - 1];
  }
  return url;
}

// _upgraders[i] converts from version i - 1 to version i.
// Every "upgrader" takes the profile as its single argument and mutates it.
/* eslint-disable no-useless-computed-key */
var _upgraders = (_upgraders2 = {}, (0, _defineProperty3.default)(_upgraders2, 1, function _(profile) {
  // Starting with version 1, markers are sorted.
  (0, _timeCode.timeCode)('sorting thread markers', function () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = profile.threads[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var thread = _step.value;

        (0, _dataTableUtils.sortDataTable)(thread.markers, thread.markers.time, function (a, b) {
          return a - b;
        });
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  // And threads have proper names and processType fields.
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = profile.threads[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var thread = _step2.value;

      if (!('processType' in thread)) {
        if (thread.name === 'Content') {
          thread.processType = 'tab';
          thread.name = 'GeckoMain';
        } else if (thread.name === 'Plugin') {
          thread.processType = 'plugin';
        } else {
          thread.processType = 'default';
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 2, function _(profile) {
  // pdbName -> debugName, add arch
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = profile.threads[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var thread = _step3.value;
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = thread.libs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var lib = _step4.value;

          if (!('debugName' in lib)) {
            lib.debugName = lib.pdbName;
            lib.path = lib.name;
            lib.name = lib.debugName.endsWith('.pdb') ? lib.debugName.substr(0, lib.debugName.length - 4) : lib.debugName;
            lib.arch = _archFromAbi(profile.meta.abi);
            delete lib.pdbName;
            delete lib.pdbAge;
            delete lib.pdbSignature;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 3, function _(profile) {
  // Make sure every lib has a debugPath property. We can't infer this
  // value from the other properties on the lib so we just set it to the
  // empty string.
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = profile.threads[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var thread = _step5.value;
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = thread.libs[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var lib = _step6.value;

          lib.debugPath = lib.debugPath || '';
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 4, function _(profile) {
  profile.threads.forEach(function (thread) {
    var funcTable = thread.funcTable,
        stringArray = thread.stringArray,
        resourceTable = thread.resourceTable;

    var stringTable = new _uniqueStringArray.UniqueStringArray(stringArray);

    // resourceTable gains a new field ("host") and a new resourceType:
    // "webhost". Resources from http and https URLs are now grouped by
    // origin (protocol + host) into one webhost resource, instead of being
    // separate per-URL resources.
    // That means that multiple old resources can collapse into one new
    // resource. We need to keep track of such collapsing (using the
    // oldResourceToNewResourceMap) and then execute apply the changes to
    // the resource pointers in the funcTable.
    var newResourceTable = {
      length: 0,
      type: [],
      name: [],
      lib: [],
      icon: [],
      addonId: [],
      host: []
    };
    function addLibResource(name, lib) {
      var index = newResourceTable.length++;
      newResourceTable.type[index] = _profileData.resourceTypes.library;
      newResourceTable.name[index] = name;
      newResourceTable.lib[index] = lib;
    }
    function addWebhostResource(origin, host) {
      var index = newResourceTable.length++;
      newResourceTable.type[index] = _profileData.resourceTypes.webhost;
      newResourceTable.name[index] = origin;
      newResourceTable.host[index] = host;
    }
    function addUrlResource(url) {
      var index = newResourceTable.length++;
      newResourceTable.type[index] = _profileData.resourceTypes.url;
      newResourceTable.name[index] = url;
    }
    var oldResourceToNewResourceMap = new Map();
    var originToResourceIndex = new Map();
    for (var resourceIndex = 0; resourceIndex < resourceTable.length; resourceIndex++) {
      if (resourceTable.type[resourceIndex] === _profileData.resourceTypes.library) {
        oldResourceToNewResourceMap.set(resourceIndex, newResourceTable.length);
        addLibResource(resourceTable.name[resourceIndex], resourceTable.lib[resourceIndex]);
      } else if (resourceTable.type[resourceIndex] === _profileData.resourceTypes.url) {
        var scriptURI = stringTable.getString(resourceTable.name[resourceIndex]);
        var newResourceIndex = null;
        var origin = void 0,
            host = void 0;
        try {
          var url = new URL(scriptURI);
          if (!(url.protocol === 'http:' || url.protocol === 'https:')) {
            throw new Error('not a webhost protocol');
          }
          origin = url.origin;
          host = url.host;
        } catch (e) {
          origin = scriptURI;
          host = null;
        }
        if (originToResourceIndex.has(origin)) {
          newResourceIndex = originToResourceIndex.get(origin);
        } else {
          newResourceIndex = newResourceTable.length;
          originToResourceIndex.set(origin, newResourceIndex);
          var originStringIndex = stringTable.indexForString(origin);
          if (host) {
            var hostIndex = stringTable.indexForString(host);
            addWebhostResource(originStringIndex, hostIndex);
          } else {
            var urlStringIndex = stringTable.indexForString(scriptURI);
            addUrlResource(urlStringIndex);
          }
        }
        oldResourceToNewResourceMap.set(resourceIndex, newResourceIndex);
      }
    }

    // funcTable gains two new fields: fileName and lineNumber. For C++ and
    // pseudo stack funcs, these fields are null. For JS funcs, they contain
    // the URL and the line number of the JS function.
    funcTable.fileName = [];
    funcTable.lineNumber = [];
    for (var funcIndex = 0; funcIndex < funcTable.length; funcIndex++) {
      var oldResourceIndex = funcTable.resource[funcIndex];
      if (oldResourceToNewResourceMap.has(oldResourceIndex)) {
        funcTable.resource[funcIndex] = oldResourceToNewResourceMap.get(oldResourceIndex);
      }
      var fileName = null;
      var lineNumber = null;
      if (funcTable.isJS[funcIndex]) {
        var funcName = stringTable.getString(funcTable.name[funcIndex]);
        var match = /^(.*) \((.*):([0-9]+)\)$/.exec(funcName) || /^()(.*):([0-9]+)$/.exec(funcName);
        if (match) {
          var _scriptURI = _getRealScriptURI(match[2]);
          if (match[1]) {
            funcTable.name[funcIndex] = stringTable.indexForString(match[1]);
          } else {
            funcTable.name[funcIndex] = stringTable.indexForString(_scriptURI);
          }
          fileName = stringTable.indexForString(_scriptURI);
          lineNumber = match[3] | 0;
        }
      }
      funcTable.fileName[funcIndex] = fileName;
      funcTable.lineNumber[funcIndex] = lineNumber;
    }

    thread.resourceTable = newResourceTable;
    thread.stringArray = stringTable.serializeToArray();
  });
}), (0, _defineProperty3.default)(_upgraders2, 5, function _(profile) {
  // The "frameNumber" column was removed from the samples table.
  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = profile.threads[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var thread = _step7.value;

      delete thread.samples.frameNumber;
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7.return) {
        _iterator7.return();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 6, function _(profile) {
  // The type field for DOMEventMarkerPayload was renamed to eventType.
  var _iteratorNormalCompletion8 = true;
  var _didIteratorError8 = false;
  var _iteratorError8 = undefined;

  try {
    for (var _iterator8 = profile.threads[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
      var thread = _step8.value;
      var stringArray = thread.stringArray,
          markers = thread.markers;

      var stringTable = new _uniqueStringArray.UniqueStringArray(stringArray);
      var newDataArray = [];
      for (var i = 0; i < markers.length; i++) {
        var name = stringTable.getString(markers.name[i]);
        var data = markers.data[i];
        if (name === 'DOMEvent') {
          newDataArray[i] = {
            type: 'DOMEvent',
            startTime: data.startTime,
            endTime: data.endTime,
            eventType: data.type,
            phase: data.phase
          };
        } else {
          newDataArray[i] = data;
        }
      }
      thread.markers.data = newDataArray;
    }
  } catch (err) {
    _didIteratorError8 = true;
    _iteratorError8 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion8 && _iterator8.return) {
        _iterator8.return();
      }
    } finally {
      if (_didIteratorError8) {
        throw _iteratorError8;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 7, function _(profile) {
  // Each thread has the following new attributes:
  //  - processShutdownTime: null if the process is still running, otherwise
  //    the shutdown time of the process in milliseconds relative to
  //    meta.startTime
  //  - pausedRanges: an array of
  //    { startTime: number | null, endTime: number | null, reason: string }
  //  - registerTime: The time this thread was registered with the profiler,
  //    in milliseconds since meta.startTime
  //  - unregisterTime: The time this thread was unregistered from the
  //    profiler, in milliseconds since meta.startTime, or null
  // We can't invent missing data, so just initialize everything with some
  // kind of empty value.
  var _iteratorNormalCompletion9 = true;
  var _didIteratorError9 = false;
  var _iteratorError9 = undefined;

  try {
    for (var _iterator9 = profile.threads[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
      var thread = _step9.value;

      // "The profiler was never paused during the recorded range, and we never
      // collected a profile."
      thread.pausedRanges = [];
      // "All processes started at the same time."
      thread.processStartupTime = 0;
      // "All processes were still alive by the time the profile was captured."
      thread.processShutdownTime = null;
      // "All threads were registered instantly at process startup."
      thread.registerTime = 0;
      // "All threads were still alive by the time the profile was captured."
      thread.unregisterTime = null;
    }
  } catch (err) {
    _didIteratorError9 = true;
    _iteratorError9 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion9 && _iterator9.return) {
        _iterator9.return();
      }
    } finally {
      if (_didIteratorError9) {
        throw _iteratorError9;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 8, function _(profile) {
  // DOMEventMarkerPayload.timeStamp in content process should be in
  // milliseconds relative to meta.startTime.  Adjust it by adding
  // the thread.processStartupTime which is the delta to
  // meta.startTime.
  // Only the timeStamp property is updated because it's new and
  // perf.html wasn't updated to handle it when it appeared in
  // Firefox.
  var _iteratorNormalCompletion10 = true;
  var _didIteratorError10 = false;
  var _iteratorError10 = undefined;

  try {
    for (var _iterator10 = profile.threads[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
      var thread = _step10.value;

      if (thread.processType === 'default') {
        continue;
      }
      var stringArray = thread.stringArray,
          markers = thread.markers;

      var stringTable = new _uniqueStringArray.UniqueStringArray(stringArray);
      var newDataArray = [];
      for (var i = 0; i < markers.length; i++) {
        var name = stringTable.getString(markers.name[i]);
        var data = markers.data[i];
        if (name === 'DOMEvent' && data.timeStamp) {
          newDataArray[i] = {
            type: 'DOMEvent',
            startTime: data.startTime,
            endTime: data.endTime,
            timeStamp: data.timeStamp + thread.processStartupTime,
            eventType: data.eventType,
            phase: data.phase
          };
        } else {
          newDataArray[i] = data;
        }
      }
      thread.markers.data = newDataArray;
    }
  } catch (err) {
    _didIteratorError10 = true;
    _iteratorError10 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion10 && _iterator10.return) {
        _iterator10.return();
      }
    } finally {
      if (_didIteratorError10) {
        throw _iteratorError10;
      }
    }
  }
}), (0, _defineProperty3.default)(_upgraders2, 9, function _(profile) {
  // Upgrade the GC markers
  var _iteratorNormalCompletion11 = true;
  var _didIteratorError11 = false;
  var _iteratorError11 = undefined;

  try {
    for (var _iterator11 = profile.threads[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
      var thread = _step11.value;

      for (var i = 0; i < thread.markers.length; i++) {
        var marker = thread.markers.data[i];
        if (marker) {
          switch (marker.type) {
            case 'GCMinor':
              marker = (0, _convertMarkers.upgradeGCMinorMarker)(marker);
              break;
            case 'GCSlice':
              if (marker.timings && marker.timings.times) {
                marker.timings.phase_times = (0, _convertMarkers.convertPhaseTimes)(marker.timings.times);
                delete marker.timings.times;
              }
              break;
            case 'GCMajor':
              marker = (0, _convertMarkers.upgradeGCMajorMarker_Processed8to9)(marker);
              break;
            default:
              break;
          }
          thread.markers.data[i] = marker;
        }
      }
    }
  } catch (err) {
    _didIteratorError11 = true;
    _iteratorError11 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion11 && _iterator11.return) {
        _iterator11.return();
      }
    } finally {
      if (_didIteratorError11) {
        throw _iteratorError11;
      }
    }
  }
}), _upgraders2);
/* eslint-enable no-useless-computed-key */

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.parseTransforms = parseTransforms;
exports.stringifyTransforms = stringifyTransforms;
exports.getTransformLabels = getTransformLabels;
exports.applyTransformToCallNodePath = applyTransformToCallNodePath;
exports.pathsAreEqual = pathsAreEqual;
exports.mergeCallNode = mergeCallNode;
exports.mergeFunction = mergeFunction;
exports.collapseResource = collapseResource;
exports.focusSubtree = focusSubtree;
exports.focusInvertedSubtree = focusInvertedSubtree;
exports.focusFunction = focusFunction;
exports.restoreAllFunctionsInCallNodePath = restoreAllFunctionsInCallNodePath;
exports.filterCallNodePathByImplementation = filterCallNodePathByImplementation;

var _uintarrayEncoding = __webpack_require__(393);

var _profileData = __webpack_require__(19);

var _timeCode = __webpack_require__(45);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file contains the functions and logic for working with and applying transforms
 * to profile data.
 */

/**
 * Map each transform key into a short representation.
 */
var TRANSFORM_TO_SHORT_KEY = {
  'focus-subtree': 'f',
  'focus-function': 'ff',
  'merge-subtree': 'ms',
  'merge-call-node': 'mcn',
  'merge-function': 'mf',
  'collapse-resource': 'cr'
}; /* This Source Code Form is subject to the terms of the Mozilla Public
    * License, v. 2.0. If a copy of the MPL was not distributed with this
    * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


var SHORT_KEY_TO_TRANSFORM = {
  f: 'focus-subtree',
  ff: 'focus-function',
  ms: 'merge-subtree',
  mcn: 'merge-call-node',
  mf: 'merge-function',
  cr: 'collapse-resource'
};

/**
 * Every transform is separated by the "~" character.
 * Each transform is made up of a tuple separated by "-"
 * The first value in the tuple is a short key of the transform type.
 *
 * e.g "f-js-xFFpUMl-i" or "f-cpp-0KV4KV5KV61KV7KV8K"
 */
function parseTransforms() {
  var stringValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  // Flow had some trouble with the `Transform | null` type, so use a forEach
  // rather than a map.
  var transforms = [];

  stringValue.split('~').forEach(function (s) {
    var tuple = s.split('-');
    var shortKey = tuple[0];
    var type = SHORT_KEY_TO_TRANSFORM[shortKey];

    switch (type) {
      case 'collapse-resource':
        {
          // e.g. "cr-js-325-8"
          var _tuple = (0, _slicedToArray3.default)(tuple, 4),
              implementation = _tuple[1],
              resourceIndexRaw = _tuple[2],
              collapsedFuncIndexRaw = _tuple[3];

          var resourceIndex = parseInt(resourceIndexRaw, 10);
          var collapsedFuncIndex = parseInt(collapsedFuncIndexRaw, 10);
          if (isNaN(resourceIndex) || isNaN(collapsedFuncIndex)) {
            break;
          }
          if (resourceIndex >= 0) {
            transforms.push({
              type: type,
              resourceIndex: resourceIndex,
              collapsedFuncIndex: collapsedFuncIndex,
              implementation: (0, _profileData.toValidImplementationFilter)(implementation)
            });
          }

          break;
        }
      case 'merge-function':
      case 'focus-function':
        {
          // e.g. "mf-325"
          var _tuple2 = (0, _slicedToArray3.default)(tuple, 2),
              funcIndexRaw = _tuple2[1];

          var funcIndex = parseInt(funcIndexRaw, 10);
          // Validate that the funcIndex makes sense.
          if (!isNaN(funcIndex) && funcIndex >= 0) {
            switch (type) {
              case 'merge-function':
                transforms.push({
                  type: 'merge-function',
                  funcIndex: funcIndex
                });
                break;
              case 'focus-function':
                transforms.push({
                  type: 'focus-function',
                  funcIndex: funcIndex
                });
                break;
              default:
                throw new Error('Unmatched transform.');
            }
          }
          break;
        }
      case 'focus-subtree':
      case 'merge-call-node':
      case 'merge-subtree':
        {
          // e.g. "f-js-xFFpUMl-i" or "f-cpp-0KV4KV5KV61KV7KV8K"
          var _tuple3 = (0, _slicedToArray3.default)(tuple, 4),
              implementationRaw = _tuple3[1],
              serializedCallNodePath = _tuple3[2],
              invertedRaw = _tuple3[3];

          var _implementation = (0, _profileData.toValidImplementationFilter)(implementationRaw);
          var callNodePath = (0, _uintarrayEncoding.stringToUintArray)(serializedCallNodePath);
          var inverted = Boolean(invertedRaw);
          // Flow requires a switch because it can't deduce the type string correctly.
          switch (type) {
            case 'focus-subtree':
              transforms.push({
                type: 'focus-subtree',
                implementation: _implementation,
                callNodePath: callNodePath,
                inverted: inverted
              });
              break;
            case 'merge-call-node':
              transforms.push({
                type: 'merge-call-node',
                implementation: _implementation,
                callNodePath: callNodePath
              });
              break;
            case 'merge-subtree':
              transforms.push({
                type: 'merge-subtree',
                implementation: _implementation,
                callNodePath: callNodePath,
                inverted: inverted
              });
              break;
            default:
              throw new Error('Unmatched transform.');
          }

          break;
        }
      default:
        // Do not throw an error, as we don't trust the data coming from a user.
        console.error('Unrecognized transform was passed to the URL.', type);
        break;
    }
  });

  return transforms;
}

function stringifyTransforms() {
  var transforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return transforms.map(function (transform) {
    var shortKey = TRANSFORM_TO_SHORT_KEY[transform.type];
    switch (transform.type) {
      case 'merge-function':
        return shortKey + '-' + transform.funcIndex;
      case 'focus-function':
        {
          var string = shortKey + '-' + transform.funcIndex;
          if (transform.inverted) {
            string += '-i';
          }
          return string;
        }
      case 'collapse-resource':
        return shortKey + '-' + transform.implementation + '-' + transform.resourceIndex + '-' + transform.collapsedFuncIndex;
      case 'focus-subtree':
      case 'merge-call-node':
      case 'merge-subtree':
        {
          var _string = [shortKey, transform.implementation, (0, _uintarrayEncoding.uintArrayToString)(transform.callNodePath)].join('-');
          if (transform.inverted) {
            _string += '-i';
          }
          return _string;
        }
      default:
        throw new Error('An unknown transform was found when stringifying.');
    }
  }).join('~');
}

function getTransformLabels(thread, threadName, transforms) {
  var funcTable = thread.funcTable,
      libs = thread.libs,
      stringTable = thread.stringTable,
      resourceTable = thread.resourceTable;

  var labels = transforms.map(function (transform) {
    // Lookup library information.
    if (transform.type === 'collapse-resource') {
      var libIndex = resourceTable.lib[transform.resourceIndex];
      var resourceName = void 0;
      if (libIndex === undefined || libIndex === null) {
        var _nameIndex = resourceTable.name[transform.resourceIndex];
        if (_nameIndex === -1) {
          throw new Error('Attempting to collapse a resource without a name');
        }
        resourceName = stringTable.getString(_nameIndex);
      } else {
        resourceName = libs[libIndex].name;
      }
      return 'Collapse: ' + resourceName;
    }

    // Lookup function name.
    var funcIndex = void 0;
    switch (transform.type) {
      case 'focus-subtree':
      case 'merge-subtree':
      case 'merge-call-node':
        funcIndex = transform.callNodePath[transform.callNodePath.length - 1];
        break;
      case 'focus-function':
      case 'merge-function':
        funcIndex = transform.funcIndex;
        break;
      default:
        throw new Error('Unexpected transform type');
    }
    var nameIndex = funcTable.name[funcIndex];
    var funcName = stringTable.getString(nameIndex);

    switch (transform.type) {
      case 'focus-subtree':
        return 'Focus Node: ' + funcName;
      case 'focus-function':
        return 'Focus: ' + funcName;
      case 'merge-subtree':
        return 'Merge Subtree: ' + funcName;
      case 'merge-call-node':
        return 'Merge Node: ' + funcName;
      case 'merge-function':
        return 'Merge: ' + funcName;
      default:
        throw new Error('Unexpected transform type');
    }
  });
  labels.unshift('Complete "' + threadName + '"');
  return labels;
}

function applyTransformToCallNodePath(callNodePath, transform, transformedThread) {
  switch (transform.type) {
    case 'focus-subtree':
      return _removePrefixPathFromCallNodePath(transform.callNodePath, callNodePath);
    case 'focus-function':
      return _startCallNodePathWithFunction(transform.funcIndex, callNodePath);
    case 'merge-call-node':
      return _mergeNodeInCallNodePath(transform.callNodePath, callNodePath);
    case 'merge-function':
      return _mergeFunctionInCallNodePath(transform.funcIndex, callNodePath);
    case 'collapse-resource':
      return _collapseResourceInCallNodePath(transform.resourceIndex, transform.collapsedFuncIndex, transformedThread.funcTable, callNodePath);
    default:
      throw new Error('Cannot apply an unknown transform to update the CallNodePath');
  }
}

function _removePrefixPathFromCallNodePath(prefixPath, callNodePath) {
  return _callNodePathHasPrefixPath(prefixPath, callNodePath) ? callNodePath.slice(prefixPath.length - 1) : [];
}

function _startCallNodePathWithFunction(funcIndex, callNodePath) {
  var startIndex = callNodePath.indexOf(funcIndex);
  return startIndex === -1 ? [] : callNodePath.slice(startIndex);
}

function _mergeNodeInCallNodePath(prefixPath, callNodePath) {
  return _callNodePathHasPrefixPath(prefixPath, callNodePath) ? callNodePath.filter(function (_, i) {
    return i !== prefixPath.length - 1;
  }) : callNodePath;
}

function _mergeFunctionInCallNodePath(funcIndex, callNodePath) {
  return callNodePath.filter(function (nodeFunc) {
    return nodeFunc !== funcIndex;
  });
}

function _collapseResourceInCallNodePath(resourceIndex, collapsedFuncIndex, funcTable, callNodePath) {
  return callNodePath
  // Map any collapsed functions into the collapsedFuncIndex
  .map(function (pathFuncIndex) {
    return funcTable.resource[pathFuncIndex] === resourceIndex ? collapsedFuncIndex : pathFuncIndex;
  })
  // De-duplicate contiguous collapsed funcs
  .filter(function (pathFuncIndex, pathIndex, path) {
    return (
      // This function doesn't match the previous one, so keep it.
      pathFuncIndex !== path[pathIndex - 1] ||
      // This function matched the previous, only keep it if doesn't match the
      // collapsed func.
      pathFuncIndex !== collapsedFuncIndex
    );
  });
}

function _callNodePathHasPrefixPath(prefixPath, callNodePath) {
  return prefixPath.length <= callNodePath.length && prefixPath.every(function (prefixFunc, i) {
    return prefixFunc === callNodePath[i];
  });
}

function pathsAreEqual(a, b) {
  return a.length === b.length && a.every(function (func, i) {
    return func === b[i];
  });
}

/**
 * Transform a thread's stacks to merge stacks that match the CallNodePath into
 * the calling stack. See `src/types/transforms.js` for more information about the
 * "merge-call-node" transform.
 */
function mergeCallNode(thread, callNodePath, implementation) {
  return (0, _timeCode.timeCode)('mergeCallNode', function () {
    var stackTable = thread.stackTable,
        frameTable = thread.frameTable,
        samples = thread.samples;
    // Depth here is 0 indexed.

    var depthAtCallNodePathLeaf = callNodePath.length - 1;
    var oldStackToNewStack = new Map();
    oldStackToNewStack.set(null, null);
    var newStackTable = {
      length: 0,
      prefix: [],
      frame: []
    };
    // Provide two arrays to efficiently cache values for the algorithm. This probably
    // could be refactored to use only one array here.
    var stackDepths = [];
    var stackMatches = [];
    var funcMatchesImplementation = FUNC_MATCHES[implementation];
    for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
      var prefix = stackTable.prefix[stackIndex];
      var frameIndex = stackTable.frame[stackIndex];
      var funcIndex = frameTable.func[frameIndex];

      var doesPrefixMatch = prefix === null ? true : stackMatches[prefix];
      var prefixDepth = prefix === null ? -1 : stackDepths[prefix];
      var currentFuncOnPath = callNodePath[prefixDepth + 1];

      var doMerge = false;
      var stackDepth = prefixDepth;
      var doesMatchCallNodePath = void 0;
      if (doesPrefixMatch && stackDepth < depthAtCallNodePathLeaf) {
        // This stack's prefixes were in our CallNodePath.
        if (currentFuncOnPath === funcIndex) {
          // This stack's function matches too!
          doesMatchCallNodePath = true;
          if (stackDepth + 1 === depthAtCallNodePathLeaf) {
            // Holy cow, we found a match for our merge operation and can merge this stack.
            doMerge = true;
          } else {
            // Since we found a match, increase the stack depth. This should match
            // the depth of the implementation filtered stacks.
            stackDepth++;
          }
        } else if (!funcMatchesImplementation(thread, funcIndex)) {
          // This stack's function does not match the CallNodePath, however it's not part
          // of the CallNodePath's implementation filter. Go ahead and keep it.
          doesMatchCallNodePath = true;
        } else {
          // While all of the predecessors matched, this stack's function does not :(
          doesMatchCallNodePath = false;
        }
      } else {
        // This stack is not part of a matching branch of the tree.
        doesMatchCallNodePath = false;
      }
      stackMatches[stackIndex] = doesMatchCallNodePath;
      stackDepths[stackIndex] = stackDepth;

      // Map the oldStackToNewStack, and only push on the stacks that aren't merged.
      if (doMerge) {
        var newStackPrefix = oldStackToNewStack.get(prefix);
        oldStackToNewStack.set(stackIndex, newStackPrefix === undefined ? null : newStackPrefix);
      } else {
        var newStackIndex = newStackTable.length++;
        var _newStackPrefix = oldStackToNewStack.get(prefix);
        newStackTable.prefix[newStackIndex] = _newStackPrefix === undefined ? null : _newStackPrefix;
        newStackTable.frame[newStackIndex] = frameIndex;
        oldStackToNewStack.set(stackIndex, newStackIndex);
      }
    }
    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (oldStack) {
        var newStack = oldStackToNewStack.get(oldStack);
        if (newStack === undefined) {
          throw new Error('Converting from the old stack to a new stack cannot be undefined');
        }
        return newStack;
      })
    });
    return Object.assign({}, thread, {
      stackTable: newStackTable,
      samples: newSamples
    });
  });
}

/**
 * Go through the StackTable and remove any stacks that are part of the given function.
 * This operation effectively merges the timing of the stacks into their callers.
 */
function mergeFunction(thread, funcIndexToMerge) {
  var stackTable = thread.stackTable,
      frameTable = thread.frameTable,
      samples = thread.samples;

  var oldStackToNewStack = new Map();
  oldStackToNewStack.set(null, null);
  var newStackTable = {
    length: 0,
    prefix: [],
    frame: []
  };
  for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
    var prefix = stackTable.prefix[stackIndex];
    var frameIndex = stackTable.frame[stackIndex];
    var funcIndex = frameTable.func[frameIndex];

    if (funcIndex === funcIndexToMerge) {
      var newStackPrefix = oldStackToNewStack.get(prefix);
      oldStackToNewStack.set(stackIndex, newStackPrefix === undefined ? null : newStackPrefix);
    } else {
      var newStackIndex = newStackTable.length++;
      var _newStackPrefix2 = oldStackToNewStack.get(prefix);
      newStackTable.prefix[newStackIndex] = _newStackPrefix2 === undefined ? null : _newStackPrefix2;
      newStackTable.frame[newStackIndex] = frameIndex;
      oldStackToNewStack.set(stackIndex, newStackIndex);
    }
  }
  var newSamples = Object.assign({}, samples, {
    stack: samples.stack.map(function (oldStack) {
      var newStack = oldStackToNewStack.get(oldStack);
      if (newStack === undefined) {
        throw new Error('Converting from the old stack to a new stack cannot be undefined');
      }
      return newStack;
    })
  });
  return Object.assign({}, thread, {
    stackTable: newStackTable,
    samples: newSamples
  });
}

function collapseResource(thread, resourceIndexToCollapse, implementation) {
  var stackTable = thread.stackTable,
      funcTable = thread.funcTable,
      frameTable = thread.frameTable,
      resourceTable = thread.resourceTable,
      samples = thread.samples;

  var resourceNameIndex = resourceTable.name[resourceIndexToCollapse];
  var newFrameTable = {
    address: frameTable.address.slice(),
    category: frameTable.category.slice(),
    func: frameTable.func.slice(),
    implementation: frameTable.implementation.slice(),
    line: frameTable.line.slice(),
    optimizations: frameTable.optimizations.slice(),
    length: frameTable.length
  };
  var newFuncTable = {
    address: funcTable.address.slice(),
    isJS: funcTable.isJS.slice(),
    name: funcTable.name.slice(),
    resource: funcTable.resource.slice(),
    fileName: funcTable.fileName.slice(),
    lineNumber: funcTable.lineNumber.slice(),
    length: funcTable.length
  };
  var newStackTable = {
    length: 0,
    prefix: [],
    frame: []
  };
  var oldStackToNewStack = new Map();
  var prefixStackToCollapsedStack = new Map();
  var collapsedStacks = new Set();
  var funcMatchesImplementation = FUNC_MATCHES[implementation];

  oldStackToNewStack.set(null, null);
  // A new func and frame will be created on the first stack that is found that includes
  // the given resource.
  var collapsedFrameIndex = void 0;
  var collapsedFuncIndex = void 0;

  for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
    var prefix = stackTable.prefix[stackIndex];
    var frameIndex = stackTable.frame[stackIndex];
    var funcIndex = frameTable.func[frameIndex];
    var resourceIndex = funcTable.resource[funcIndex];
    var newStackPrefix = oldStackToNewStack.get(prefix);

    if (newStackPrefix === undefined) {
      throw new Error('newStackPrefix must not be undefined');
    }
    if (resourceIndex === resourceIndexToCollapse) {
      // The stack matches this resource.
      if (!collapsedStacks.has(newStackPrefix)) {
        // The prefix is not a collapsed stack. So this stack will not collapse into its
        // prefix stack. But it might collapse into a sibling stack, if there exists a
        // sibling with the same resource. Check if a collapsed stack with the same
        // prefix (i.e. a collapsed sibling) exists.

        var existingCollapsedStack = prefixStackToCollapsedStack.get(prefix);
        if (existingCollapsedStack === undefined) {
          // Create a new collapsed frame.

          // Compute the next indexes
          var newStackIndex = newStackTable.length++;
          collapsedStacks.add(newStackIndex);
          oldStackToNewStack.set(stackIndex, newStackIndex);
          prefixStackToCollapsedStack.set(prefix, newStackIndex);

          if (collapsedFrameIndex === undefined) {
            collapsedFrameIndex = newFrameTable.length++;
            collapsedFuncIndex = newFuncTable.length++;
            // Add the collapsed frame
            newFrameTable.address.push(frameTable.address[frameIndex]);
            newFrameTable.category.push(frameTable.category[frameIndex]);
            newFrameTable.func.push(collapsedFuncIndex);
            newFrameTable.line.push(frameTable.line[frameIndex]);
            newFrameTable.implementation.push(frameTable.implementation[frameIndex]);
            newFrameTable.optimizations.push(frameTable.optimizations[frameIndex]);

            // Add the psuedo-func
            newFuncTable.address.push(funcTable.address[funcIndex]);
            newFuncTable.isJS.push(funcTable.isJS[funcIndex]);
            newFuncTable.name.push(resourceNameIndex);
            newFuncTable.resource.push(funcTable.resource[funcIndex]);
            newFuncTable.fileName.push(funcTable.fileName[funcIndex]);
            newFuncTable.lineNumber.push(null);
          }

          // Add the new stack.
          newStackTable.prefix.push(newStackPrefix);
          newStackTable.frame.push(collapsedFrameIndex);
        } else {
          // A collapsed stack at this level already exists, use that one.
          if (existingCollapsedStack === null) {
            throw new Error('existingCollapsedStack cannot be null');
          }
          oldStackToNewStack.set(stackIndex, existingCollapsedStack);
        }
      } else {
        // The prefix was already collapsed, use that one.
        oldStackToNewStack.set(stackIndex, newStackPrefix);
      }
    } else {
      if (!funcMatchesImplementation(thread, funcIndex) && newStackPrefix !== null) {
        // This function doesn't match the implementation filter.
        var prefixFrame = newStackTable.frame[newStackPrefix];
        var prefixFunc = newFrameTable.func[prefixFrame];
        var prefixResource = newFuncTable.resource[prefixFunc];

        if (prefixResource === resourceIndexToCollapse) {
          // This stack's prefix did match the collapsed resource, map the stack
          // to the already collapsed stack and move on.
          oldStackToNewStack.set(stackIndex, newStackPrefix);
          continue;
        }
      }
      // This stack isn't part of the collapsed resource. Copy over the previous stack.
      var _newStackIndex = newStackTable.length++;
      newStackTable.prefix.push(newStackPrefix);
      newStackTable.frame.push(frameIndex);
      oldStackToNewStack.set(stackIndex, _newStackIndex);
    }
  }

  var newSamples = Object.assign({}, samples, {
    stack: samples.stack.map(function (oldStack) {
      var newStack = oldStackToNewStack.get(oldStack);
      if (newStack === undefined) {
        throw new Error('Converting from the old stack to a new stack cannot be undefined');
      }
      return newStack;
    })
  });

  return Object.assign({}, thread, {
    stackTable: newStackTable,
    frameTable: newFrameTable,
    funcTable: newFuncTable,
    samples: newSamples
  });
}

var FUNC_MATCHES = {
  combined: function combined(_thread, _funcIndex) {
    return true;
  },
  cpp: function cpp(thread, funcIndex) {
    var funcTable = thread.funcTable,
        stringTable = thread.stringTable;
    // Return quickly if this is a JS frame.

    if (thread.funcTable.isJS[funcIndex]) {
      return false;
    }

    // Regular C++ functions are associated with a resource that describes the
    // shared library that these C++ functions were loaded from. Jitcode is not
    // loaded from shared libraries but instead generated at runtime, so Jitcode
    // frames are not associated with a shared library and thus have no resource
    var locationString = stringTable.getString(funcTable.name[funcIndex]);
    var isProbablyJitCode = funcTable.resource[funcIndex] === -1 && locationString.startsWith('0x');
    return !isProbablyJitCode;
  },
  js: function js(thread, funcIndex) {
    return thread.funcTable.isJS[funcIndex];
  }
};

/**
 * Filter thread to only contain stacks which start with a CallNodePath, and
 * only samples with those stacks. The new stacks' roots will be frames whose
 * func is the last element of the prefix CallNodePath.
 */
function focusSubtree(thread, callNodePath, implementation) {
  return (0, _timeCode.timeCode)('focusSubtree', function () {
    var stackTable = thread.stackTable,
        frameTable = thread.frameTable,
        samples = thread.samples;

    var prefixDepth = callNodePath.length;
    var stackMatches = new Int32Array(stackTable.length);
    var funcMatchesImplementation = FUNC_MATCHES[implementation];
    var oldStackToNewStack = new Map();
    oldStackToNewStack.set(null, null);
    var newStackTable = {
      length: 0,
      prefix: [],
      frame: []
    };
    for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
      var prefix = stackTable.prefix[stackIndex];
      var prefixMatchesUpTo = prefix !== null ? stackMatches[prefix] : 0;
      var stackMatchesUpTo = -1;
      if (prefixMatchesUpTo !== -1) {
        var frame = stackTable.frame[stackIndex];
        if (prefixMatchesUpTo === prefixDepth) {
          stackMatchesUpTo = prefixDepth;
        } else {
          var funcIndex = frameTable.func[frame];
          if (funcIndex === callNodePath[prefixMatchesUpTo]) {
            stackMatchesUpTo = prefixMatchesUpTo + 1;
          } else if (!funcMatchesImplementation(thread, funcIndex)) {
            stackMatchesUpTo = prefixMatchesUpTo;
          }
        }
        if (stackMatchesUpTo === prefixDepth) {
          var newStackIndex = newStackTable.length++;
          var newStackPrefix = oldStackToNewStack.get(prefix);
          newStackTable.prefix[newStackIndex] = newStackPrefix !== undefined ? newStackPrefix : null;
          newStackTable.frame[newStackIndex] = frame;
          oldStackToNewStack.set(stackIndex, newStackIndex);
        }
      }
      stackMatches[stackIndex] = stackMatchesUpTo;
    }
    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (oldStack) {
        if (oldStack === null || stackMatches[oldStack] !== prefixDepth) {
          return null;
        }
        var newStack = oldStackToNewStack.get(oldStack);
        if (newStack === undefined) {
          throw new Error('Converting from the old stack to a new stack cannot be undefined');
        }
        return newStack;
      })
    });
    return Object.assign({}, thread, {
      stackTable: newStackTable,
      samples: newSamples
    });
  });
}

/**
 * Filter thread to only contain stacks which end with a CallNodePath, and
 * only samples with those stacks. The new stacks' leaf frames will be
 * frames whose func is the last element of the postfix func array.
 */
function focusInvertedSubtree(thread, postfixCallNodePath, implementation) {
  return (0, _timeCode.timeCode)('focusInvertedSubtree', function () {
    var postfixDepth = postfixCallNodePath.length;
    var stackTable = thread.stackTable,
        frameTable = thread.frameTable,
        samples = thread.samples;

    var funcMatchesImplementation = FUNC_MATCHES[implementation];
    function convertStack(leaf) {
      var matchesUpToDepth = 0; // counted from the leaf
      for (var stack = leaf; stack !== null; stack = stackTable.prefix[stack]) {
        var frame = stackTable.frame[stack];
        var funcIndex = frameTable.func[frame];
        if (funcIndex === postfixCallNodePath[matchesUpToDepth]) {
          matchesUpToDepth++;
          if (matchesUpToDepth === postfixDepth) {
            return stack;
          }
        } else if (funcMatchesImplementation(thread, funcIndex)) {
          return null;
        }
      }
      return null;
    }

    var oldStackToNewStack = new Map();
    oldStackToNewStack.set(null, null);
    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (stackIndex) {
        var newStackIndex = oldStackToNewStack.get(stackIndex);
        if (newStackIndex === undefined) {
          newStackIndex = convertStack(stackIndex);
          oldStackToNewStack.set(stackIndex, newStackIndex);
        }
        return newStackIndex;
      })
    });
    return Object.assign({}, thread, {
      samples: newSamples
    });
  });
}
function focusFunction(thread, funcIndexToFocus) {
  return (0, _timeCode.timeCode)('focusSubtree', function () {
    var stackTable = thread.stackTable,
        frameTable = thread.frameTable,
        samples = thread.samples;

    var oldStackToNewStack = new Map();
    oldStackToNewStack.set(null, null);
    var newStackTable = {
      length: 0,
      prefix: [],
      frame: []
    };
    for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
      var prefix = stackTable.prefix[stackIndex];
      var frameIndex = stackTable.frame[stackIndex];
      var funcIndex = frameTable.func[frameIndex];
      var matchesFocusFunc = funcIndex === funcIndexToFocus;

      var newPrefix = oldStackToNewStack.get(prefix);
      if (newPrefix === undefined) {
        throw new Error('The prefix should not map to an undefined value');
      }

      if (newPrefix !== null || matchesFocusFunc) {
        var newStackIndex = newStackTable.length++;
        newStackTable.prefix[newStackIndex] = newPrefix;
        newStackTable.frame[newStackIndex] = frameIndex;
        oldStackToNewStack.set(stackIndex, newStackIndex);
      } else {
        oldStackToNewStack.set(stackIndex, null);
      }
    }
    var newSamples = Object.assign({}, samples, {
      stack: samples.stack.map(function (oldStack) {
        if (oldStack === null) {
          return null;
        }
        var newStack = oldStackToNewStack.get(oldStack);
        if (newStack === undefined) {
          throw new Error('Converting from the old stack to a new stack cannot be undefined');
        }
        return newStack;
      })
    });
    return Object.assign({}, thread, {
      stackTable: newStackTable,
      samples: newSamples
    });
  });
}

/**
 * When restoring function in a CallNodePath there can be multiple correct CallNodePaths
 * that could be restored. The best approach would probably be to restore to the
 * "heaviest" callstack in the call tree (i.e. the one that is displayed first in the
 * calltree because it has the most samples under it.) This function only finds the first
 * match and returns it.
 */
function restoreAllFunctionsInCallNodePath(thread, previousImplementationFilter, callNodePath) {
  var stackTable = thread.stackTable,
      frameTable = thread.frameTable;

  var funcMatchesImplementation = FUNC_MATCHES[previousImplementationFilter];
  // For every stackIndex, matchesUpToDepth[stackIndex] will be:
  //  - null if stackIndex does not match the callNodePath
  //  - <depth> if stackIndex matches callNodePath up to (and including) callNodePath[<depth>]
  var matchesUpToDepth = [];
  var tipStackIndex = null;
  // Try to find the tip most stackIndex in the CallNodePath, but skip anything
  // that doesn't match the previous implementation filter.
  for (var stackIndex = 0; stackIndex < stackTable.length; stackIndex++) {
    var prefix = stackTable.prefix[stackIndex];
    var frameIndex = stackTable.frame[stackIndex];
    var funcIndex = frameTable.func[frameIndex];
    var prefixPathDepth = prefix === null ? -1 : matchesUpToDepth[prefix];

    if (prefixPathDepth === null) {
      continue;
    }

    var pathDepth = prefixPathDepth + 1;
    var nextPathFuncIndex = callNodePath[pathDepth];
    if (nextPathFuncIndex === funcIndex) {
      // This function is a match.
      matchesUpToDepth[stackIndex] = pathDepth;
      if (pathDepth === callNodePath.length - 1) {
        // The tip of the CallNodePath has been found.
        tipStackIndex = stackIndex;
        break;
      }
    } else if (!funcMatchesImplementation(thread, funcIndex)) {
      // This function didn't match, but it also wasn't in the previous implementation.
      // Keep on searching for a match.
      matchesUpToDepth[stackIndex] = prefixPathDepth;
    } else {
      matchesUpToDepth[stackIndex] = null;
    }
  }

  // Turn the stack index into a CallNodePath
  if (tipStackIndex === null) {
    return [];
  }
  var newCallNodePath = [];
  for (var _stackIndex = tipStackIndex; _stackIndex !== null; _stackIndex = stackTable.prefix[_stackIndex]) {
    var _frameIndex = stackTable.frame[_stackIndex];
    var _funcIndex2 = frameTable.func[_frameIndex];
    newCallNodePath.push(_funcIndex2);
  }
  return newCallNodePath.reverse();
}

function filterCallNodePathByImplementation(thread, implementationFilter, callNodePath) {
  var funcMatchesImplementation = FUNC_MATCHES[implementationFilter];
  return callNodePath.filter(function (funcIndex) {
    return funcMatchesImplementation(thread, funcIndex);
  });
}

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CURRENT_URL_VERSION = undefined;

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _defineProperty2 = __webpack_require__(53);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _upgraders2; /* This Source Code Form is subject to the terms of the Mozilla Public
                  * License, v. 2.0. If a copy of the MPL was not distributed with this
                  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.urlStateToUrlObject = urlStateToUrlObject;
exports.urlFromState = urlFromState;
exports.stateFromLocation = stateFromLocation;
exports.upgradeLocationToCurrentVersion = upgradeLocationToCurrentVersion;

var _queryString = __webpack_require__(192);

var _queryString2 = _interopRequireDefault(_queryString);

var _rangeFilters = __webpack_require__(126);

var _transforms2 = __webpack_require__(190);

var _flow = __webpack_require__(124);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CURRENT_URL_VERSION = exports.CURRENT_URL_VERSION = 2;

function dataSourceDirs(urlState) {
  var dataSource = urlState.dataSource;

  switch (dataSource) {
    case 'from-addon':
      return ['from-addon'];
    case 'from-file':
      return ['from-file'];
    case 'local':
      return ['local', urlState.hash];
    case 'public':
      return ['public', urlState.hash];
    case 'from-url':
      return ['from-url', encodeURIComponent(urlState.profileUrl)];
    default:
      return [];
  }
}

// "null | void" in the query objects are flags which map to true for null, and false
// for void. False flags do not show up the URL.


/**
 * Take the UrlState and map it into a serializable UrlObject, that represents the
 * target URL.
 */
function urlStateToUrlObject(urlState) {
  var dataSource = urlState.dataSource;

  if (dataSource === 'none') {
    return {
      pathParts: [],
      query: {}
    };
  }
  var pathParts = [].concat((0, _toConsumableArray3.default)(dataSourceDirs(urlState)), [urlState.selectedTab]);

  // Start with the query parameters that are shown regardless of the active tab.
  var query = {
    range: (0, _rangeFilters.stringifyRangeFilters)(urlState.rangeFilters) || undefined,
    thread: '' + urlState.selectedThread,
    threadOrder: urlState.threadOrder.join('-'),
    hiddenThreads: urlState.hiddenThreads.join('-'),
    v: CURRENT_URL_VERSION
  };

  if (true) {
    /* eslint-disable camelcase */
    query.react_perf = null;
    /* eslint-enable camelcase */
  }

  // Depending on which tab is active, also show tab-specific query parameters.
  var selectedTab = urlState.selectedTab;
  switch (selectedTab) {
    case 'calltree':
      query.search = urlState.callTreeSearchString || undefined;
      query.invertCallstack = urlState.invertCallstack ? null : undefined;
      query.implementation = urlState.implementation === 'combined' ? undefined : urlState.implementation;
      query.transforms = (0, _transforms2.stringifyTransforms)(urlState.transforms[urlState.selectedThread]) || undefined;
      break;
    case 'marker-table':
      query.markerSearch = urlState.markersSearchString;
      break;
    case 'stack-chart':
      query.search = urlState.callTreeSearchString || undefined;
      query.invertCallstack = urlState.invertCallstack ? null : undefined;
      query.hidePlatformDetails = urlState.hidePlatformDetails ? null : undefined;
      break;
    case 'marker-chart':
    case 'summary':
      // No additional query params required.
      break;
    default:
      (0, _flow.unexpectedCase)(selectedTab);
  }
  return { query: query, pathParts: pathParts };
}

function urlFromState(urlState) {
  var _urlStateToUrlObject = urlStateToUrlObject(urlState),
      pathParts = _urlStateToUrlObject.pathParts,
      query = _urlStateToUrlObject.query;

  var dataSource = urlState.dataSource;

  if (dataSource === 'none') {
    return '/';
  }
  var pathname = pathParts.length === 0 ? '/' : '/' + pathParts.join('/') + '/';

  var qString = _queryString2.default.stringify(query);
  return pathname + (qString ? '?' + qString : '');
}

function getDataSourceFromPathParts(pathParts) {
  var str = pathParts[0] || 'none';
  // With this switch, flow is able to understand that we return a valid value
  switch (str) {
    case 'none':
    case 'from-addon':
    case 'from-file':
    case 'local':
    case 'public':
    case 'from-url':
      return str;
    default:
      throw new Error('Unexpected data source ' + str);
  }
}

/**
 * Define only the properties of the window.location object that the function uses
 * so that it can be mocked in tests.
 */
function stateFromLocation(location) {
  var _upgradeLocationToCur = upgradeLocationToCurrentVersion({
    pathname: location.pathname,
    hash: location.hash,
    query: _queryString2.default.parse(location.search.substr(1))
  }),
      pathname = _upgradeLocationToCur.pathname,
      query = _upgradeLocationToCur.query;

  var pathParts = pathname.split('/').filter(function (d) {
    return d;
  });
  var dataSource = getDataSourceFromPathParts(pathParts);
  var selectedThread = query.thread !== undefined ? +query.thread : 0;

  // https://perf-html.io/public/{hash}/calltree/
  var hasProfileHash = ['local', 'public'].includes(dataSource);

  // https://perf-html.io/from-url/{url}/calltree/
  var hasProfileUrl = ['from-url'].includes(dataSource);

  // The selected tab is the last path part in the URL.
  var selectedTabPathPart = hasProfileHash || hasProfileUrl ? 2 : 1;

  var implementation = 'combined';
  // Don't trust the implementation values from the user. Make sure it conforms
  // to known values.
  if (query.implementation === 'js' || query.implementation === 'cpp') {
    implementation = query.implementation;
  }

  return {
    dataSource: dataSource,
    hash: hasProfileHash ? pathParts[1] : '',
    profileUrl: hasProfileUrl ? decodeURIComponent(pathParts[1]) : '',
    selectedTab: toValidTabSlug(pathParts[selectedTabPathPart]),
    rangeFilters: query.range ? (0, _rangeFilters.parseRangeFilters)(query.range) : [],
    selectedThread: selectedThread,
    callTreeSearchString: query.search || '',
    markersSearchString: query.markerSearch || '',
    implementation: implementation,
    invertCallstack: query.invertCallstack !== undefined,
    hidePlatformDetails: query.hidePlatformDetails !== undefined,
    hiddenThreads: query.hiddenThreads ? query.hiddenThreads.split('-').map(function (index) {
      return Number(index);
    }) : [],
    threadOrder: query.threadOrder ? query.threadOrder.split('-').map(function (index) {
      return Number(index);
    }) : [],
    transforms: (0, _defineProperty3.default)({}, selectedThread, query.transforms ? (0, _transforms2.parseTransforms)(query.transforms) : [])
  };
}

function toValidTabSlug(slug) {
  var defaultTab = 'calltree';
  switch (slug) {
    case 'calltree':
    case 'stack-chart':
    case 'marker-chart':
    case 'marker-table':
    case 'summary':
      return slug;
    case undefined:
      return defaultTab;
    default:
      console.error('Unknown tab found, maybe a URL upgrader needs to be written.', slug);
      return defaultTab;
  }
}

function upgradeLocationToCurrentVersion(processedLocation) {
  var urlVersion = +processedLocation.query.v || 0;
  if (urlVersion === CURRENT_URL_VERSION) {
    return processedLocation;
  }

  if (urlVersion > CURRENT_URL_VERSION) {
    throw new Error('Unable to parse a url of version ' + urlVersion + ' - are you running an outdated version of perf.html? ' + ('The most recent version understood by this version of perf.html is version ' + CURRENT_URL_VERSION + '.\n') + 'You can try refreshing this page in case perf.html has updated in the meantime.');
  }
  // Convert to CURRENT_URL_VERSION, one step at a time.
  for (var destVersion = urlVersion; destVersion <= CURRENT_URL_VERSION; destVersion++) {
    if (destVersion in _upgraders) {
      _upgraders[destVersion](processedLocation);
    }
  }

  processedLocation.query.v = CURRENT_URL_VERSION;
  return processedLocation;
}

// _upgraders[i] converts from version i - 1 to version i.
// Every "upgrader" takes the processedLocation as its single argument and mutates it.
/* eslint-disable no-useless-computed-key */
var _upgraders = (_upgraders2 = {}, (0, _defineProperty3.default)(_upgraders2, 0, function _(processedLocation) {
  // Version 1 is the first versioned url.

  // If the pathname is '/', this could be a very old URL that has its information
  // stored in the hash.
  if (processedLocation.pathname === '/') {
    var legacyQuery = Object.assign({}, processedLocation.query, _queryString2.default.parse(processedLocation.hash));
    if ('report' in legacyQuery) {
      // Process any legacy filters.
      if ('filter' in legacyQuery) {
        var filters = JSON.parse(legacyQuery.filter);
        // We can't convert these parameters to the new URL parameters here
        // because they're relative to different things - the legacy range
        // filters were relative to profile.meta.startTime, and the new
        // rangeFilters param is relative to
        // getTimeRangeIncludingAllThreads(profile).start.
        // So we stuff this information into a global here, and then later,
        // once we have the profile, we convert that information into URL params
        // again. This is not pretty.
        window.legacyRangeFilters = filters.filter(function (f) {
          return f.type === 'RangeSampleFilter';
        }).map(function (_ref) {
          var start = _ref.start,
              end = _ref.end;
          return { start: start, end: end };
        });
      }
      // Put the report into the pathname.
      processedLocation.pathname = '/public/' + legacyQuery.report + '/calltree/';
      processedLocation.hash = '';
      processedLocation.query = {};
    }
  }

  // Instead of implementation filters, we used to have jsOnly flags.
  if (processedLocation.query.jsOnly !== undefined) {
    // Support the old URL structure that had a jsOnly flag.
    delete processedLocation.query.jsOnly;
    processedLocation.query.implementation = 'js';
  }
}), (0, _defineProperty3.default)(_upgraders2, 1, function _(processedLocation) {
  // The transform stack was added. Convert the callTreeFilters into the new
  // transforms format.
  if (processedLocation.query.callTreeFilters) {
    // Before: "callTreeFilters=prefix-0KV4KV5KV61KV7KV8K~postfixjs-xFFpUMl"
    // After: "transforms=f-combined-0KV4KV5KV61KV7KV8K~f-js-xFFpUMl-i"
    processedLocation.query.transforms = processedLocation.query.callTreeFilters.split('~').map(function (s) {
      var _s$split = s.split('-'),
          _s$split2 = (0, _slicedToArray3.default)(_s$split, 2),
          type = _s$split2[0],
          val = _s$split2[1];

      switch (type) {
        case 'prefix':
          return 'f-combined-' + val;
        case 'prefixjs':
          return 'f-js-' + val;
        case 'postfix':
          return 'f-combined-' + val + '-i';
        case 'postfixjs':
          return 'f-js-' + val + '-i';
        default:
          return undefined;
      }
    }).filter(function (f) {
      return f;
    }).join('~');
    delete processedLocation.query.callTreeFilters;
  }
}), (0, _defineProperty3.default)(_upgraders2, 2, function _(processedLocation) {
  // Map the tab "timeline" to "stack-chart".
  // Map the tab "markers" to "marker-table".
  processedLocation.pathname = processedLocation.pathname
  // Given:    /public/e71ce9584da34298627fb66ac7f2f245ba5edbf5/timeline/
  // Matches:  $1^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  .replace(/^(\/[^/]+\/[^/]+)\/timeline\/?/, '$1/stack-chart/')
  // Given:    /public/e71ce9584da34298627fb66ac7f2f245ba5edbf5/markers/
  // Matches:  $1^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  .replace(/^(\/[^/]+\/[^/]+)\/markers\/?/, '$1/marker-table/');
}), _upgraders2);

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strictUriEncode = __webpack_require__(394);
var objectAssign = __webpack_require__(8);
var decodeComponent = __webpack_require__(395);

function encoderForArrayFormat(opts) {
	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, index) {
				return value === null ? [
					encode(key, opts),
					'[',
					index,
					']'
				].join('') : [
					encode(key, opts),
					'[',
					encode(index, opts),
					']=',
					encode(value, opts)
				].join('');
			};

		case 'bracket':
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'[]=',
					encode(value, opts)
				].join('');
			};

		default:
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'=',
					encode(value, opts)
				].join('');
			};
	}
}

function parserForArrayFormat(opts) {
	var result;

	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				} else if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	} else if (typeof input === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str, opts) {
	opts = objectAssign({arrayFormat: 'none'}, opts);

	var formatter = parserForArrayFormat(opts);

	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeComponent(val);

		formatter(decodeComponent(key), val, ret);
	});

	return Object.keys(ret).sort().reduce(function (result, key) {
		var val = ret[key];
		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
			// Sort object keys, not values
			result[key] = keysSorter(val);
		} else {
			result[key] = val;
		}

		return result;
	}, Object.create(null));
};

exports.stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true,
		arrayFormat: 'none'
	};

	opts = objectAssign(defaults, opts);

	var formatter = encoderForArrayFormat(opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				result.push(formatter(key, val2, result.length));
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProfileProcessorThreaded = exports.ProfileProcessor = exports.processProfile = undefined;

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.extractFuncsAndResourcesFromFrameLocations = extractFuncsAndResourcesFromFrameLocations;
exports.serializeProfile = serializeProfile;
exports.unserializeProfileOfArbitraryFormat = unserializeProfileOfArbitraryFormat;

var _symbolication = __webpack_require__(120);

var _uniqueStringArray = __webpack_require__(54);

var _profileData = __webpack_require__(19);

var _promiseWorker = __webpack_require__(402);

var _flow = __webpack_require__(124);

var _processedProfileVersioning = __webpack_require__(189);

var _geckoProfileVersioning = __webpack_require__(122);

var _oldCleopatraProfileFormat = __webpack_require__(403);

var _taskTracer = __webpack_require__(79);

var _convertMarkers = __webpack_require__(123);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Module for converting a Gecko profile into the 'processed' format.
 * @module process-profile
 */

/**
 * Turn a data table from the form `{ schema, data }` (as used in the Gecko profile
 * JSON) into a struct of arrays. This isn't very nice to read, but it
 * drastically reduces the number of JS objects the JS engine has to deal with,
 * resulting in fewer GC pauses and hopefully better performance.
 *
 * e.g Take geckoTable A data table of the form
 *   `{ schema, data }`.
 * And turn it into a data table of the form
 *  `{ length: number, field1: array, field2: array }`
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
function _toStructOfArrays(geckoTable) {
  var result = { length: geckoTable.data.length };

  var _loop = function _loop(fieldName) {
    var fieldIndex = geckoTable.schema[fieldName];
    if (typeof fieldIndex !== 'number') {
      throw new Error('fieldIndex must be a number in the Gecko profile table.');
    }
    result[fieldName] = geckoTable.data.map(function (entry) {
      return fieldIndex in entry ? entry[fieldIndex] : null;
    });
  };

  for (var fieldName in geckoTable.schema) {
    _loop(fieldName);
  }
  return result;
}

/**
 * JS File information sometimes comes with multiple URIs which are chained
 * with " -> ". We only want the last URI in this list.
 */
function _getRealScriptURI(url) {
  if (url) {
    var urls = url.split(' -> ');
    return urls[urls.length - 1];
  }
  return url;
}

function _sortByField(fieldName, geckoTable) {
  var fieldIndex = geckoTable.schema[fieldName];
  var sortedData = geckoTable.data.slice(0);
  sortedData.sort(function (a, b) {
    return a[fieldIndex] - b[fieldIndex];
  });
  return Object.assign({}, geckoTable, { data: sortedData });
}

function _cleanFunctionName(functionName) {
  var ignoredPrefix = 'non-virtual thunk to ';
  if (functionName.startsWith && functionName.startsWith(ignoredPrefix)) {
    return functionName.substr(ignoredPrefix.length);
  }
  return functionName;
}

/**
 * Resources and funcs are not part of the Gecko Profile format. This information is
 * implicitly defined in the frame tables' location strings. This function derives a new
 * FuncTable and ResourceTable for easily accesing this information in a structred format.
 *
 * The returned IndexIntoFuncTable[] value maps the index of each element in the
 * locationStringIndexes array to a func from the returned FuncTable.
 */
function extractFuncsAndResourcesFromFrameLocations(locationStringIndexes, stringTable, libs) {
  // Explicitly create FuncTable. If Flow complains about this, then all of
  var funcTable = {
    length: 0,
    name: [],
    resource: [],
    address: [],
    isJS: [],
    fileName: [],
    lineNumber: []
  };

  // Explicitly create ResourceTable. If Flow complains about this, then all of
  // the functions in this file starting with the word "extract" should be updated.
  var resourceTable = {
    length: 0,
    type: [],
    name: [],
    lib: [],
    host: []
  };

  // Bundle all of the variables up into an object to pass them around to functions.
  var extractionInfo = {
    funcTable: funcTable,
    resourceTable: resourceTable,
    stringTable: stringTable,
    libs: libs,
    libToResourceIndex: new Map(),
    originToResourceIndex: new Map(),
    libNameToResourceIndex: new Map(),
    stringToNewFuncIndex: new Map()
  };

  // Go through every frame location string, and deduce the function and resource
  // information by applying various string matching heuristics.
  var locationFuncs = locationStringIndexes.map(function (locationIndex) {
    var locationString = stringTable.getString(locationIndex);
    var funcIndex = extractionInfo.stringToNewFuncIndex.get(locationString);
    if (funcIndex !== undefined) {
      // The location string was already processed.
      return funcIndex;
    }

    // These nested `if` branches check for 3 cases for constructing function and
    // resource information.
    funcIndex = _extractUnsymbolicatedFunction(extractionInfo, locationString, locationIndex);
    if (funcIndex === null) {
      funcIndex = _extractCppFunction(extractionInfo, locationString);
      if (funcIndex === null) {
        funcIndex = _extractJsFunction(extractionInfo, locationString);
        if (funcIndex === null) {
          funcIndex = _extractUnknownFunctionType(extractionInfo, locationIndex);
        }
      }
    }

    // Cache the above results.
    extractionInfo.stringToNewFuncIndex.set(locationString, funcIndex);
    return funcIndex;
  });

  return [extractionInfo.funcTable, extractionInfo.resourceTable, locationFuncs];
}

/**
 * Given a location string that looks like a memory address, e.g. "0xfe9a097e0", treat
 * it as an unsymblicated memory address, add a single function to the function table,
 * as a single function, and then look up the library information based on the memory
 * offset obtained from the location string.
 */
function _extractUnsymbolicatedFunction(extractionInfo, locationString, locationIndex) {
  if (!locationString.startsWith('0x')) {
    return null;
  }
  var libs = extractionInfo.libs,
      libToResourceIndex = extractionInfo.libToResourceIndex,
      resourceTable = extractionInfo.resourceTable,
      funcTable = extractionInfo.funcTable,
      stringTable = extractionInfo.stringTable;


  var resourceIndex = -1;
  var addressRelativeToLib = -1;

  var address = parseInt(locationString.substr(2), 16);
  // Look up to see if it's a known library address.
  var lib = (0, _symbolication.getContainingLibrary)(libs, address);
  if (lib) {
    // This is a known library.
    addressRelativeToLib = address - lib.start;
    resourceIndex = libToResourceIndex.get(lib);
    if (resourceIndex === undefined) {
      // This library doesn't exist in the libs array, insert it. This resou
      // A lib resource is a systems-level compiled library, for example "XUL",
      // "AppKit", or "CoreFoundation".
      resourceIndex = resourceTable.length++;
      resourceTable.lib[resourceIndex] = libs.indexOf(lib);
      resourceTable.name[resourceIndex] = stringTable.indexForString(lib.debugName);
      resourceTable.host[resourceIndex] = undefined;
      resourceTable.type[resourceIndex] = _profileData.resourceTypes.library;
      libToResourceIndex.set(lib, resourceIndex);
    }
  }
  // Add the function to the funcTable.
  var funcIndex = funcTable.length++;
  funcTable.name[funcIndex] = locationIndex;
  funcTable.resource[funcIndex] = resourceIndex;
  funcTable.address[funcIndex] = addressRelativeToLib;
  funcTable.isJS[funcIndex] = false;
  funcTable.fileName[funcIndex] = null;
  funcTable.lineNumber[funcIndex] = null;
  return funcIndex;
}

/**
 * Given a location string that looks like a C++ function (by matching various regular
 * expressions) e.g. "functionName (in library name)", this function will classify it
 * as a C++ function, and add the library resource information if it's not already
 * present.
 */
function _extractCppFunction(extractionInfo, locationString) {
  // Check for a C++ location string.
  var cppMatch =
  // Given:   "functionName (in library name) + 1234"
  // Captures: 1^^^^^^^^^^^     2^^^^^^^^^^^    3^^^
  /^(.*) \(in ([^)]*)\) (\+ [0-9]+)$/.exec(locationString) ||
  // Given:   "functionName (in library name) (1234:1234)"
  // Captures: 1^^^^^^^^^^^     2^^^^^^^^^^^   3^^^^^^^^
  /^(.*) \(in ([^)]*)\) (\(.*:.*\))$/.exec(locationString) ||
  // Given:   "functionName (in library name)"
  // Captures: 1^^^^^^^^^^^     2^^^^^^^^^^^
  /^(.*) \(in ([^)]*)\)$/.exec(locationString);

  if (!cppMatch) {
    return null;
  }
  var funcTable = extractionInfo.funcTable,
      stringTable = extractionInfo.stringTable,
      stringToNewFuncIndex = extractionInfo.stringToNewFuncIndex,
      libNameToResourceIndex = extractionInfo.libNameToResourceIndex,
      resourceTable = extractionInfo.resourceTable;

  var _cppMatch = (0, _slicedToArray3.default)(cppMatch, 3),
      funcNameRaw = _cppMatch[1],
      libraryNameString = _cppMatch[2];

  var funcName = _cleanFunctionName(funcNameRaw);
  var funcNameIndex = stringTable.indexForString(funcName);
  var libraryNameStringIndex = stringTable.indexForString(libraryNameString);
  var funcIndex = stringToNewFuncIndex.get(funcName);
  if (funcIndex !== undefined) {
    // Do not insert a new function.
    return funcIndex;
  }
  var resourceIndex = libNameToResourceIndex.get(libraryNameStringIndex);
  if (resourceIndex === undefined) {
    resourceIndex = resourceTable.length++;
    libNameToResourceIndex.set(libraryNameStringIndex, resourceIndex);
    resourceTable.lib[resourceIndex] = -1;
    resourceTable.name[resourceIndex] = libraryNameStringIndex;
    resourceTable.host[resourceIndex] = undefined;
    resourceTable.type[resourceIndex] = _profileData.resourceTypes.library;
  }

  var newFuncIndex = funcTable.length++;
  funcTable.name[newFuncIndex] = funcNameIndex;
  funcTable.resource[newFuncIndex] = resourceIndex;
  funcTable.address[newFuncIndex] = -1;
  funcTable.isJS[newFuncIndex] = false;
  funcTable.fileName[newFuncIndex] = null;
  funcTable.lineNumber[newFuncIndex] = null;

  return newFuncIndex;
}

/**
 * Given a location string that looks like a JS function (by matching various regular
 * expressions) e.g. "functionName:134", this function will classify it as a JS
 * function, and add the resource information if it's not already present.
 */
function _extractJsFunction(extractionInfo, locationString) {
  // Check for a JS location string.
  var jsMatch =
  // Given:   "functionName (http://script.url/:1234)"
  // Captures: 1^^^^^^^^^^  2^^^^^^^^^^^^^^^^^^ 3^^^
  /^(.*) \((.*):([0-9]+)\)$/.exec(locationString) ||
  // Given:   "http://script.url/:1234"
  // Captures: 2^^^^^^^^^^^^^^^^^ 3^^^
  /^()(.*):([0-9]+)$/.exec(locationString);

  if (!jsMatch) {
    return null;
  }

  var funcTable = extractionInfo.funcTable,
      stringTable = extractionInfo.stringTable,
      resourceTable = extractionInfo.resourceTable,
      originToResourceIndex = extractionInfo.originToResourceIndex;

  // Case 4: JS function - A match was found in the location string in the format
  // of a JS function.

  var _jsMatch = (0, _slicedToArray3.default)(jsMatch, 3),
      funcName = _jsMatch[1],
      rawScriptURI = _jsMatch[2];

  var scriptURI = _getRealScriptURI(rawScriptURI);

  // Figure out the origin and host.
  var origin = void 0;
  var host = void 0;
  try {
    var url = new URL(scriptURI);
    if (!(url.protocol === 'http:' || url.protocol === 'https:')) {
      throw new Error('not a webhost protocol');
    }
    origin = url.origin;
    host = url.host;
  } catch (e) {
    origin = scriptURI;
    host = null;
  }

  var resourceIndex = originToResourceIndex.get(origin);
  if (resourceIndex === undefined) {
    resourceIndex = resourceTable.length++;
    var originStringIndex = stringTable.indexForString(origin);
    originToResourceIndex.set(origin, resourceIndex);
    if (host) {
      // This is a webhost URL.
      resourceTable.lib[resourceIndex] = undefined;
      resourceTable.name[resourceIndex] = originStringIndex;
      resourceTable.host[resourceIndex] = stringTable.indexForString(host);
      resourceTable.type[resourceIndex] = _profileData.resourceTypes.webhost;
    } else {
      // This is a URL, but it doesn't point to something on the web, e.g. a
      // chrome url.
      resourceTable.lib[resourceIndex] = undefined;
      resourceTable.name[resourceIndex] = stringTable.indexForString(scriptURI);
      resourceTable.host[resourceIndex] = undefined;
      resourceTable.type[resourceIndex] = _profileData.resourceTypes.url;
    }
  }

  var funcNameIndex = void 0;
  if (funcName) {
    funcNameIndex = stringTable.indexForString(funcName);
  } else {
    // Some JS frames don't have a function because they are for the
    // initial evaluation of the whole JS file. In that case, use the
    // file name itself, prepended by '(root scope) ', as the function
    // name.
    funcNameIndex = stringTable.indexForString('(root scope) ' + scriptURI);
  }
  var fileName = stringTable.indexForString(scriptURI);
  var lineNumber = parseInt(jsMatch[3], 10);

  // Add the function to the funcTable.
  var funcIndex = funcTable.length++;
  funcTable.name[funcIndex] = funcNameIndex;
  funcTable.resource[funcIndex] = resourceIndex;
  funcTable.address[funcIndex] = -1;
  funcTable.isJS[funcIndex] = true;
  funcTable.fileName[funcIndex] = fileName;
  funcTable.lineNumber[funcIndex] = lineNumber;

  return funcIndex;
}

/**
 * Nothing is known about this function. Add it without any resource information.
 */
function _extractUnknownFunctionType(_ref, locationIndex) {
  var funcTable = _ref.funcTable;

  var index = funcTable.length++;
  funcTable.name[index] = locationIndex;
  funcTable.resource[index] = -1;
  funcTable.address[index] = -1;
  funcTable.isJS[index] = false;
  funcTable.fileName[index] = null;
  funcTable.lineNumber[index] = null;
  return index;
}

/**
 * Explicitly recreate the frame table here to help enforce our assumptions about types.
 */
function _processFrameTable(geckoFrameStruct, funcTable, frameFuncs) {
  return {
    address: frameFuncs.map(function (funcIndex) {
      return funcTable.address[funcIndex];
    }),
    category: geckoFrameStruct.category,
    func: frameFuncs,
    implementation: geckoFrameStruct.implementation,
    line: geckoFrameStruct.line,
    optimizations: geckoFrameStruct.optimizations,
    length: geckoFrameStruct.length
  };
}

/**
 * Explicitly recreate the stack table here to help enforce our assumptions about types.
 */
function _processStackTable(geckoStackTable) {
  return {
    frame: geckoStackTable.frame,
    prefix: geckoStackTable.prefix,
    length: geckoStackTable.length
  };
}

/**
 * Explicitly recreate the markers here to help enforce our assumptions about types.
 */
function _processMarkers(geckoMarkers) {
  return {
    data: geckoMarkers.data.map(function (m) {
      if (m) {
        switch (m.type) {
          /*
           * We want to improve the format of these markers to make them
           * easier to understand and work with, but we can't do that by
           * upgrading the gecko profile since that would break
           * compatibility with telemetry, however we can make some
           * improvements while we process a gecko profile.
           */
          case 'GCSlice':
            {
              var mt = m.timings;
              var timings = Object.assign({}, mt, {
                phase_times: mt.times ? (0, _convertMarkers.convertPhaseTimes)(mt.times) : {}
              });
              delete timings.times;
              return {
                type: 'GCSlice',
                startTime: m.startTime,
                endTime: m.endTime,
                timings: timings
              };
            }
          case 'GCMajor':
            {
              var _mt = m.timings;
              switch (_mt.status) {
                case 'completed':
                  {
                    var _timings = Object.assign({}, _mt, {
                      phase_times: (0, _convertMarkers.convertPhaseTimes)(_mt.totals),
                      mmu_20ms: _mt.mmu_20ms / 100,
                      mmu_50ms: _mt.mmu_50ms / 100
                    });
                    return {
                      type: 'GCMajor',
                      startTime: m.startTime,
                      endTime: m.endTime,
                      timings: _timings
                    };
                  }
                case 'aborted':
                  return {
                    type: 'GCMajor',
                    startTime: m.startTime,
                    endTime: m.endTime,
                    timings: { status: 'aborted' }
                  };
                default:
                  // Flow cannot detect that this switch is complete.
                  console.log('Unknown GCMajor status');
                  throw new Error('Unknown GCMajor status');
              }
            }
          default:
            return m;
        }
      } else {
        return null;
      }
    }),
    name: geckoMarkers.name,
    time: geckoMarkers.time,
    length: geckoMarkers.length
  };
}

/**
 * Explicitly recreate the markers here to help enforce our assumptions about types.
 */
function _processSamples(geckoSamples) {
  return {
    responsiveness: geckoSamples.responsiveness,
    stack: geckoSamples.stack,
    time: geckoSamples.time,
    rss: geckoSamples.rss,
    uss: geckoSamples.uss,
    length: geckoSamples.length
  };
}

/**
 * Convert the given thread into processed form. See docs/gecko-profile-format for more
 * information.
 */
function _processThread(thread, processProfile) {
  var geckoFrameStruct = _toStructOfArrays(thread.frameTable);
  var geckoStackTable = _toStructOfArrays(thread.stackTable);
  var geckoSamples = _toStructOfArrays(thread.samples);
  var geckoMarkers = _toStructOfArrays(_sortByField('time', thread.markers));

  var libs = processProfile.libs,
      pausedRanges = processProfile.pausedRanges,
      meta = processProfile.meta;
  var shutdownTime = meta.shutdownTime;


  var stringTable = new _uniqueStringArray.UniqueStringArray(thread.stringTable);

  var _extractFuncsAndResou = extractFuncsAndResourcesFromFrameLocations(geckoFrameStruct.location, stringTable, libs),
      _extractFuncsAndResou2 = (0, _slicedToArray3.default)(_extractFuncsAndResou, 3),
      funcTable = _extractFuncsAndResou2[0],
      resourceTable = _extractFuncsAndResou2[1],
      frameFuncs = _extractFuncsAndResou2[2];

  var frameTable = _processFrameTable(geckoFrameStruct, funcTable, frameFuncs);
  var stackTable = _processStackTable(geckoStackTable);
  var markers = _processMarkers(geckoMarkers);
  var samples = _processSamples(geckoSamples);

  return {
    name: thread.name,
    processType: thread.processType,
    processStartupTime: 0,
    processShutdownTime: shutdownTime,
    registerTime: thread.registerTime,
    unregisterTime: thread.unregisterTime,
    tid: thread.tid,
    pid: thread.pid,
    libs: libs,
    pausedRanges: pausedRanges,
    frameTable: frameTable,
    funcTable: funcTable,
    resourceTable: resourceTable,
    stackTable: stackTable,
    markers: markers,
    stringTable: stringTable,
    samples: samples
  };
}

/**
 * This function is currently un-typed, and should be handled with properly
 * supporting TaskTracer with types and tests. See issue 438:
 * https://github.com/devtools-html/perf.html/issues/438
 */
function _addProcessedTaskTracerData(tasktracer, result, libs, startTime) {
  var data = tasktracer.data,
      start = tasktracer.start,
      threads = tasktracer.threads;
  var taskTable = result.taskTable,
      tasksIdToTaskIndexMap = result.tasksIdToTaskIndexMap,
      stringTable = result.stringTable,
      addressIndicesByLib = result.addressIndicesByLib,
      addressTable = result.addressTable,
      threadTable = result.threadTable,
      tidToThreadIndexMap = result.tidToThreadIndexMap;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {

    for (var _iterator = threads[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var thread = _step.value;

      var threadIndex = threadTable.length++;
      threadTable.tid[threadIndex] = thread.tid;
      threadTable.name[threadIndex] = stringTable.indexForString(thread.name);
      threadTable.start[threadIndex] = start;
      tidToThreadIndexMap.set(thread.tid, threadIndex);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var addressIndicesByAddress = new Map();

  for (var i = 0; i < data.length; i++) {
    var line = data[i];

    // All lines are of the form <digit> ' ' <taskId> [' ' <additional fields>]*
    // <digit> describes the type of the line.
    var firstSpacePos = 1;
    var secondSpacePos = line.indexOf(' ', firstSpacePos + 1);

    // taskIds are stored as JS strings, because they are originally uint64_t.
    var taskId = line.substring(firstSpacePos + 1, secondSpacePos);
    var taskIndex = tasksIdToTaskIndexMap.get(taskId);
    if (taskIndex === undefined) {
      taskIndex = taskTable.length++;
      tasksIdToTaskIndexMap.set(taskId, taskIndex);
    }

    switch (line.charAt(0)) {
      case '0':
        // DISPATCH, '0 taskId dispatchTime sourceEventId sourceEventType parentTaskId'
        {
          var thirdSpacePos = line.indexOf(' ', secondSpacePos + 1);
          var fourthSpacePos = line.indexOf(' ', thirdSpacePos + 1);
          var fifthSpacePos = line.indexOf(' ', fourthSpacePos + 1);
          taskTable.dispatchTime[taskIndex] = Math.round(+line.substring(secondSpacePos + 1, thirdSpacePos) - startTime);
          taskTable.sourceEventId[taskIndex] = line.substring(thirdSpacePos + 1, fourthSpacePos);
          taskTable.sourceEventType[taskIndex] = line.substring(fourthSpacePos + 1, fifthSpacePos) | 0;
          taskTable.parentTaskId[taskIndex] = line.substring(fifthSpacePos + 1);
        }
        break;
      case '1':
        // BEGIN, '1 taskId beginTime processId threadId'
        {
          var _thirdSpacePos = line.indexOf(' ', secondSpacePos + 1);
          var _fourthSpacePos = line.indexOf(' ', _thirdSpacePos + 1);
          taskTable.beginTime[taskIndex] = Math.round(+line.substring(secondSpacePos + 1, _thirdSpacePos) - startTime);
          taskTable.processId[taskIndex] = line.substring(_thirdSpacePos + 1, _fourthSpacePos);
          var tid = +line.substring(_fourthSpacePos + 1);
          var threadIndex = tidToThreadIndexMap.get(tid);
          if (threadIndex === undefined) {
            threadIndex = threadTable.length++;
            threadTable.tid[threadIndex] = tid;
            threadTable.name[threadIndex] = stringTable.indexForString('Thread ' + tid);
            threadTable.start[threadIndex] = start;
            tidToThreadIndexMap.set(tid, threadIndex);
          }
          taskTable.threadIndex[taskIndex] = threadIndex;
        }
        break;
      case '2':
        // END, '2 taskId endTime'
        taskTable.endTime[taskIndex] = Math.round(+line.substring(secondSpacePos + 1) - startTime);
        break;
      case '3':
        // ADD_LABEL, '3 taskId labelTime "label"'
        {
          var _thirdSpacePos2 = line.indexOf(' ', secondSpacePos + 1);
          var label = line.substring(_thirdSpacePos2 + 1 + 1, line.length - 1);
          if (/^P.+::Msg_/.test(label)) {
            taskTable.ipdlMsg[taskIndex] = stringTable.indexForString(label);
          } else if (taskTable.label[taskIndex] === undefined) {
            taskTable.label[taskIndex] = [stringTable.indexForString(label)];
          } else {
            taskTable.label[taskIndex].push(stringTable.indexForString(label));
          }
        }
        break;
      case '4':
        // GET_VTABLE, '4 taskId address'
        {
          var hexAddress = line.substring(secondSpacePos + 1);
          var address = parseInt(hexAddress, 16);
          var addressIndex = addressIndicesByAddress.get(address);
          if (addressIndex === undefined) {
            addressIndex = addressTable.length++;
            var lib = (0, _symbolication.getClosestLibrary)(libs, address);
            var stringIndex = void 0;
            var addressRelativeToLib = -1;
            if (lib) {
              addressRelativeToLib = address - lib.start;
              stringIndex = stringTable.indexForString('<0x' + addressRelativeToLib.toString(16) + ' in ' + lib.debugName + '>');
              var addressIndicesForThisLib = addressIndicesByLib.get(lib);
              if (addressIndicesForThisLib === undefined) {
                addressIndicesForThisLib = [];
                addressIndicesByLib.set(lib, addressIndicesForThisLib);
              }
              addressIndicesForThisLib.push(addressIndex);
            } else {
              stringIndex = stringTable.indexForString('<unknown 0x' + hexAddress + '>');
            }
            addressIndicesByAddress.set(address, addressIndex);
            addressTable.address[addressIndex] = addressRelativeToLib;
            addressTable.className[addressIndex] = stringIndex;
            addressTable.lib[addressIndex] = lib;
          }
          taskTable.address[taskIndex] = addressIndex;
        }
        break;
      default:
        break;
    }
  }
}

/**
 * Adjust the "time" field by the given delta. This is needed when integrating
 * subprocess profiles into the parent process profile; each profile's process
 * has its own timebase, and we don't want to keep converting timestamps when
 * we deal with the integrated profile.
 */
function _adjustSampleTimestamps(samples, delta) {
  return Object.assign({}, samples, {
    time: samples.time.map(function (time) {
      return time + delta;
    })
  });
}

/**
 * Adjust all timestamp fields by the given delta. This is needed when
 * integrating subprocess profiles into the parent process profile; each
 * profile's process has its own timebase, and we don't want to keep
 * converting timestamps when we deal with the integrated profile.
 */
function _adjustMarkerTimestamps(markers, delta) {
  return Object.assign({}, markers, {
    time: markers.time.map(function (time) {
      return time + delta;
    }),
    data: markers.data.map(function (data) {
      if (!data) {
        return data;
      }
      var newData = (0, _flow.immutableUpdate)(data);
      if ('startTime' in newData) {
        newData.startTime += delta;
      }
      if ('endTime' in newData) {
        newData.endTime += delta;
      }
      if (newData.type === 'DOMEvent' && 'timeStamp' in newData) {
        newData.timeStamp += delta;
      }
      return newData;
    })
  });
}

/**
 * Convert a profile from the Gecko format into the processed format.
 * Throws an exception if it encounters an incompatible profile.
 * For a description of the processed format, look at docs/gecko-profile-format.md
 */
function _processProfile(geckoProfile) {
  // Handle profiles from older versions of Gecko. This call might throw an
  // exception.
  (0, _geckoProfileVersioning.upgradeGeckoProfileToCurrentVersion)(geckoProfile);

  var libs = geckoProfile.libs;
  var threads = [];
  var tasktracer = (0, _taskTracer.getEmptyTaskTracerData)();

  if (geckoProfile.tasktracer && geckoProfile.tasktracer.threads) {
    _addProcessedTaskTracerData(geckoProfile.tasktracer, tasktracer, libs, geckoProfile.meta.startTime);
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = geckoProfile.threads[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var thread = _step2.value;

      threads.push(_processThread(thread, geckoProfile));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _loop2 = function _loop2(subprocessProfile) {
    var subprocessLibs = subprocessProfile.libs;
    var adjustTimestampsBy = subprocessProfile.meta.startTime - geckoProfile.meta.startTime;
    threads = threads.concat(subprocessProfile.threads.map(function (thread) {
      var newThread = _processThread(thread, subprocessProfile);
      newThread.samples = _adjustSampleTimestamps(newThread.samples, adjustTimestampsBy);
      newThread.markers = _adjustMarkerTimestamps(newThread.markers, adjustTimestampsBy);
      newThread.processStartupTime += adjustTimestampsBy;
      if (newThread.processShutdownTime !== null) {
        newThread.processShutdownTime += adjustTimestampsBy;
      }
      newThread.registerTime += adjustTimestampsBy;
      if (newThread.unregisterTime !== null) {
        newThread.unregisterTime += adjustTimestampsBy;
      }
      return newThread;
    }));
    if (subprocessProfile.tasktracer && subprocessProfile.tasktracer.threads) {
      _addProcessedTaskTracerData(subprocessProfile.tasktracer, tasktracer, subprocessLibs, geckoProfile.meta.startTime);
    }
  };

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = geckoProfile.processes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var subprocessProfile = _step3.value;

      _loop2(subprocessProfile);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  var meta = {
    interval: geckoProfile.meta.interval,
    startTime: geckoProfile.meta.startTime,
    abi: geckoProfile.meta.abi,
    misc: geckoProfile.meta.misc,
    oscpu: geckoProfile.meta.oscpu,
    platform: geckoProfile.meta.platform,
    processType: geckoProfile.meta.processType,
    product: geckoProfile.meta.product,
    stackwalk: geckoProfile.meta.stackwalk,
    toolkit: geckoProfile.meta.toolkit,
    version: geckoProfile.meta.version,
    preprocessedProfileVersion: _processedProfileVersioning.CURRENT_VERSION
  };

  var result = {
    meta: meta,
    threads: threads,
    tasktracer: tasktracer
  };
  return result;
}

/**
 * Take a processed profile and remove any non-serializable classes such as the
 * StringTable class.
 */
exports.processProfile = _processProfile;
function serializeProfile(profile) {
  // stringTable -> stringArray
  var newProfile = Object.assign({}, profile, {
    threads: profile.threads.map(function (thread) {
      var stringTable = thread.stringTable;
      var newThread = Object.assign({}, thread);
      delete newThread.stringTable;
      newThread.stringArray = stringTable.serializeToArray();
      return newThread;
    })
  });
  if ('tasktracer' in newProfile) {
    var newTasktracer = Object.assign({}, newProfile.tasktracer);
    var _stringTable = newTasktracer.stringTable;
    delete newTasktracer.stringTable;
    newTasktracer.stringArray = _stringTable.serializeToArray();
    newProfile.tasktracer = newTasktracer;
  }
  return JSON.stringify(newProfile);
}

/**
 * Take a serialized processed profile from some saved source, and re-initialize
 * any non-serializable classes.
 */
function _unserializeProfile(profile) {
  // stringArray -> stringTable
  var newProfile = Object.assign({}, profile, {
    threads: profile.threads.map(function (thread) {
      var stringArray = thread.stringArray;
      var newThread = Object.assign({}, thread);
      delete newThread.stringArray;
      newThread.stringTable = new _uniqueStringArray.UniqueStringArray(stringArray);
      return newThread;
    })
  });
  if ('tasktracer' in newProfile) {
    var newTaskTracer = Object.assign({}, newProfile.tasktracer);
    var stringArray = newTaskTracer.stringArray;
    delete newTaskTracer.stringArray;
    newTaskTracer.stringTable = new _uniqueStringArray.UniqueStringArray(stringArray);
    newProfile.tasktracer = newTaskTracer;
  }
  return newProfile;
}

/**
 * Take some arbitrary profile file from some data source, and turn it into
 * the processed profile format.
 */
function unserializeProfileOfArbitraryFormat(jsonStringOrObject) {
  try {
    var profile = typeof jsonStringOrObject === 'string' ? JSON.parse(jsonStringOrObject) : jsonStringOrObject;
    if ((0, _oldCleopatraProfileFormat.isOldCleopatraFormat)(profile)) {
      profile = (0, _oldCleopatraProfileFormat.convertOldCleopatraProfile)(profile); // outputs preprocessed profile
    }
    if ((0, _processedProfileVersioning.isProcessedProfile)(profile)) {
      (0, _processedProfileVersioning.upgradeProcessedProfileToCurrentVersion)(profile);
      return _unserializeProfile(profile);
    }
    // Else: Treat it as a Gecko profile and just attempt to process it.
    return _processProfile(profile);
  } catch (e) {
    throw new Error('Unserializing the profile failed: ' + e);
  }
}

var ProfileProcessor = exports.ProfileProcessor = function () {
  function ProfileProcessor() {
    (0, _classCallCheck3.default)(this, ProfileProcessor);
  }

  (0, _createClass3.default)(ProfileProcessor, [{
    key: 'processProfile',
    value: function processProfile(geckoProfile) {
      return new Promise(function (resolve) {
        resolve(_processProfile(geckoProfile));
      });
    }
  }]);
  return ProfileProcessor;
}();

var ProfileProcessorThreaded = exports.ProfileProcessorThreaded = (0, _promiseWorker.provideHostSide)('profile-processor-worker.js', ['processProfile']);

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compress = compress;
exports.decompress = decompress;

var _workerFactory = __webpack_require__(129);

var _workerFactory2 = _interopRequireDefault(_workerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var zeeWorker = new _workerFactory2.default('zee-worker'); /* This Source Code Form is subject to the terms of the Mozilla Public
                                                            * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                            * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var zeeCallbacks = [];

zeeWorker.onmessage = function (msg) {
  zeeCallbacks[msg.data.callbackID][msg.data.type](msg.data.data);
  zeeCallbacks[msg.data.callbackID] = null;
};

// Neuters data's buffer, if data is a typed array.
function compress(data, compressionLevel) {
  var arrayData = typeof data === 'string' ? new TextEncoder().encode(data) : data;
  return new Promise(function (resolve, reject) {
    zeeWorker.postMessage({
      request: 'compress',
      data: arrayData,
      compressionLevel: compressionLevel,
      callbackID: zeeCallbacks.length
    }, [arrayData.buffer]);
    zeeCallbacks.push({
      success: resolve,
      error: reject
    });
  });
}

// Neuters data's buffer, if data is a typed array.
function decompress(data) {
  return new Promise(function (resolve, reject) {
    zeeWorker.postMessage({
      request: 'decompress',
      data: data,
      callbackID: zeeCallbacks.length
    }, [data.buffer]);
    zeeCallbacks.push({
      success: resolve,
      error: reject
    });
  });
}

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _bisection = __webpack_require__(121);

var _bisection2 = _interopRequireDefault(_bisection);

var _clamp = __webpack_require__(130);

var _clamp2 = _interopRequireDefault(_clamp);

var _arrayMove = __webpack_require__(409);

var _arrayMove2 = _interopRequireDefault(_arrayMove);

var _cssGeometryTools = __webpack_require__(196);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Reorderable = function (_PureComponent) {
  (0, _inherits3.default)(Reorderable, _PureComponent);

  function Reorderable(props) {
    (0, _classCallCheck3.default)(this, Reorderable);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Reorderable.__proto__ || Object.getPrototypeOf(Reorderable)).call(this, props));

    _this._setContainerRef = _this._setContainerRef.bind(_this);
    _this._onMouseDown = _this._onMouseDown.bind(_this);
    _this.state = {
      phase: 'RESTING',
      manipulatingIndex: -1,
      destinationIndex: -1,
      manipulationDelta: 0,
      adjustPrecedingBy: 0,
      adjustSucceedingBy: 0,
      finalOffset: 0
    };

    _this._xy = {
      horizontal: {
        pageXY: 'pageX',
        translateXY: 'translateX',
        lefttop: 'left',
        rightbottom: 'right'
      },
      vertical: {
        pageXY: 'pageY',
        translateXY: 'translateY',
        lefttop: 'top',
        rightbottom: 'bottom'
      }
    };
    return _this;
  }

  (0, _createClass3.default)(Reorderable, [{
    key: '_setContainerRef',
    value: function _setContainerRef(container) {
      this._container = container;
    }
  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(event) {
      if (!this._container || event.target === this._container || !(event.target instanceof HTMLElement) ||
      // Only run for left clicks.
      event.button !== 0) {
        return;
      }
      // Flow: Coerce the event target into an HTMLElement in combination with the above
      // `instanceof` statement.
      var element = event.target;
      if (!element.matches('.grippy, .grippy *')) {
        // Don't handle this event. Only clicking inside a grippy should start the dragging process.
        return;
      }

      while (element instanceof HTMLElement && element.parentNode !== this._container) {
        element = element.parentNode;
      }

      if (!(element instanceof HTMLElement)) {
        return;
      }

      // Double check the container still exists for flow.
      if (this._container) {
        this._startDraggingElement(this._container, element, event);
      }
    }
  }, {
    key: '_getXY',
    value: function _getXY() {
      return this._xy[this.props.orient];
    }
  }, {
    key: '_startDraggingElement',
    value: function _startDraggingElement(container, element, event) {
      var _this2 = this;

      var xy = this._getXY();
      // Coerce the SyntheticMouseEvent and DOMRect instances into an object literals
      // to dynamically access certain properties.
      var mouseDownPos = event[xy.pageXY];
      var elementRect = (0, _cssGeometryTools.getMarginRect)(element);
      var containerRect = (0, _cssGeometryTools.getContentRect)(container);
      var spaceBefore = elementRect[xy.lefttop] - containerRect[xy.lefttop];
      var spaceAfter = containerRect[xy.rightbottom] - elementRect[xy.rightbottom];

      var children = Array.from(container.children);
      if (children.length < 2) {
        return;
      }

      var isBefore = true;
      var elementIndex = -1;
      var offsets = children.map(function (child, childIndex) {
        if (child === element) {
          elementIndex = childIndex;
          isBefore = false;
          return 0;
        }
        var childRect = (0, _cssGeometryTools.getMarginRect)(child);
        return isBefore ? childRect[xy.lefttop] - elementRect[xy.lefttop] : childRect[xy.rightbottom] - elementRect[xy.rightbottom];
      });

      if (elementIndex === -1) {
        return;
      }

      var midPoints = offsets.map(function (offset, childIndex) {
        if (childIndex === offsets.length - 1) {
          // This will be popped off at the end.
          return 0;
        }
        return (offsets[childIndex + 1] + offset) / 2;
      });
      midPoints.pop();

      var nextEdgeAfterElement = elementIndex === children.length - 1 ? containerRect[xy.rightbottom] : (0, _cssGeometryTools.getMarginRect)(children[elementIndex + 1])[xy.lefttop];

      var nextEdgeBeforeElement = elementIndex === 0 ? containerRect[xy.lefttop] : (0, _cssGeometryTools.getMarginRect)(children[elementIndex - 1])[xy.rightbottom];

      this.setState({
        phase: 'MANIPULATING',
        manipulatingIndex: elementIndex,
        manipulationDelta: 0,
        destinationIndex: elementIndex,
        adjustPrecedingBy: nextEdgeAfterElement - elementRect[xy.lefttop],
        adjustSucceedingBy: nextEdgeBeforeElement - elementRect[xy.rightbottom]
      });

      var mouseMoveListener = function mouseMoveListener(event) {
        var delta = (0, _clamp2.default)(event[xy.pageXY] - mouseDownPos, -spaceBefore, spaceAfter);
        _this2.setState({
          manipulationDelta: delta,
          destinationIndex: _bisection2.default.right(midPoints, delta)
        });
      };
      var mouseUpListener = function mouseUpListener(event) {
        mouseMoveListener(event);
        var destinationIndex = _this2.state.destinationIndex;
        _this2.setState({
          phase: 'FINISHING',
          finalOffset: offsets[destinationIndex]
        });
        window.removeEventListener('mousemove', mouseMoveListener, true);
        window.removeEventListener('mouseup', mouseUpListener, true);
        setTimeout(function () {
          _this2.setState({
            phase: 'RESTING'
          });
          if (elementIndex !== destinationIndex) {
            var newOrder = (0, _arrayMove2.default)(_this2.props.order, elementIndex, destinationIndex);
            _this2.props.onChangeOrder(newOrder);
          }
        }, 200);
      };
      window.addEventListener('mousemove', mouseMoveListener, true);
      window.addEventListener('mouseup', mouseUpListener, true);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          className = _props.className,
          order = _props.order;

      var children = _react2.default.Children.toArray(this.props.children);
      var orderedChildren = order.map(function (childIndex) {
        return children[childIndex];
      });
      var TagName = this.props.tagName;
      var xy = this._getXY();

      if (this.state.phase === 'RESTING') {
        return _react2.default.createElement(
          TagName,
          {
            className: className,
            onMouseDown: this._onMouseDown,
            ref: this._setContainerRef
          },
          orderedChildren
        );
      }

      var _state = this.state,
          phase = _state.phase,
          manipulatingIndex = _state.manipulatingIndex,
          destinationIndex = _state.destinationIndex,
          adjustPrecedingBy = _state.adjustPrecedingBy,
          adjustSucceedingBy = _state.adjustSucceedingBy;

      var adjustedClassName = phase === 'MANIPULATING' ? className + ' beingReordered' : className;
      return _react2.default.createElement(
        TagName,
        { className: adjustedClassName, ref: this._setContainerRef },
        orderedChildren.map(function (child, childIndex) {
          var style = {
            transition: '200ms ease-in-out transform',
            willChange: 'transform',
            position: 'relative',
            zIndex: '1',
            transform: ''
          };
          if (childIndex === manipulatingIndex) {
            style.zIndex = '2';
            if (phase === 'MANIPULATING') {
              delete style.transition;
              style.transform = xy.translateXY + '(' + _this3.state.manipulationDelta + 'px)';
            } else {
              style.transform = xy.translateXY + '(' + _this3.state.finalOffset + 'px)';
            }
          } else if (childIndex < manipulatingIndex && childIndex >= destinationIndex) {
            style.transform = xy.translateXY + '(' + adjustPrecedingBy + 'px)';
          } else if (childIndex > manipulatingIndex && childIndex <= destinationIndex) {
            style.transform = xy.translateXY + '(' + adjustSucceedingBy + 'px)';
          }
          return _react2.default.cloneElement(child, { style: style });
        })
      );
    }
  }]);
  return Reorderable;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = Reorderable;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getContentRect = getContentRect;
exports.getMarginRect = getMarginRect;

var _domRect = __webpack_require__(410);

var _domRect2 = _interopRequireDefault(_domRect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return a float number for the number of CSS pixels from the computed style
 * of the supplied CSS property on the supplied element.
 */

// Imported interfaces incorrectly throw an error in eslint:
// https://github.com/benmosher/eslint-plugin-import/issues/726
function getFloatStyle(element, cssProperty) {
  // flow doesn't know about getComputedStyle.
  var getComputedStyle = window.getComputedStyle;
  return parseFloat(getComputedStyle(element).getPropertyValue(cssProperty)) || 0;
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


function subtractBorder(element, rect) {
  var borderTop = getFloatStyle(element, 'border-top-width');
  var borderRight = getFloatStyle(element, 'border-right-width');
  var borderBottom = getFloatStyle(element, 'border-bottom-width');
  var borderLeft = getFloatStyle(element, 'border-left-width');

  return new _domRect2.default(rect.left + borderLeft, rect.top + borderTop, rect.width - borderLeft - borderRight, rect.height - borderTop - borderBottom);
}

function subtractPadding(element, rect) {
  var paddingTop = getFloatStyle(element, 'padding-top');
  var paddingRight = getFloatStyle(element, 'padding-right');
  var paddingBottom = getFloatStyle(element, 'padding-bottom');
  var paddingLeft = getFloatStyle(element, 'padding-left');
  return new _domRect2.default(rect.left + paddingLeft, rect.top + paddingTop, rect.width - paddingLeft - paddingRight, rect.height - paddingTop - paddingBottom);
}

function addMargin(element, rect) {
  var marginTop = getFloatStyle(element, 'margin-top');
  var marginRight = getFloatStyle(element, 'margin-right');
  var marginBottom = getFloatStyle(element, 'margin-bottom');
  var marginLeft = getFloatStyle(element, 'margin-left');
  return new _domRect2.default(rect.left - marginLeft, rect.top - marginTop, rect.width + marginLeft + marginRight, rect.height + marginTop + marginBottom);
}

/**
 * Returns a DOMRect for the content rect of the element, in float CSS pixels.
 * Returns an empty rect if the object has zero or more than one client rects.
 */
function getContentRect(element) {
  var clientRects = element.getClientRects();
  if (clientRects.length !== 1) {
    return new _domRect2.default();
  }

  var borderRect = clientRects[0];
  return subtractPadding(element, subtractBorder(element, borderRect));
}

/**
 * Returns a DOMRect for the margin rect of the element, in float CSS pixels.
 * Returns an empty rect if the object has zero or more than one client rects.
 */
function getMarginRect(element) {
  var clientRects = element.getClientRects();
  if (clientRects.length !== 1) {
    return new _domRect2.default();
  }

  var borderRect = clientRects[0];
  return addMargin(element, borderRect);
}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = summaryViewReducer;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function summaryViewReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { summary: null, expanded: null };
  var action = arguments[1];

  switch (action.type) {
    case 'PROFILE_SUMMARY_PROCESSED':
      {
        return Object.assign({}, state, {
          summary: action.summary,
          expanded: new Set()
        });
      }
    case 'PROFILE_SUMMARY_EXPAND':
      {
        var expanded = new Set(state.expanded);
        expanded.add(action.threadIndex);
        return Object.assign({}, state, { expanded: expanded });
      }
    case 'PROFILE_SUMMARY_COLLAPSE':
      {
        var _expanded = new Set(state.expanded);
        _expanded.delete(action.threadIndex);
        return Object.assign({}, state, { expanded: _expanded });
      }
    default:
      return state;
  }
}

var getSummaryView = exports.getSummaryView = function getSummaryView(state) {
  return state.summaryView;
};

var getProfileSummaries = exports.getProfileSummaries = function getProfileSummaries(state) {
  return getSummaryView(state).summary;
};

var getProfileExpandedSummaries = exports.getProfileExpandedSummaries = function getProfileExpandedSummaries(state) {
  return getSummaryView(state).expanded;
};

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.profileSummaryProcessed = profileSummaryProcessed;
exports.expandProfileSummaryThread = expandProfileSummaryThread;
exports.collapseProfileSummaryThread = collapseProfileSummaryThread;
function profileSummaryProcessed(summary) {
  return {
    type: 'PROFILE_SUMMARY_PROCESSED',
    summary: summary
  };
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function expandProfileSummaryThread(threadIndex) {
  return {
    type: 'PROFILE_SUMMARY_EXPAND',
    threadIndex: threadIndex
  };
}

function collapseProfileSummaryThread(threadIndex) {
  return {
    type: 'PROFILE_SUMMARY_COLLAPSE',
    threadIndex: threadIndex
  };
}

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _VirtualList = __webpack_require__(423);

var _VirtualList2 = _interopRequireDefault(_VirtualList);

var _StyleDef = __webpack_require__(425);

var _ContextMenuTrigger = __webpack_require__(200);

var _ContextMenuTrigger2 = _interopRequireDefault(_ContextMenuTrigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TreeViewHeader = function TreeViewHeader(_ref) {
  var fixedColumns = _ref.fixedColumns,
      mainColumn = _ref.mainColumn;
  return _react2.default.createElement(
    'div',
    { className: 'treeViewHeader' },
    fixedColumns.map(function (col) {
      return _react2.default.createElement(
        'span',
        {
          className: 'treeViewHeaderColumn treeViewFixedColumn ' + col.propName,
          key: col.propName
        },
        col.title
      );
    }),
    _react2.default.createElement(
      'span',
      {
        className: 'treeViewHeaderColumn treeViewMainColumn ' + mainColumn.propName
      },
      mainColumn.title
    )
  );
}; /* This Source Code Form is subject to the terms of the Mozilla Public
    * License, v. 2.0. If a copy of the MPL was not distributed with this
    * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function reactStringWithHighlightedSubstrings(string, substring, className) {
  if (!substring) {
    return string;
  }
  var lowercaseString = string.toLowerCase();
  var result = [];
  var startAt = 0;
  var nextOccurrence = -1;
  while ((nextOccurrence = lowercaseString.indexOf(substring, startAt)) !== -1) {
    var afterNextOccurrence = nextOccurrence + substring.length;
    result.push(string.substring(startAt, nextOccurrence));
    result.push(_react2.default.createElement(
      'span',
      { key: nextOccurrence, className: className },
      string.substring(nextOccurrence, afterNextOccurrence)
    ));
    startAt = afterNextOccurrence;
  }
  result.push(string.substring(startAt));
  return result;
}

var TreeViewRowFixedColumns = function (_PureComponent) {
  (0, _inherits3.default)(TreeViewRowFixedColumns, _PureComponent);

  function TreeViewRowFixedColumns(props) {
    (0, _classCallCheck3.default)(this, TreeViewRowFixedColumns);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TreeViewRowFixedColumns.__proto__ || Object.getPrototypeOf(TreeViewRowFixedColumns)).call(this, props));

    _this._onClick = _this._onClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(TreeViewRowFixedColumns, [{
    key: '_onClick',
    value: function _onClick(event) {
      var _props = this.props,
          nodeId = _props.nodeId,
          onClick = _props.onClick;

      onClick(nodeId, event);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          node = _props2.node,
          columns = _props2.columns,
          index = _props2.index,
          selected = _props2.selected,
          highlightString = _props2.highlightString;

      var evenOddClassName = index % 2 === 0 ? 'even' : 'odd';
      return _react2.default.createElement(
        'div',
        {
          className: 'treeViewRow treeViewRowFixedColumns ' + evenOddClassName + ' ' + (selected ? 'selected' : ''),
          style: { height: '16px' },
          onMouseDown: this._onClick
        },
        columns.map(function (col) {
          var RenderComponent = col.component;

          return _react2.default.createElement(
            'span',
            {
              className: 'treeViewRowColumn treeViewFixedColumn ' + col.propName,
              key: col.propName
            },
            RenderComponent ? _react2.default.createElement(RenderComponent, { node: node }) : reactStringWithHighlightedSubstrings(node[col.propName], highlightString, 'treeViewHighlighting')
          );
        })
      );
    }
  }]);
  return TreeViewRowFixedColumns;
}(_react.PureComponent);

var TreeViewRowScrolledColumns = function (_PureComponent2) {
  (0, _inherits3.default)(TreeViewRowScrolledColumns, _PureComponent2);

  function TreeViewRowScrolledColumns(props) {
    (0, _classCallCheck3.default)(this, TreeViewRowScrolledColumns);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (TreeViewRowScrolledColumns.__proto__ || Object.getPrototypeOf(TreeViewRowScrolledColumns)).call(this, props));

    _this2._onClick = _this2._onClick.bind(_this2);
    return _this2;
  }

  (0, _createClass3.default)(TreeViewRowScrolledColumns, [{
    key: '_onClick',
    value: function _onClick(event) {
      var _props3 = this.props,
          nodeId = _props3.nodeId,
          isExpanded = _props3.isExpanded,
          onToggle = _props3.onToggle,
          onClick = _props3.onClick,
          onAppendageButtonClick = _props3.onAppendageButtonClick;

      if (event.target.classList.contains('treeRowToggleButton')) {
        onToggle(nodeId, !isExpanded, event.altKey === true);
      } else if (event.target.classList.contains('treeViewRowAppendageButton')) {
        if (onAppendageButtonClick) {
          onAppendageButtonClick(nodeId, event.target.getAttribute('data-appendage-button-name') || '');
        }
      } else {
        onClick(nodeId, event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          node = _props4.node,
          depth = _props4.depth,
          mainColumn = _props4.mainColumn,
          appendageColumn = _props4.appendageColumn,
          index = _props4.index,
          canBeExpanded = _props4.canBeExpanded,
          isExpanded = _props4.isExpanded,
          selected = _props4.selected,
          highlightString = _props4.highlightString,
          appendageButtons = _props4.appendageButtons;

      var evenOddClassName = index % 2 === 0 ? 'even' : 'odd';

      return _react2.default.createElement(
        'div',
        {
          className: 'treeViewRow treeViewRowScrolledColumns ' + evenOddClassName + ' ' + (selected ? 'selected' : '') + ' ' + (node.dim ? 'dim' : ''),
          style: { height: '16px' },
          onMouseDown: this._onClick
        },
        _react2.default.createElement('span', {
          className: 'treeRowIndentSpacer',
          style: { width: depth * 10 + 'px' }
        }),
        _react2.default.createElement('span', {
          className: 'treeRowToggleButton ' + (isExpanded ? 'expanded' : 'collapsed') + ' ' + (canBeExpanded ? 'canBeExpanded' : 'leaf')
        }),
        _react2.default.createElement(
          'span',
          {
            className: 'treeViewRowColumn treeViewMainColumn ' + mainColumn.propName
          },
          reactStringWithHighlightedSubstrings(node[mainColumn.propName], highlightString, 'treeViewHighlighting')
        ),
        appendageColumn ? _react2.default.createElement(
          'span',
          {
            className: 'treeViewRowColumn treeViewAppendageColumn ' + appendageColumn.propName
          },
          reactStringWithHighlightedSubstrings(node[appendageColumn.propName], highlightString, 'treeViewHighlighting')
        ) : null,
        appendageButtons ? appendageButtons.map(function (buttonName) {
          return _react2.default.createElement('input', {
            className: (0, _classnames2.default)('treeViewRowAppendageButton', buttonName),
            type: 'button',
            key: buttonName,
            'data-appendage-button-name': buttonName,
            value: ''
          });
        }) : null
      );
    }
  }]);
  return TreeViewRowScrolledColumns;
}(_react.PureComponent);

var TreeView = function (_PureComponent3) {
  (0, _inherits3.default)(TreeView, _PureComponent3);

  function TreeView(props) {
    (0, _classCallCheck3.default)(this, TreeView);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (TreeView.__proto__ || Object.getPrototypeOf(TreeView)).call(this, props));

    _this3._renderRow = _this3._renderRow.bind(_this3);
    _this3._toggle = _this3._toggle.bind(_this3);
    _this3._onKeyDown = _this3._onKeyDown.bind(_this3);
    _this3._onCopy = _this3._onCopy.bind(_this3);
    _this3._onRowClicked = _this3._onRowClicked.bind(_this3);
    _this3._specialItems = [props.selectedNodeId];
    _this3._visibleRows = _this3._getAllVisibleRows(props);
    _this3._list = null;
    return _this3;
  }

  (0, _createClass3.default)(TreeView, [{
    key: 'scrollSelectionIntoView',
    value: function scrollSelectionIntoView() {
      var _props5 = this.props,
          selectedNodeId = _props5.selectedNodeId,
          tree = _props5.tree;

      if (this._list && selectedNodeId !== null) {
        var list = this._list; // this temp variable so that flow knows that it's non-null
        var rowIndex = this._visibleRows.indexOf(selectedNodeId);
        var _depth = tree.getDepth(selectedNodeId);
        list.scrollItemIntoView(rowIndex, _depth * 10);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.selectedNodeId !== this.props.selectedNodeId) {
        this._specialItems = [nextProps.selectedNodeId];
      }
      if (nextProps.tree !== this.props.tree || nextProps.expandedNodeIds !== this.props.expandedNodeIds) {
        this._visibleRows = this._getAllVisibleRows(nextProps);
      }
    }
  }, {
    key: '_renderRow',
    value: function _renderRow(nodeId, index, columnIndex) {
      var _props6 = this.props,
          tree = _props6.tree,
          expandedNodeIds = _props6.expandedNodeIds,
          fixedColumns = _props6.fixedColumns,
          mainColumn = _props6.mainColumn,
          appendageColumn = _props6.appendageColumn,
          selectedNodeId = _props6.selectedNodeId,
          highlightString = _props6.highlightString,
          appendageButtons = _props6.appendageButtons,
          onAppendageButtonClick = _props6.onAppendageButtonClick;

      var node = tree.getNode(nodeId);
      if (columnIndex === 0) {
        return _react2.default.createElement(TreeViewRowFixedColumns, {
          node: node,
          columns: fixedColumns,
          nodeId: nodeId,
          index: index,
          selected: nodeId === selectedNodeId,
          onClick: this._onRowClicked,
          highlightString: highlightString
        });
      }
      var canBeExpanded = tree.hasChildren(nodeId);
      var isExpanded = expandedNodeIds.includes(nodeId);
      return _react2.default.createElement(TreeViewRowScrolledColumns, {
        node: node,
        mainColumn: mainColumn,
        appendageColumn: appendageColumn,
        appendageButtons: appendageButtons,
        depth: tree.getDepth(nodeId),
        nodeId: nodeId,
        index: index,
        canBeExpanded: canBeExpanded,
        isExpanded: isExpanded,
        onToggle: this._toggle,
        selected: nodeId === selectedNodeId,
        onClick: this._onRowClicked,
        onAppendageButtonClick: onAppendageButtonClick,
        highlightString: highlightString
      });
    }
  }, {
    key: '_addVisibleRowsFromNode',
    value: function _addVisibleRowsFromNode(props, arr, nodeId, depth) {
      arr.push(nodeId);
      if (!props.expandedNodeIds.includes(nodeId)) {
        return;
      }
      var children = props.tree.getChildren(nodeId);
      for (var i = 0; i < children.length; i++) {
        this._addVisibleRowsFromNode(props, arr, children[i], depth + 1);
      }
    }
  }, {
    key: '_getAllVisibleRows',
    value: function _getAllVisibleRows(props) {
      var roots = props.tree.getRoots();
      var allRows = [];
      for (var i = 0; i < roots.length; i++) {
        this._addVisibleRowsFromNode(props, allRows, roots[i], 0);
      }
      return allRows;
    }
  }, {
    key: '_isCollapsed',
    value: function _isCollapsed(nodeId) {
      return !this.props.expandedNodeIds.includes(nodeId);
    }
  }, {
    key: '_addAllDescendants',
    value: function _addAllDescendants(newSet, nodeId) {
      var _this4 = this;

      this.props.tree.getChildren(nodeId).forEach(function (childId) {
        newSet.add(childId);
        _this4._addAllDescendants(newSet, childId);
      });
    }
  }, {
    key: '_toggle',
    value: function _toggle(nodeId) {
      var newExpanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._isCollapsed(nodeId);
      var toggleAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var newSet = new Set(this.props.expandedNodeIds);
      if (newExpanded) {
        newSet.add(nodeId);
        if (toggleAll) {
          this._addAllDescendants(newSet, nodeId);
        }
      } else {
        newSet.delete(nodeId);
      }
      this.props.onExpandedNodesChange(Array.from(newSet.values()));
    }
  }, {
    key: '_toggleAll',
    value: function _toggleAll(nodeId) {
      var newExpanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._isCollapsed(nodeId);

      this._toggle(nodeId, newExpanded, true);
    }
  }, {
    key: '_select',
    value: function _select(nodeId) {
      this.props.onSelectionChange(nodeId);
    }
  }, {
    key: '_onRowClicked',
    value: function _onRowClicked(nodeId, event) {
      this._select(nodeId);
      if (event.detail === 2 && event.button === 0) {
        // double click
        this._toggle(nodeId);
      }
    }
  }, {
    key: '_onCopy',
    value: function _onCopy(event) {
      event.preventDefault();
      var _props7 = this.props,
          tree = _props7.tree,
          selectedNodeId = _props7.selectedNodeId,
          mainColumn = _props7.mainColumn;

      if (selectedNodeId) {
        var _node = tree.getNode(selectedNodeId);
        event.clipboardData.setData('text/plain', _node[mainColumn.propName]);
      }
    }
  }, {
    key: '_onKeyDown',
    value: function _onKeyDown(event) {
      if (event.ctrlKey || event.altKey || event.metaKey) {
        return;
      }

      if (event.keyCode < 37 || event.keyCode > 40) {
        if (event.keyCode !== 0 || String.fromCharCode(event.charCode) !== '*') {
          return;
        }
      }
      event.stopPropagation();
      event.preventDefault();

      var selected = this.props.selectedNodeId;
      var visibleRows = this._getAllVisibleRows(this.props);
      var selectedRowIndex = visibleRows.findIndex(function (nodeId) {
        return nodeId === selected;
      });

      if (selected === null || selectedRowIndex === -1) {
        // the first condition is redundant, but it makes flow happy
        this._select(visibleRows[0]);
        return;
      }

      if (event.keyCode === 37) {
        // KEY_LEFT
        var isCollapsed = this._isCollapsed(selected);
        if (!isCollapsed) {
          this._toggle(selected);
        } else {
          var parent = this.props.tree.getParent(selected);
          if (parent !== -1) {
            this._select(parent);
          }
        }
      } else if (event.keyCode === 38) {
        // KEY_UP
        if (selectedRowIndex > 0) {
          this._select(visibleRows[selectedRowIndex - 1]);
        }
      } else if (event.keyCode === 39) {
        // KEY_RIGHT
        var _isCollapsed2 = this._isCollapsed(selected);
        if (_isCollapsed2) {
          this._toggle(selected);
        } else {
          // Do KEY_DOWN only if the next element is a child
          if (this.props.tree.hasChildren(selected)) {
            this._select(this.props.tree.getChildren(selected)[0]);
          }
        }
      } else if (event.keyCode === 40) {
        // KEY_DOWN
        if (selectedRowIndex < visibleRows.length - 1) {
          this._select(visibleRows[selectedRowIndex + 1]);
        }
      } else if (String.fromCharCode(event.charCode) === '*') {
        this._toggleAll(selected);
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this._list) {
        this._list.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props8 = this.props,
          fixedColumns = _props8.fixedColumns,
          mainColumn = _props8.mainColumn,
          disableOverscan = _props8.disableOverscan,
          contextMenu = _props8.contextMenu,
          contextMenuId = _props8.contextMenuId,
          icons = _props8.icons;

      return _react2.default.createElement(
        'div',
        { className: 'treeView' },
        icons && icons.map(function (_ref2) {
          var className = _ref2.className,
              icon = _ref2.icon;
          return _react2.default.createElement(_StyleDef.BackgroundImageStyleDef, {
            className: className,
            url: icon,
            key: className
          });
        }),
        _react2.default.createElement(TreeViewHeader, { fixedColumns: fixedColumns, mainColumn: mainColumn }),
        _react2.default.createElement(
          _ContextMenuTrigger2.default,
          {
            id: contextMenuId,
            attributes: { className: 'treeViewContextMenu' }
          },
          _react2.default.createElement(_VirtualList2.default, {
            className: 'treeViewBody',
            items: this._visibleRows,
            renderItem: this._renderRow,
            itemHeight: 16,
            columnCount: 2,
            focusable: true,
            onKeyDown: this._onKeyDown,
            specialItems: this._specialItems,
            disableOverscan: disableOverscan,
            onCopy: this._onCopy,
            ref: function ref(_ref3) {
              _this5._list = _ref3;
            }
          })
        ),
        contextMenu
      );
    }
  }]);
  return TreeView;
}(_react.PureComponent);

TreeView.propTypes = {
  fixedColumns: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    propName: _react.PropTypes.string.isRequired,
    title: _react.PropTypes.string.isRequired,
    component: _react.PropTypes.func
  })).isRequired,
  mainColumn: _react.PropTypes.shape({
    propName: _react.PropTypes.string.isRequired,
    title: _react.PropTypes.string.isRequired
  }).isRequired,
  tree: _react.PropTypes.object.isRequired,
  expandedNodeIds: _react.PropTypes.arrayOf(_react.PropTypes.number).isRequired,
  selectedNodeId: _react.PropTypes.number,
  onExpandedNodesChange: _react.PropTypes.func.isRequired,
  onSelectionChange: _react.PropTypes.func.isRequired,
  highlightString: _react.PropTypes.string,
  appendageColumn: _react.PropTypes.shape({
    propName: _react.PropTypes.string.isRequired,
    title: _react.PropTypes.string.isRequired
  }),
  appendageButtons: _react.PropTypes.arrayOf(_react.PropTypes.string),
  onAppendageButtonClick: _react.PropTypes.func,
  disableOverscan: _react.PropTypes.bool,
  contextMenu: _react.PropTypes.object,
  contextMenuId: _react.PropTypes.string,
  icons: _react.PropTypes.array
};

exports.default = TreeView;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(64);

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactContextmenu = __webpack_require__(80);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyContextMenuTrigger = function (_PureComponent) {
  (0, _inherits3.default)(MyContextMenuTrigger, _PureComponent);

  function MyContextMenuTrigger() {
    (0, _classCallCheck3.default)(this, MyContextMenuTrigger);
    return (0, _possibleConstructorReturn3.default)(this, (MyContextMenuTrigger.__proto__ || Object.getPrototypeOf(MyContextMenuTrigger)).apply(this, arguments));
  }

  (0, _createClass3.default)(MyContextMenuTrigger, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_reactContextmenu.ContextMenuTrigger, (0, _extends3.default)({ holdToDisplay: -1 }, this.props));
    }
  }]);
  return MyContextMenuTrigger;
}(_react.PureComponent);

exports.default = MyContextMenuTrigger;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _reactTransitionGroup = __webpack_require__(202);

__webpack_require__(447);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var FilterNavigatorBar = function (_PureComponent) {
  (0, _inherits3.default)(FilterNavigatorBar, _PureComponent);

  function FilterNavigatorBar(props) {
    (0, _classCallCheck3.default)(this, FilterNavigatorBar);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FilterNavigatorBar.__proto__ || Object.getPrototypeOf(FilterNavigatorBar)).call(this, props));

    _this._onLiClick = _this._onLiClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(FilterNavigatorBar, [{
    key: '_onLiClick',
    value: function _onLiClick(e) {
      var element = e.target.closest('.filterNavigatorBarItem');
      if (!(element instanceof HTMLElement)) {
        return;
      }
      var index = parseInt(element.dataset.index, 10) || 0;
      this.props.onPop(index);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          items = _props.items,
          selectedItem = _props.selectedItem;

      return _react2.default.createElement(
        _reactTransitionGroup.TransitionGroup,
        {
          component: 'ol',
          className: (0, _classnames2.default)('filterNavigatorBar', className)
        },
        items.map(function (item, i) {
          return _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            {
              key: i,
              classNames: 'filterNavigatorBarTransition',
              timeout: 300
            },
            _react2.default.createElement(
              'li',
              {
                'data-index': i,
                className: (0, _classnames2.default)('filterNavigatorBarItem', {
                  filterNavigatorBarRootItem: i === 0,
                  filterNavigatorBarBeforeSelectedItem: i === selectedItem - 1,
                  filterNavigatorBarSelectedItem: i === selectedItem,
                  filterNavigatorBarLeafItem: i === items.length - 1
                }),
                title: item,
                onClick: _this2._onLiClick
              },
              _react2.default.createElement(
                'span',
                { className: 'filterNavigatorBarItemContent' },
                item
              )
            )
          );
        })
      );
    }
  }]);
  return FilterNavigatorBar;
}(_react.PureComponent);

FilterNavigatorBar.propTypes = {
  className: _react.PropTypes.string,
  items: _react.PropTypes.array.isRequired,
  selectedItem: _react.PropTypes.number.isRequired,
  onPop: _react.PropTypes.func.isRequired
};

exports.default = FilterNavigatorBar;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _CSSTransition = __webpack_require__(439);

var _CSSTransition2 = _interopRequireDefault(_CSSTransition);

var _TransitionGroup = __webpack_require__(445);

var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

var _Transition = __webpack_require__(207);

var _Transition2 = _interopRequireDefault(_Transition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  Transition: _Transition2.default,
  TransitionGroup: _TransitionGroup2.default,
  CSSTransition: _CSSTransition2.default
};

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (true) {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyFunction = __webpack_require__(203);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (true) {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;

var _propTypes = __webpack_require__(81);

var PropTypes = _interopRequireWildcard(_propTypes);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(67);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _PropTypes = __webpack_require__(208);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UNMOUNTED = exports.UNMOUNTED = 'unmounted';
var EXITED = exports.EXITED = 'exited';
var ENTERING = exports.ENTERING = 'entering';
var ENTERED = exports.ENTERED = 'entered';
var EXITING = exports.EXITING = 'exiting';

/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the components.
 * It's up to you to give meaning and effect to those states. For example we can
 * add styles to a component when it enters or exits:
 *
 * ```jsx
 * import Transition from 'react-transition-group/Transition';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {(state) => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm A fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
 * What it does do is track transition states over time so you can update the
 * component (such as by adding styles or classes) when it changes states.
 *
 * There are 4 main states a Transition can be in:
 *  - `ENTERING`
 *  - `ENTERED`
 *  - `EXITING`
 *  - `EXITED`
 *
 * Transition state is toggled via the `in` prop. When `true` the component begins the
 * "Enter" stage. During this stage, the component will shift from its current transition state,
 * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
 * it's complete. Let's take the following example:
 *
 * ```jsx
 * state= { in: false };
 *
 * toggleEnterState = () => {
 *   this.setState({ in: true });
 * }
 *
 * render() {
 *   return (
 *     <div>
 *       <Transition in={this.state.in} timeout={500} />
 *       <button onClick={this.toggleEnterState}>Click to Enter</button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state and
 * stay there for 500ms (the value of `timeout`) when finally switches to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
 */

var Transition = function (_React$Component) {
  _inherits(Transition, _React$Component);

  function Transition(props, context) {
    _classCallCheck(this, Transition);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

    var parentGroup = context.transitionGroup;
    // In the context of a TransitionGroup all enters are really appears
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;

    var initialStatus = void 0;
    _this.nextStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.nextStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = { status: initialStatus };

    _this.nextCallback = null;
    return _this;
  }

  Transition.prototype.getChildContext = function getChildContext() {
    return { transitionGroup: null }; // allows for nested Transitions
  };

  Transition.prototype.componentDidMount = function componentDidMount() {
    this.updateStatus(true);
  };

  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _ref = this.pendingState || this.state,
        status = _ref.status;

    if (nextProps.in) {
      if (status === UNMOUNTED) {
        this.setState({ status: EXITED });
      }
      if (status !== ENTERING && status !== ENTERED) {
        this.nextStatus = ENTERING;
      }
    } else {
      if (status === ENTERING || status === ENTERED) {
        this.nextStatus = EXITING;
      }
    }
  };

  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
    this.updateStatus();
  };

  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  Transition.prototype.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;

    var exit = void 0,
        enter = void 0,
        appear = void 0;

    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter;
      appear = timeout.appear;
    }
    return { exit: exit, enter: enter, appear: appear };
  };

  Transition.prototype.updateStatus = function updateStatus() {
    var mounting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var nextStatus = this.nextStatus;

    if (nextStatus !== null) {
      this.nextStatus = null;
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();
      var node = _reactDom2.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({ status: UNMOUNTED });
    }
  };

  Transition.prototype.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;

    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;

    var timeouts = this.getTimeouts();

    // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set
    if (!mounting && !enter) {
      this.safeSetState({ status: ENTERED }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);

    this.safeSetState({ status: ENTERING }, function () {
      _this2.props.onEntering(node, appearing);

      // FIXME: appear timeout?
      _this2.onTransitionEnd(node, timeouts.enter, function () {
        _this2.safeSetState({ status: ENTERED }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  Transition.prototype.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;

    var timeouts = this.getTimeouts();

    // no exit animation skip right to EXITED
    if (!exit) {
      this.safeSetState({ status: EXITED }, function () {
        _this3.props.onExited(node);
      });
      return;
    }
    this.props.onExit(node);

    this.safeSetState({ status: EXITING }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({ status: EXITED }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
    var _this4 = this;

    // We need to track pending updates for instances where a cWRP fires quickly
    // after cDM and before the state flushes, which would double trigger a
    // transition
    this.pendingState = nextState;

    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, function () {
      _this4.pendingState = null;
      callback();
    });
  };

  Transition.prototype.setNextCallback = function setNextCallback(callback) {
    var _this5 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this5.nextCallback = null;

        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);

    if (node) {
      if (this.props.addEndListener) {
        this.props.addEndListener(node, this.nextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    } else {
      setTimeout(this.nextCallback, 0);
    }
  };

  Transition.prototype.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }

    var _props = this.props,
        children = _props.children,
        childProps = _objectWithoutProperties(_props, ['children']);
    // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react2.default.Children.only(children);
    return _react2.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react2.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};


Transition.propTypes =  true ? {
  /**
   * A `function` child can be used instead of a React element.
   * This function is called with the current transition status
   * ('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can used
   * to apply context specific props to a component.
   *
   * ```jsx
   * <Transition timeout={150}>
   *   {(status) => (
   *     <MyComponent className={`fade fade-${status}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */
  appear: PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEventListener` is provided
   *
   * You may specify a single timeout for all transitions like: `timeout={500}`,
   * or individually like:
   *
   * ```jsx
   * timeout={{
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * @type {number | { enter?: number, exit?: number }}
   */
  timeout: function timeout(props) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var pt = _PropTypes.timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;
    return pt.apply(undefined, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: PropTypes.func
} : {};

// Name the function so it is clearer in the documentation
function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,

  onEnter: noop,
  onEntering: noop,
  onEntered: noop,

  onExit: noop,
  onExiting: noop,
  onExited: noop
};

Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

exports.default = Transition;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = undefined;
exports.transitionTimeout = transitionTimeout;

var _propTypes = __webpack_require__(81);

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transitionTimeout(transitionType) {
  var timeoutPropName = 'transition' + transitionType + 'Timeout';
  var enabledPropName = 'transition' + transitionType;

  return function (props) {
    // If the transition is enabled
    if (props[enabledPropName]) {
      // If no timeout duration is provided
      if (props[timeoutPropName] == null) {
        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

        // If the duration isn't a number
      } else if (typeof props[timeoutPropName] !== 'number') {
        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
      }
    }

    return null;
  };
}

var timeoutsShape = exports.timeoutsShape = _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
  enter: _propTypes2.default.number,
  exit: _propTypes2.default.number
}).isRequired]);

var classNamesShape = exports.classNamesShape = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
  enter: _propTypes2.default.string,
  exit: _propTypes2.default.string,
  active: _propTypes2.default.string
}), _propTypes2.default.shape({
  enter: _propTypes2.default.string,
  enterActive: _propTypes2.default.string,
  exit: _propTypes2.default.string,
  exitActive: _propTypes2.default.string
})]);

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(471);
var util = __webpack_require__(472);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(473);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(64);

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

exports.default = withChartViewport;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRedux = __webpack_require__(9);

var _app = __webpack_require__(82);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ref = (typeof window === 'undefined' ? 'undefined' : (0, _typeof3.default)(window)) === 'object' && window.WheelEvent ? new WheelEvent('mouse') : { DOM_DELTA_LINE: 1, DOM_DELTA_PAGE: 2 },
    DOM_DELTA_PAGE = _ref.DOM_DELTA_PAGE,
    DOM_DELTA_LINE = _ref.DOM_DELTA_LINE; /* This Source Code Form is subject to the terms of the Mozilla Public
                                           * License, v. 2.0. If a copy of the MPL was not distributed with this
                                           * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

__webpack_require__(483);

/**
 * Viewport terminology:
 *                                                  (this time is relative to current
 *                                                   profile range, not the total profile)
 *                 <------ e.g. 1000px ------>         0.7 - Sample's unit time
 *                 ___________________________          |
 *         _______|___________________________|_________|______________________
 *        |       |                           |         v                      |
 * |<-------------|---------------------------|---------*------- Total profile samples ------>|
 *        |       |                           |                                |
 *        |       |      Screen Viewport      |                                |
 *        |       |                           |         Current profile range  |
 *        |_______|___________________________|________________________________|
 *                |___________________________|
 *        ^       ^                           ^                                ^
 *        0.0    0.1                          0.6                              1.0
 *                 ^ viewportLeft               ^ viewportRight
 *
 * viewportLeft = 0.1
 * viewportRight = 0.6
 * viewportLength = viewportRight - viewportLeft
 * viewportTop = 30 (in pixels)
 * screenWidth = 1000
 * unitPixel = viewportLength / screenWidth
 * viewportRight += mouseMoveDelta * unitPixel
 * viewportLeft += mouseMoveDelta * unitPixel
 **/
function withChartViewport(WrappedComponent) {
  var ChartViewport = function (_PureComponent) {
    (0, _inherits3.default)(ChartViewport, _PureComponent);

    function ChartViewport(props) {
      (0, _classCallCheck3.default)(this, ChartViewport);

      var _this = (0, _possibleConstructorReturn3.default)(this, (ChartViewport.__proto__ || Object.getPrototypeOf(ChartViewport)).call(this, props));

      _this._mouseWheelListener = _this._mouseWheelListener.bind(_this);
      _this._mouseDownListener = _this._mouseDownListener.bind(_this);
      _this._mouseMoveListener = _this._mouseMoveListener.bind(_this);
      _this._mouseUpListener = _this._mouseUpListener.bind(_this);

      _this._setSize = _this._setSize.bind(_this);
      _this._setSizeNextFrame = _this._setSizeNextFrame.bind(_this);

      _this.shiftScrollId = 0;
      _this.zoomRangeSelectionScheduled = false;
      _this.zoomRangeSelectionScrollDelta = 0;

      _this.state = _this.getDefaultState(props);
      return _this;
    }

    (0, _createClass3.default)(ChartViewport, [{
      key: 'getHorizontalViewport',
      value: function getHorizontalViewport(_ref2) {
        var selection = _ref2.selection,
            timeRange = _ref2.timeRange;

        if (selection.hasSelection) {
          var selectionStart = selection.selectionStart,
              selectionEnd = selection.selectionEnd;

          var timeRangeLength = timeRange.end - timeRange.start;
          return {
            viewportLeft: (selectionStart - timeRange.start) / timeRangeLength,
            viewportRight: (selectionEnd - timeRange.start) / timeRangeLength
          };
        }
        return {
          viewportLeft: 0,
          viewportRight: 1
        };
      }
    }, {
      key: 'getDefaultState',
      value: function getDefaultState(props) {
        var _getHorizontalViewpor = this.getHorizontalViewport(props),
            viewportLeft = _getHorizontalViewpor.viewportLeft,
            viewportRight = _getHorizontalViewpor.viewportRight;

        return {
          containerWidth: 0,
          containerHeight: 0,
          containerLeft: 0,
          viewportTop: 0,
          viewportBottom: 0,
          viewportLeft: viewportLeft,
          viewportRight: viewportRight,
          dragX: 0,
          dragY: 0,
          isDragging: false,
          isShiftScrollHintVisible: false
        };
      }

      /**
       * Let the viewport know when we are actively scrolling.
       */

    }, {
      key: 'showShiftScrollingHint',
      value: function showShiftScrollingHint() {
        var _this2 = this;

        // Only show this message if we haven't shift zoomed yet.
        if (this.props.hasZoomedViaMousewheel) {
          return;
        }

        var scollId = ++this.shiftScrollId;
        if (!this.state.isShiftScrollHintVisible) {
          this.setState({ isShiftScrollHintVisible: true });
        }
        setTimeout(function () {
          if (scollId === _this2.shiftScrollId) {
            _this2.setState({ isShiftScrollHintVisible: false });
          }
        }, 1000);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        if (this.props.viewportNeedsUpdate(prevProps, this.props)) {
          this.setState(this.getDefaultState(this.props));
          this._setSizeNextFrame();
        }
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(newProps) {
        if (this.props.selection !== newProps.selection || this.props.timeRange !== newProps.timeRange) {
          this.setState(this.getHorizontalViewport(newProps));
        }
      }
    }, {
      key: '_setSize',
      value: function _setSize() {
        if (this._container) {
          var rect = this._container.getBoundingClientRect();
          if (this.state.containerWidth !== rect.width || this.state.containerHeight !== rect.height) {
            this.setState({
              containerWidth: rect.width,
              containerHeight: rect.height,
              containerLeft: rect.left,
              viewportBottom: this.state.viewportTop + rect.height
            });
          }
        }
      }
    }, {
      key: '_setSizeNextFrame',
      value: function _setSizeNextFrame() {
        requestAnimationFrame(this._setSize);
      }
    }, {
      key: '_mouseWheelListener',
      value: function _mouseWheelListener(event) {
        if (event.shiftKey) {
          this.zoomRangeSelection(event);
          return;
        }

        this.showShiftScrollingHint();

        // Do the work to move the viewport.
        var containerHeight = this.state.containerHeight;


        this.moveViewport(-getNormalizedScrollDelta(event, containerHeight, 'deltaX'), -getNormalizedScrollDelta(event, containerHeight, 'deltaY'));
      }
    }, {
      key: 'zoomRangeSelection',
      value: function zoomRangeSelection(event) {
        var _this3 = this;

        if (!this.props.hasZoomedViaMousewheel) {
          this.props.setHasZoomedViaMousewheel();
        }
        event.preventDefault();

        // Shift is a modifier that will change some mice to scroll horizontally, check
        // for that here.
        var deltaKey = event.deltaY === 0 ? 'deltaX' : 'deltaY';

        // Accumulate the scroll delta here. Only apply it once per frame to avoid
        // spamming the Redux store with updates.
        this.zoomRangeSelectionScrollDelta += getNormalizedScrollDelta(event, this.state.containerHeight, deltaKey);

        // See if an update needs to be scheduled.
        if (!this.zoomRangeSelectionScheduled) {
          var mouseX = event.clientX;
          this.zoomRangeSelectionScheduled = true;
          requestAnimationFrame(function () {
            // Grab and reset the scroll delta accumulated up until this frame.
            // Let another frame be scheduled.
            var deltaY = _this3.zoomRangeSelectionScrollDelta;
            _this3.zoomRangeSelectionScrollDelta = 0;
            _this3.zoomRangeSelectionScheduled = false;

            var maximumZoom = _this3.props.maximumZoom;
            var _state = _this3.state,
                containerLeft = _state.containerLeft,
                containerWidth = _state.containerWidth,
                viewportLeft = _state.viewportLeft,
                viewportRight = _state.viewportRight;

            var mouseCenter = (mouseX - containerLeft) / containerWidth;

            var viewportLength = viewportRight - viewportLeft;
            var scale = viewportLength - viewportLength / (1 + deltaY * 0.001);
            var newViewportLeft = clamp(0, 1, viewportLeft - scale * mouseCenter);
            var newViewportRight = clamp(0, 1, viewportRight + scale * (1 - mouseCenter));

            if (newViewportRight - newViewportLeft < maximumZoom) {
              var newViewportMiddle = (viewportLeft + viewportRight) * 0.5;
              newViewportLeft = newViewportMiddle - maximumZoom * 0.5;
              newViewportRight = newViewportMiddle + maximumZoom * 0.5;
            }

            var _props = _this3.props,
                updateProfileSelection = _props.updateProfileSelection,
                timeRange = _props.timeRange;

            if (newViewportLeft === 0 && newViewportRight === 1) {
              if (viewportLeft === 0 && viewportRight === 1) {
                // Do not update if at the maximum bounds.
                return;
              }
              updateProfileSelection({
                hasSelection: false,
                isModifying: false
              });
            } else {
              var timeRangeLength = timeRange.end - timeRange.start;
              updateProfileSelection({
                hasSelection: true,
                isModifying: false,
                selectionStart: timeRange.start + timeRangeLength * newViewportLeft,
                selectionEnd: timeRange.start + timeRangeLength * newViewportRight
              });
            }
          });
        }
      }
    }, {
      key: '_mouseDownListener',
      value: function _mouseDownListener(event) {
        this.setState({
          dragX: event.clientX,
          dragY: event.clientY,
          isDragging: true
        });
        event.stopPropagation();
        event.preventDefault();

        window.addEventListener('mousemove', this._mouseMoveListener, true);
        window.addEventListener('mouseup', this._mouseUpListener, true);
      }
    }, {
      key: '_mouseMoveListener',
      value: function _mouseMoveListener(event) {
        event.stopPropagation();
        event.preventDefault();

        var _state2 = this.state,
            dragX = _state2.dragX,
            dragY = _state2.dragY;

        var offsetX = event.clientX - dragX;
        var offsetY = event.clientY - dragY;

        this.setState({
          dragX: event.clientX,
          dragY: event.clientY
        });

        this.moveViewport(offsetX, offsetY);
      }
    }, {
      key: 'moveViewport',
      value: function moveViewport(offsetX, offsetY) {
        var _props2 = this.props,
            maxViewportHeight = _props2.maxViewportHeight,
            timeRange = _props2.timeRange,
            updateProfileSelection = _props2.updateProfileSelection;
        var _state3 = this.state,
            containerWidth = _state3.containerWidth,
            containerHeight = _state3.containerHeight,
            viewportTop = _state3.viewportTop,
            viewportLeft = _state3.viewportLeft,
            viewportRight = _state3.viewportRight;

        // Calculate left and right in terms of the unit interval of the profile range.

        var viewportLength = viewportRight - viewportLeft;
        var unitOffsetX = viewportLength * offsetX / containerWidth;
        var newViewportLeft = viewportLeft - unitOffsetX;
        var newViewportRight = viewportRight - unitOffsetX;
        if (newViewportLeft < 0) {
          newViewportLeft = 0;
          newViewportRight = viewportLength;
        }
        if (newViewportRight > 1) {
          newViewportLeft = 1 - viewportLength;
          newViewportRight = 1;
        }

        // Calculate top and bottom in terms of pixels.
        var newViewportTop = viewportTop - offsetY;
        var newViewportBottom = newViewportTop + containerHeight;

        // Constrain the viewport to the bottom.
        if (newViewportBottom > maxViewportHeight) {
          newViewportTop = maxViewportHeight - containerHeight;
          newViewportBottom = maxViewportHeight;
        }

        // Constrain the viewport to the top. This must be after constraining to the bottom
        // so if the view is extra small the content is anchored to the top, and not the bottom.
        if (newViewportTop < 0) {
          newViewportTop = 0;
          newViewportBottom = containerHeight;
        }

        var timeRangeLength = timeRange.end - timeRange.start;
        var viewportHorizontalChanged = newViewportLeft !== viewportLeft;
        var viewportVerticalChanged = newViewportTop !== viewportTop;

        if (viewportHorizontalChanged) {
          updateProfileSelection({
            hasSelection: true,
            isModifying: false,
            selectionStart: timeRange.start + timeRangeLength * newViewportLeft,
            selectionEnd: timeRange.start + timeRangeLength * newViewportRight
          });
        }

        if (viewportVerticalChanged) {
          this.setState({
            viewportTop: newViewportTop,
            viewportBottom: newViewportBottom
          });
        }

        return viewportVerticalChanged || viewportHorizontalChanged;
      }
    }, {
      key: '_mouseUpListener',
      value: function _mouseUpListener(event) {
        event.stopPropagation();
        event.preventDefault();
        window.removeEventListener('mousemove', this._mouseMoveListener, true);
        window.removeEventListener('mouseup', this._mouseUpListener, true);
        this.setState({
          isDragging: false
        });
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        window.addEventListener('resize', this._setSizeNextFrame, false);
        // The first _setSize ensures that the screen does not blip when mounting
        // the component, while the second ensures that it lays out correctly if the DOM
        // is not fully layed out correctly yet.
        this._setSize();
        this._setSizeNextFrame();
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        window.removeEventListener('resize', this._setSizeNextFrame, false);
        window.removeEventListener('mousemove', this._mouseMoveListener, true);
        window.removeEventListener('mouseup', this._mouseUpListener, true);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;

        var hasZoomedViaMousewheel = this.props.hasZoomedViaMousewheel;
        var _state4 = this.state,
            containerWidth = _state4.containerWidth,
            containerHeight = _state4.containerHeight,
            viewportTop = _state4.viewportTop,
            viewportBottom = _state4.viewportBottom,
            viewportLeft = _state4.viewportLeft,
            viewportRight = _state4.viewportRight,
            isDragging = _state4.isDragging,
            isShiftScrollHintVisible = _state4.isShiftScrollHintVisible;


        var viewportClassName = (0, _classnames2.default)({
          chartViewport: true,
          dragging: isDragging
        });

        var shiftScrollClassName = (0, _classnames2.default)({
          chartViewportShiftScroll: true,
          hidden: hasZoomedViaMousewheel || !isShiftScrollHintVisible
        });

        return _react2.default.createElement(
          'div',
          {
            className: viewportClassName,
            onWheel: this._mouseWheelListener,
            onMouseDown: this._mouseDownListener,
            ref: function ref(container) {
              _this4._container = container;
            }
          },
          _react2.default.createElement(WrappedComponent, (0, _extends3.default)({
            containerWidth: containerWidth,
            containerHeight: containerHeight,
            viewportLeft: viewportLeft,
            viewportRight: viewportRight,
            viewportTop: viewportTop,
            viewportBottom: viewportBottom,
            isDragging: isDragging
          }, this.props)),
          _react2.default.createElement(
            'div',
            { className: shiftScrollClassName },
            'Zoom Chart:',
            _react2.default.createElement(
              'kbd',
              { className: 'chartViewportShiftScrollKbd' },
              'Shift'
            ),
            _react2.default.createElement(
              'kbd',
              { className: 'chartViewportShiftScrollKbd' },
              'Scroll'
            )
          )
        );
      }
    }]);
    return ChartViewport;
  }(_react.PureComponent);

  // Connect this component so that it knows whether or not to nag the user to use shift
  // for zooming on range selections.


  return (0, _reactRedux.connect)(function (state) {
    return {
      hasZoomedViaMousewheel: (0, _app.getHasZoomedViaMousewheel)(state)
    };
  }, _actions2.default)(ChartViewport);
}

function clamp(min, max, value) {
  return Math.max(min, Math.min(max, value));
}

var SCROLL_LINE_SIZE = 15;

/**
 * Scroll wheel events can by of various types. Do the right thing by converting these
 * into CssPixels. https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode
 */
function getNormalizedScrollDelta(event, pageHeight, key) {
  var delta = key === 'deltaY' ? event.deltaY : event.deltaX;
  switch (event.deltaMode) {
    case DOM_DELTA_PAGE:
      return delta * pageHeight;
    case DOM_DELTA_LINE:
      return delta * SCROLL_LINE_SIZE;
    default:
  }
  // Scroll by pixel.
  return delta;
}

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

var _defineProperty2 = __webpack_require__(53);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _timeCode = __webpack_require__(45);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _Tooltip = __webpack_require__(212);

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(487);

var ChartCanvas = function (_PureComponent) {
  (0, _inherits3.default)(ChartCanvas, _PureComponent);

  function ChartCanvas(props) {
    (0, _classCallCheck3.default)(this, ChartCanvas);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ChartCanvas.__proto__ || Object.getPrototypeOf(ChartCanvas)).call(this, props));

    _this._devicePixelRatio = 1;
    _this.state = {
      hoveredItem: null,
      mouseX: 0,
      mouseY: 0
    };

    _this._setCanvasRef = _this._setCanvasRef.bind(_this);
    _this._onMouseMove = _this._onMouseMove.bind(_this);
    _this._onMouseOut = _this._onMouseOut.bind(_this);
    _this._onDoubleClick = _this._onDoubleClick.bind(_this);
    _this._getHoveredItemInfo = _this._getHoveredItemInfo.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ChartCanvas, [{
    key: '_scheduleDraw',
    value: function _scheduleDraw() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          drawCanvas = _props.drawCanvas;

      window.requestAnimationFrame(function () {
        if (_this2._canvas) {
          (0, _timeCode.timeCode)(className + ' render', function () {
            _this2._prepCanvas();
            drawCanvas(_this2._ctx, _this2.state.hoveredItem);
          });
        }
      });
    }
  }, {
    key: '_prepCanvas',
    value: function _prepCanvas() {
      var canvas = this._canvas;
      var _props2 = this.props,
          containerWidth = _props2.containerWidth,
          containerHeight = _props2.containerHeight;
      var _window = window,
          devicePixelRatio = _window.devicePixelRatio;

      var pixelWidth = containerWidth * devicePixelRatio;
      var pixelHeight = containerHeight * devicePixelRatio;
      if (!canvas) {
        return;
      }
      // Satisfy the null check for Flow.
      var ctx = this._ctx || canvas.getContext('2d');
      if (!this._ctx) {
        this._ctx = ctx;
      }
      if (canvas.width !== pixelWidth || canvas.height !== pixelHeight) {
        canvas.width = pixelWidth;
        canvas.height = pixelHeight;
        canvas.style.width = containerWidth + 'px';
        canvas.style.height = containerHeight + 'px';
        ctx.scale(this._devicePixelRatio, this._devicePixelRatio);
      }
      if (this._devicePixelRatio !== devicePixelRatio) {
        // Make sure and multiply by the inverse of the previous ratio, as the scaling
        // operates off of the previous set scale.
        var scale = 1 / this._devicePixelRatio * devicePixelRatio;
        ctx.scale(scale, scale);
        this._devicePixelRatio = devicePixelRatio;
      }
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(event) {
      if (!this._canvas) {
        return;
      }

      var rect = this._canvas.getBoundingClientRect();
      var x = event.pageX - rect.left;
      var y = event.pageY - rect.top;

      var maybeHoveredItem = this.props.hitTest(x, y);

      if (maybeHoveredItem !== null) {
        this.setState({
          hoveredItem: maybeHoveredItem,
          mouseX: event.pageX,
          mouseY: event.pageY
        });
      } else if (this.state.hoveredItem !== null) {
        this.setState({
          hoveredItem: null
        });
      }
    }
  }, {
    key: '_onMouseOut',
    value: function _onMouseOut() {
      if (this.state.hoveredItem !== null) {
        this.setState({ hoveredItem: null });
      }
    }
  }, {
    key: '_onDoubleClick',
    value: function _onDoubleClick() {
      this.props.onDoubleClickItem(this.state.hoveredItem);
    }
  }, {
    key: '_getHoveredItemInfo',
    value: function _getHoveredItemInfo() {
      var hoveredItem = this.state.hoveredItem;

      if (hoveredItem === null) {
        return null;
      }
      return this.props.getHoveredItemInfo(hoveredItem);
    }
  }, {
    key: '_setCanvasRef',
    value: function _setCanvasRef(canvas) {
      this._canvas = canvas;
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      // always try to update if the parent updates
      return true;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps !== this.props || !hoveredItemsAreEqual(prevState.hoveredItem, this.state.hoveredItem)) {
        this._scheduleDraw();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames;

      var isDragging = this.props.isDragging;
      var _state = this.state,
          hoveredItem = _state.hoveredItem,
          mouseX = _state.mouseX,
          mouseY = _state.mouseY;


      var className = (0, _classnames2.default)((_classNames = {
        chartCanvas: true
      }, (0, _defineProperty3.default)(_classNames, this.props.className, true), (0, _defineProperty3.default)(_classNames, 'hover', hoveredItem !== null), _classNames));

      var tooltipContents = this._getHoveredItemInfo();

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement('canvas', {
          className: className,
          ref: this._setCanvasRef,
          onMouseMove: this._onMouseMove,
          onMouseOut: this._onMouseOut,
          onDoubleClick: this._onDoubleClick
        }),
        !isDragging && tooltipContents ? _react2.default.createElement(
          _Tooltip2.default,
          { mouseX: mouseX, mouseY: mouseY },
          tooltipContents
        ) : null
      );
    }
  }]);
  return ChartCanvas;
}(_react.PureComponent);

/**
 * Check for shallow equality for objects, and strict equality for everything else.
 */


exports.default = ChartCanvas;
function hoveredItemsAreEqual(a, b) {
  if (a && b && (typeof a === 'undefined' ? 'undefined' : (0, _typeof3.default)(a)) === 'object' && (typeof b === 'undefined' ? 'undefined' : (0, _typeof3.default)(b)) === 'object') {
    if (a.length !== b.length) {
      return false;
    }
    var hasAllKeys = true;
    for (var aKey in a) {
      var hasKey = false;
      for (var bKey in b) {
        if (aKey === bKey) {
          if (a[aKey] !== b[bKey]) {
            return false;
          }
          hasKey = true;
          break;
        }
      }
      hasAllKeys = hasAllKeys && hasKey;
      if (!hasAllKeys) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(67);

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

__webpack_require__(485);

var MOUSE_OFFSET = 21;

var Tooltip = function (_PureComponent) {
  (0, _inherits3.default)(Tooltip, _PureComponent);

  function Tooltip(props) {
    (0, _classCallCheck3.default)(this, Tooltip);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

    _this._setMountElement = _this._setMountElement.bind(_this);
    _this.state = {
      interiorElement: null,
      isNewContentLaidOut: false
    };
    return _this;
  }

  (0, _createClass3.default)(Tooltip, [{
    key: '_setMountElement',
    value: function _setMountElement(el) {
      this.setState({ interiorElement: el });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
      // Create a DOM node outside of the normal heirarchy.
      var el = document.createElement('div');
      el.className = 'tooltipMount';

      // Satisfy flow null checks.
      if (!document.body) {
        throw new Error('No document body was found to append to.');
      }
      document.body.appendChild(el);
      this._mountElement = el;
      this._renderTooltipContents();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _reactDom2.default.unmountComponentAtNode(this._mountElement);
      // Satisfy flow null checks.
      if (this._mountElement) {
        this._mountElement.remove();
      }
      this._isMounted = false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.children !== this.props.children) {
        // If the children are different, allow them to do an initial lay out on the DOM.
        this.setState({ isNewContentLaidOut: false });
        this._forceUpdateAfterRAF();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      // Force an additional update to this component if the children content is
      // different as it needs to fully lay out one time on the DOM to proper calculate
      // sizing and positioning.
      var _state = this.state,
          interiorElement = _state.interiorElement,
          isNewContentLaidOut = _state.isNewContentLaidOut;

      if (interiorElement && !isNewContentLaidOut) {
        this._forceUpdateAfterRAF();
      }

      this._renderTooltipContents();
    }

    /**
     * Children content needs to be on the DOM (not just virtual DOM) in order to correctly
     * calculate the sizing and positioning of the tooltip.
     */

  }, {
    key: '_forceUpdateAfterRAF',
    value: function _forceUpdateAfterRAF() {
      var _this2 = this;

      requestAnimationFrame(function () {
        if (_this2._isMounted) {
          _this2.setState({ isNewContentLaidOut: true });
        }
      });
    }

    /**
     * This is really ugly, but the tooltip needs to be outside of the normal
     * DOM heirarchy so it isn't clipped by some arbitrary stacking context.
     */

  }, {
    key: '_renderTooltipContents',
    value: function _renderTooltipContents() {
      var _props = this.props,
          children = _props.children,
          mouseX = _props.mouseX,
          mouseY = _props.mouseY;
      var interiorElement = this.state.interiorElement;


      var offsetX = interiorElement ? Math.max(0, mouseX + interiorElement.offsetWidth - window.innerWidth) : 0;

      var offsetY = 0;
      if (interiorElement) {
        if (mouseY + interiorElement.offsetHeight + MOUSE_OFFSET > window.innerHeight) {
          offsetY = interiorElement.offsetHeight + MOUSE_OFFSET;
        } else {
          offsetY = -MOUSE_OFFSET;
        }
      }

      var style = {
        left: mouseX - offsetX,
        top: mouseY - offsetY
      };

      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { className: 'tooltip', style: style, ref: this._setMountElement },
        children
      ), this._mountElement);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return Tooltip;
}(_react.PureComponent);

exports.default = Tooltip;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Measure the size of text for drawing within a 2d context. This will allow text
 * to be drawn in a constrained space. This class uses a variety of heuristics and
 * caching to make this process fast.
 */
var TextMeasurement = function () {
  function TextMeasurement(ctx) {
    (0, _classCallCheck3.default)(this, TextMeasurement);

    this._ctx = ctx;
    this._cache = {};
    this._averageCharWidth = this._calcAverageCharWidth();

    // TODO - L10N
    this.overflowChar = '…';
    this.minWidth = this.getTextWidth(this.overflowChar);
  }

  /**
   * Gets the average letter width in the English alphabet, for the current
   * context state (font size, family etc.). This provides a close enough
   * value to use in `getTextWidthApprox`.
   *
   * @return {number} The average letter width.
   */


  (0, _createClass3.default)(TextMeasurement, [{
    key: '_calcAverageCharWidth',
    value: function _calcAverageCharWidth() {
      var string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.()< /:-_';
      return this.getTextWidth(string) / string.length;
    }

    /**
     * Gets the width of the specified text, for the current context state
     * (font size, family etc.).
     *
     * @param {string} text - The text to analyze.
     * @return {number} The text width.
     */

  }, {
    key: 'getTextWidth',
    value: function getTextWidth(text) {
      var cachedWidth = this._cache[text];
      if (cachedWidth) {
        return cachedWidth;
      }
      var metrics = this._ctx.measureText(text);
      this._cache[text] = metrics.width;
      return metrics.width;
    }

    /**
     * Gets an approximate width of the specified text. This is much faster
     * than `_getTextWidth`, but inexact.
     *
     * @param {string} text - The text to analyze.
     * @return {number} The approximate text width.
     */

  }, {
    key: 'getTextWidthApprox',
    value: function getTextWidthApprox(text) {
      return text.length * this._averageCharWidth;
    }

    /**
     * Massage a text to fit inside a given width. This clamps the string
     * at the end to avoid overflowing.
     *
     * @param {string} text -The text to fit inside the given width.
     * @param {number} maxWidth - The available width for the given text.
     * @return {string} The fitted text.
     */

  }, {
    key: 'getFittedText',
    value: function getFittedText(text, maxWidth) {
      if (this.minWidth > maxWidth) {
        return '';
      }
      var textWidth = this.getTextWidth(text);
      if (textWidth < maxWidth) {
        return text;
      }
      for (var i = 1, len = text.length; i <= len; i++) {
        var trimmedText = text.substring(0, len - i);
        var trimmedWidth = this.getTextWidthApprox(trimmedText) + this.minWidth;
        if (trimmedWidth < maxWidth) {
          return trimmedText + this.overflowChar;
        }
      }
      return '';
    }
  }]);
  return TextMeasurement;
}();

exports.default = TextMeasurement;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _formatNumbers = __webpack_require__(134);

var _markerInfo = __webpack_require__(498);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function _markerDetail(key, label, value) {
  var fn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : String;

  return [_react2.default.createElement(
    'div',
    { className: 'tooltipLabel', key: '{key}' },
    label,
    ':'
  ), fn(value)];
}

function getMarkerDetails(data) {
  if (data) {
    switch (data.type) {
      case 'UserTiming':
        {
          return _react2.default.createElement(
            'div',
            { className: 'tooltipDetails' },
            _markerDetail('name', 'Name', data.name)
          );
        }
      case 'DOMEvent':
        {
          var latency = 0;
          if (data.timeStamp) {
            latency = (0, _formatNumbers.formatNumber)(data.startTime - data.timeStamp) + 'ms';
          }
          return _react2.default.createElement(
            'div',
            { className: 'tooltipDetails' },
            _markerDetail('type', 'Type', data.eventType),
            latency ? _markerDetail('latency', 'Latency', latency) : null
          );
        }
      case 'GCMinor':
        {
          if (data.nursery) {
            var nursery = data.nursery;
            switch (nursery.status) {
              case 'complete':
                {
                  return _react2.default.createElement(
                    'div',
                    { className: 'tooltipDetails' },
                    _markerDetail('gcreason', 'Reason', nursery.reason),
                    _markerDetail('gcpromotion', 'Bytes tenured', (0, _formatNumbers.formatValueTotal)(nursery.bytes_tenured, nursery.bytes_used, _formatNumbers.formatBytes)),
                    nursery.cur_capacity && _markerDetail('gcnurseryusage', 'Bytes used', (0, _formatNumbers.formatValueTotal)(nursery.bytes_used, nursery.cur_capacity, _formatNumbers.formatBytes)),
                    _markerDetail('gcnewnurserysize', 'New nursery size', nursery.new_capacity, _formatNumbers.formatBytes)
                  );
                }
              case 'nursery disabled':
                return _react2.default.createElement(
                  'div',
                  { className: 'tooltipDetails' },
                  _markerDetail('gcstatus', 'Status', 'Nursery disabled')
                );
              case 'nursery empty':
                return _react2.default.createElement(
                  'div',
                  { className: 'tooltipDetails' },
                  _markerDetail('gcstatus', 'Status', 'Nursery empty')
                );
              default:
                return null;
            }
          } else {
            return null;
          }
        }
      case 'GCMajor':
        {
          var timings = data.timings;
          switch (timings.status) {
            case 'aborted':
              return _react2.default.createElement(
                'div',
                { className: 'tooltipDetails' },
                _markerDetail('status', 'Status', 'Aborted (OOM)')
              );
            case 'completed':
              {
                return _react2.default.createElement(
                  'div',
                  { className: 'tooltipDetails' },
                  _markerDetail('gcreason', 'Reason', timings.reason),
                  timings.nonincremental_reason !== 'None' && _markerDetail('gcnonincrementalreason', 'Non-incremental reason', timings.nonincremental_reason),
                  _markerDetail('gctime', 'Total slice times', timings.total_time, function (x) {
                    return x + 'ms';
                  }),
                  _markerDetail('gcmaxpause', 'Max Pause', timings.max_pause, function (x) {
                    return x + 'ms';
                  }),
                  _markerDetail('gcusage', 'Heap usage', timings.allocated_bytes, _formatNumbers.formatBytes),
                  _markerDetail('gcmmu20ms', 'MMU 20ms', timings.mmu_20ms, _formatNumbers.formatPercent),
                  _markerDetail('gcmmu50ms', 'MMU 50ms', timings.mmu_50ms, _formatNumbers.formatPercent),
                  _markerDetail('gcnumminors', 'Minor GCs', timings.minor_gcs),
                  _markerDetail('gcnumslices', 'Slices', timings.slices),
                  _markerDetail('gcnumzones', 'Zones', (0, _formatNumbers.formatValueTotal)(timings.zones_collected, timings.total_zones, String)),
                  _markerDetail('gcnumcompartments', 'Compartments', timings.total_compartments)
                );
              }
            default:
              return null;
          }
        }
      case 'GCSlice':
        {
          var _timings = data.timings;
          var triggers = void 0;
          if (_timings.trigger_amount && _timings.trigger_threshold) {
            triggers = _markerDetail('gctrigger', 'Trigger (amt/trig)', (0, _formatNumbers.formatValueTotal)(_timings.trigger_amount, _timings.trigger_threshold, _formatNumbers.formatBytes, false));
          }
          return _react2.default.createElement(
            'div',
            { className: 'tooltipDetails' },
            _markerDetail('gcreason', 'Reason', _timings.reason),
            _markerDetail('gcbudget', 'Budget', _timings.budget),
            _markerDetail('gcstate', 'States', _timings.initial_state + ' – ' + _timings.final_state),
            triggers,
            _markerDetail('gcfaults', 'Page faults', _timings.page_faults)
          );
        }
      case 'Bailout':
        {
          return _react2.default.createElement(
            'div',
            { className: 'tooltipDetails' },
            _markerDetail('bailoutType', 'Type', data.bailoutType),
            _markerDetail('where', 'Where', data.where),
            _markerDetail('script', 'Script', data.script),
            _markerDetail('functionLine', 'Function Line', data.functionLine),
            _markerDetail('bailoutLine', 'Bailout Line', data.bailoutLine),
            _react2.default.createElement(
              'div',
              { className: 'tooltipLabel' },
              'Description:'
            ),
            _react2.default.createElement(
              'div',
              { style: { maxWidth: '300px' } },
              _markerInfo.bailoutTypeInformation['Bailout_' + data.bailoutType]
            )
          );
        }
      case 'Invalidation':
        {
          return _react2.default.createElement(
            'div',
            { className: 'tooltipDetails' },
            _markerDetail('url', 'URL', data.url),
            _markerDetail('line', 'Line', data.line)
          );
        }
      default:
    }
  }
  return null;
}

var MarkerTooltipContents = function (_PureComponent) {
  (0, _inherits3.default)(MarkerTooltipContents, _PureComponent);

  function MarkerTooltipContents() {
    (0, _classCallCheck3.default)(this, MarkerTooltipContents);
    return (0, _possibleConstructorReturn3.default)(this, (MarkerTooltipContents.__proto__ || Object.getPrototypeOf(MarkerTooltipContents)).apply(this, arguments));
  }

  (0, _createClass3.default)(MarkerTooltipContents, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          marker = _props.marker,
          className = _props.className,
          threadName = _props.threadName;

      var details = getMarkerDetails(marker.data);

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('tooltipMarker', className) },
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)({ tooltipHeader: details }) },
          _react2.default.createElement(
            'div',
            { className: 'tooltipOneLine' },
            _react2.default.createElement(
              'div',
              { className: 'tooltipTiming' },
              (0, _formatNumbers.formatNumber)(marker.dur),
              'ms'
            ),
            _react2.default.createElement(
              'div',
              { className: 'tooltipTitle' },
              marker.title || marker.name
            )
          ),
          threadName ? _react2.default.createElement(
            'div',
            { className: 'tooltipDetails' },
            _react2.default.createElement(
              'div',
              { className: 'tooltipLabel' },
              'Thread:'
            ),
            threadName
          ) : null
        ),
        details
      );
    }
  }]);
  return MarkerTooltipContents;
}(_react.PureComponent);

exports.default = MarkerTooltipContents;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _timeCode = __webpack_require__(45);

var _WithSize = __webpack_require__(135);

var _Tooltip = __webpack_require__(212);

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _MarkerTooltipContents = __webpack_require__(214);

var _MarkerTooltipContents2 = _interopRequireDefault(_MarkerTooltipContents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var IntervalMarkerOverview = function (_PureComponent) {
  (0, _inherits3.default)(IntervalMarkerOverview, _PureComponent);

  function IntervalMarkerOverview(props) {
    (0, _classCallCheck3.default)(this, IntervalMarkerOverview);

    var _this = (0, _possibleConstructorReturn3.default)(this, (IntervalMarkerOverview.__proto__ || Object.getPrototypeOf(IntervalMarkerOverview)).call(this, props));

    _this.state = {
      hoveredItem: null,
      mouseDownItem: null,
      mouseX: 0,
      mouseY: 0
    };
    _this._onMouseDown = _this._onMouseDown.bind(_this);
    _this._onMouseMove = _this._onMouseMove.bind(_this);
    _this._onMouseUp = _this._onMouseUp.bind(_this);
    _this._onMouseOut = _this._onMouseOut.bind(_this);
    _this._takeCanvasRef = _this._takeCanvasRef.bind(_this);
    _this._canvas = null;
    return _this;
  }

  (0, _createClass3.default)(IntervalMarkerOverview, [{
    key: '_takeCanvasRef',
    value: function _takeCanvasRef(c) {
      this._canvas = c;
    }
  }, {
    key: '_scheduleDraw',
    value: function _scheduleDraw() {
      var _this2 = this;

      window.requestAnimationFrame(function () {
        var c = _this2._canvas;
        if (c) {
          (0, _timeCode.timeCode)('IntervalMarkerTimeline render', function () {
            _this2.drawCanvas(c);
          });
        }
      });
    }
  }, {
    key: '_hitTest',
    value: function _hitTest(e) {
      var c = this._canvas;
      if (c === null) {
        return null;
      }

      var r = c.getBoundingClientRect();
      var _props = this.props,
          width = _props.width,
          rangeStart = _props.rangeStart,
          rangeEnd = _props.rangeEnd,
          intervalMarkers = _props.intervalMarkers,
          styles = _props.styles;

      var x = e.pageX - r.left;
      var y = e.pageY - r.top;
      var time = rangeStart + x / width * (rangeEnd - rangeStart);

      // Markers are drawn in array order; the one drawn last is on top. So if
      // there are multiple markers under the mouse, we want to find the one
      // with the highest array index. So we walk the list of intervalMarkers
      // from high index to low index, which is front to back in z-order.
      for (var i = intervalMarkers.length - 1; i >= 0; i--) {
        var _intervalMarkers$i = intervalMarkers[i],
            start = _intervalMarkers$i.start,
            dur = _intervalMarkers$i.dur,
            name = _intervalMarkers$i.name;

        if (time < start || time >= start + dur) {
          continue;
        }
        var style = name in styles ? styles[name] : styles.default;
        if (y >= style.top && y < style.top + style.height) {
          return intervalMarkers[i];
        }
      }
      return null;
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(event) {
      var hoveredItem = this._hitTest(event);
      if (hoveredItem !== null) {
        this.setState({
          hoveredItem: hoveredItem,
          mouseX: event.pageX,
          mouseY: event.pageY
        });
      } else if (this.state.hoveredItem !== null) {
        this.setState({
          hoveredItem: null
        });
      }
    }
  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      var mouseDownItem = this._hitTest(e);
      this.setState({ mouseDownItem: mouseDownItem });
      if (mouseDownItem !== null) {
        if (e.target.setCapture) {
          e.target.setCapture();
        }
        e.stopPropagation();
      }
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp(e) {
      var mouseDownItem = this.state.mouseDownItem;

      if (mouseDownItem !== null) {
        var mouseUpItem = this._hitTest(e);
        if (mouseDownItem === mouseUpItem && mouseUpItem !== null /* extra null check because flow doesn't realize it's unnecessary */
        ) {
            var _props2 = this.props,
                _onSelect = _props2.onSelect,
                _threadIndex = _props2.threadIndex;

            _onSelect(_threadIndex, mouseUpItem.start, mouseUpItem.start + mouseUpItem.dur);
          }
        this.setState({
          hoveredItem: mouseUpItem,
          mouseDownItem: null
        });
      }
    }
  }, {
    key: '_onMouseOut',
    value: function _onMouseOut() {
      this.setState({
        hoveredItem: null
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps !== this.props || prevState.hoveredItem !== this.state.hoveredItem) {
        this._scheduleDraw();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          className = _props3.className,
          isSelected = _props3.isSelected,
          isModifyingSelection = _props3.isModifyingSelection,
          threadName = _props3.threadName;
      var _state = this.state,
          mouseDownItem = _state.mouseDownItem,
          hoveredItem = _state.hoveredItem,
          mouseX = _state.mouseX,
          mouseY = _state.mouseY;

      var shouldShowTooltip = !isModifyingSelection && !mouseDownItem;
      var canvasClassName = className.split(' ').map(function (name) {
        return name + 'Canvas';
      }).join(' ');

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(className, isSelected ? 'selected' : null) },
        _react2.default.createElement('canvas', {
          className: (0, _classnames2.default)(canvasClassName, 'intervalMarkerTimelineCanvas'),
          ref: this._takeCanvasRef,
          onMouseDown: this._onMouseDown,
          onMouseMove: this._onMouseMove,
          onMouseUp: this._onMouseUp,
          onMouseOut: this._onMouseOut
        }),
        shouldShowTooltip && hoveredItem ? _react2.default.createElement(
          _Tooltip2.default,
          { mouseX: mouseX, mouseY: mouseY },
          _react2.default.createElement(_MarkerTooltipContents2.default, {
            marker: hoveredItem,
            threadName: threadName
          })
        ) : null
      );
    }
  }, {
    key: '_drawRoundedRect',
    value: function _drawRoundedRect(ctx, x, y, width, height, cornerSize) {
      // Cut out c x c -sized squares in the corners.
      var c = Math.min(width / 2, Math.min(height / 2, cornerSize));
      var bottom = y + height;
      ctx.fillRect(x + c, y, width - 2 * c, c);
      ctx.fillRect(x, y + c, width, height - 2 * c);
      ctx.fillRect(x + c, bottom - c, width - 2 * c, c);
    }
  }, {
    key: 'drawCanvas',
    value: function drawCanvas(c) {
      var _this3 = this;

      var _props4 = this.props,
          rangeStart = _props4.rangeStart,
          rangeEnd = _props4.rangeEnd,
          width = _props4.width,
          intervalMarkers = _props4.intervalMarkers,
          styles = _props4.styles,
          overlayFills = _props4.overlayFills;


      var devicePixelRatio = c.ownerDocument ? c.ownerDocument.defaultView.devicePixelRatio : 1;
      var height = c.getBoundingClientRect().height;
      var pixelWidth = Math.round(width * devicePixelRatio);
      var pixelHeight = Math.round(height * devicePixelRatio);

      if (c.width !== pixelWidth || c.height !== pixelHeight) {
        c.width = pixelWidth;
        c.height = pixelHeight;
      }
      var ctx = c.getContext('2d');
      if (ctx === null || ctx === undefined) {
        return;
      }

      ctx.clearRect(0, 0, pixelWidth, pixelHeight);
      ctx.scale(devicePixelRatio, devicePixelRatio);

      intervalMarkers.forEach(function (marker) {
        var start = marker.start,
            dur = marker.dur,
            name = marker.name;

        var pos = (start - rangeStart) / (rangeEnd - rangeStart) * width;
        var itemWidth = dur / (rangeEnd - rangeStart) * width;
        var style = name in styles ? styles[name] : styles.default;
        ctx.fillStyle = style.background;
        if (style.squareCorners) {
          ctx.fillRect(pos, style.top, itemWidth, style.height);
        } else {
          _this3._drawRoundedRect(ctx, pos, style.top, itemWidth, style.height, 1 / devicePixelRatio);
        }
        if (style.borderLeft !== null) {
          ctx.fillStyle = style.borderLeft;
          ctx.fillRect(pos, style.top, 1, style.height);
        }
        if (style.borderRight !== null) {
          ctx.fillStyle = style.borderRight;
          ctx.fillRect(pos + itemWidth - 1, style.top, 1, style.height);
        }
        var markerState = _this3._getMarkerState(marker);
        if (markerState === 'HOVERED' || markerState === 'PRESSED') {
          ctx.fillStyle = overlayFills[markerState];
          if (style.squareCorners) {
            ctx.fillRect(pos, style.top, itemWidth, style.height);
          } else {
            _this3._drawRoundedRect(ctx, pos, style.top, itemWidth, style.height, 1 / devicePixelRatio);
          }
        }
      });
      ctx.scale(1 / devicePixelRatio, 1 / devicePixelRatio);
    }
  }, {
    key: '_getMarkerState',
    value: function _getMarkerState(marker) {
      var _state2 = this.state,
          hoveredItem = _state2.hoveredItem,
          mouseDownItem = _state2.mouseDownItem;

      if (mouseDownItem !== null) {
        if (marker === mouseDownItem && marker === hoveredItem) {
          return 'PRESSED';
        }
        return 'NONE';
      }
      if (marker === hoveredItem) {
        return 'HOVERED';
      }
      return 'NONE';
    }
  }]);
  return IntervalMarkerOverview;
}(_react.PureComponent);

exports.default = (0, _WithSize.withSize)(IntervalMarkerOverview);

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overlayFills = exports.styles = undefined;

var _photonColors = __webpack_require__(128);

var colors = _interopRequireWildcard(_photonColors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var styles = exports.styles = {
  default: {
    top: 0,
    height: 6,
    background: 'black',
    squareCorners: false,
    borderLeft: null,
    borderRight: null
  },
  RefreshDriverTick: {
    background: 'hsla(0,0%,0%,0.05)',
    height: 18,
    squareCorners: true
  },
  RD: {
    background: 'hsla(0,0%,0%,0.05)',
    height: 18,
    squareCorners: true
  },
  Scripts: {
    background: colors.ORANGE_70,
    top: 6
  },
  Styles: {
    background: colors.TEAL_50,
    top: 7
  },
  FireScrollEvent: {
    background: colors.ORANGE_70,
    top: 7
  },
  Reflow: {
    background: colors.BLUE_50,
    top: 7
  },
  DispatchSynthMouseMove: {
    background: colors.ORANGE_70,
    top: 8
  },
  DisplayList: {
    background: colors.PURPLE_50,
    top: 9
  },
  LayerBuilding: {
    background: colors.ORANGE_50,
    top: 9
  },
  Rasterize: {
    background: colors.GREEN_50,
    top: 10
  },
  ForwardTransaction: {
    background: colors.RED_70,
    top: 11
  },
  NotifyDidPaint: {
    background: colors.GREY_40,
    top: 12
  },
  LayerTransaction: {
    background: colors.RED_70
  },
  Composite: {
    background: colors.BLUE_50
  },
  Vsync: {
    background: 'rgb(255, 128, 0)'
  },
  LayerContentGPU: {
    background: 'rgba(0,200,0,0.5)'
  },
  LayerCompositorGPU: {
    background: 'rgba(0,200,0,0.5)'
  },
  LayerOther: {
    background: 'rgb(200,0,0)'
  },
  Jank: {
    background: 'hsl(347, 100%, 60%)',
    borderLeft: colors.RED_50,
    borderRight: colors.RED_50,
    squareCorners: true
  }
}; /* This Source Code Form is subject to the terms of the Mozilla Public
    * License, v. 2.0. If a copy of the MPL was not distributed with this
    * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

for (var name in styles) {
  if (name !== 'default') {
    styles[name] = Object.assign({}, styles.default, styles[name]);
  }
}

var overlayFills = exports.overlayFills = {
  HOVERED: 'hsla(0,0%,100%,0.3)',
  PRESSED: 'rgba(0,0,0,0.3)'
};

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var deselectCurrent = __webpack_require__(516);

var defaultMessage = 'Copy to clipboard: #{key}, Enter';

function format(message) {
  var copyKey = (/mac os x/i.test(navigator.userAgent) ? '⌘' : 'Ctrl') + '+C';
  return message.replace(/#{\s*key\s*}/g, copyKey);
}

function copy(text, options) {
  var debug, message, reselectPrevious, range, selection, mark, success = false;
  if (!options) { options = {}; }
  debug = options.debug || false;
  try {
    reselectPrevious = deselectCurrent();

    range = document.createRange();
    selection = document.getSelection();

    mark = document.createElement('span');
    mark.textContent = text;
    // reset user styles for span element
    mark.style.all = 'unset';
    // prevents scrolling to the end of the page
    mark.style.position = 'fixed';
    mark.style.top = 0;
    mark.style.clip = 'rect(0, 0, 0, 0)';
    // used to preserve spaces and line breaks
    mark.style.whiteSpace = 'pre';
    // do not inherit user-select (it may be `none`)
    mark.style.webkitUserSelect = 'text';
    mark.style.MozUserSelect = 'text';
    mark.style.msUserSelect = 'text';
    mark.style.userSelect = 'text';

    document.body.appendChild(mark);

    range.selectNode(mark);
    selection.addRange(range);

    var successful = document.execCommand('copy');
    if (!successful) {
      throw new Error('copy command was unsuccessful');
    }
    success = true;
  } catch (err) {
    debug && console.error('unable to copy using execCommand: ', err);
    debug && console.warn('trying IE specific stuff');
    try {
      window.clipboardData.setData('text', text);
      success = true;
    } catch (err) {
      debug && console.error('unable to copy using clipboardData: ', err);
      debug && console.error('falling back to prompt');
      message = format('message' in options ? options.message : defaultMessage);
      window.prompt(message, text);
    }
  } finally {
    if (selection) {
      if (typeof selection.removeRange == 'function') {
        selection.removeRange(range);
      } else {
        selection.removeAllRanges();
      }
    }

    if (mark) {
      document.body.removeChild(mark);
    }
    reselectPrevious();
  }

  return success;
}

module.exports = copy;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(219);


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactAddonsPerf = __webpack_require__(234);

var _reactAddonsPerf2 = _interopRequireDefault(_reactAddonsPerf);

var _reactDom = __webpack_require__(67);

var _Root = __webpack_require__(321);

var _Root2 = _interopRequireDefault(_Root);

var _createStore = __webpack_require__(534);

var _createStore2 = _interopRequireDefault(_createStore);

__webpack_require__(541);

__webpack_require__(543);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (false) {
  var runtime = require('offline-plugin/runtime');
  runtime.install({
    onUpdateReady: function onUpdateReady() {
      runtime.applyUpdate();
    }
  });
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

window.geckoProfilerPromise = new Promise(function (resolve) {
  window.connectToGeckoProfiler = resolve;
});

var store = (0, _createStore2.default)();

(0, _reactDom.render)(_react2.default.createElement(_Root2.default, { store: store }), document.getElementById('root'));

window.Perf = _reactAddonsPerf2.default;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(221);
var ReactElement = __webpack_require__(37);

var emptyFunction = __webpack_require__(24);
var traverseAllChildren = __webpack_require__(222);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(47);

var invariant = __webpack_require__(5);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(47);

var ReactCurrentOwner = __webpack_require__(27);
var REACT_ELEMENT_TYPE = __webpack_require__(139);

var getIteratorFn = __webpack_require__(140);
var invariant = __webpack_require__(5);
var KeyEscapeUtils = __webpack_require__(223);
var warning = __webpack_require__(6);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (true) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (true) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(37);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (true) {
  var ReactElementValidator = __webpack_require__(141);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(47);

var ReactPropTypeLocationNames = __webpack_require__(226);
var ReactPropTypesSecret = __webpack_require__(227);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(20);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (true) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(20);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(37),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(142);

module.exports = factory(isValidElement);

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



if (true) {
  var invariant = __webpack_require__(5);
  var warning = __webpack_require__(6);
  var ReactPropTypesSecret = __webpack_require__(144);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(137),
    Component = _require.Component;

var _require2 = __webpack_require__(37),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = __webpack_require__(138);
var factory = __webpack_require__(232);

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var emptyObject = __webpack_require__(66);
var _invariant = __webpack_require__(5);

if (true) {
  var warning = __webpack_require__(6);
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (true) {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (true) {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (true) {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (true) {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (true) {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (true) {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (true) {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (true) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (true) {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (true) {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (true) {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (true) {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (true) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (true) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (true) {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(47);

var ReactElement = __webpack_require__(37);

var invariant = __webpack_require__(5);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ?  true ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(235);

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _assign = __webpack_require__(8);

var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ReactDebugTool = __webpack_require__(145);
var lowPriorityWarning = __webpack_require__(240);
var alreadyWarned = false;

function roundFloat(val) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var n = Math.pow(10, base);
  return Math.floor(val * n) / n;
}

// Flow type definition of console.table is too strict right now, see
// https://github.com/facebook/flow/pull/2353 for updates
function consoleTable(table) {
  console.table(table);
}

function warnInProduction() {
  if (alreadyWarned) {
    return;
  }
  alreadyWarned = true;
  if (typeof console !== 'undefined') {
    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
  }
}

function getLastMeasurements() {
  if (false) {
    warnInProduction();
    return [];
  }

  return ReactDebugTool.getFlushHistory();
}

function getExclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (false) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
    var displayName = treeSnapshot[instanceID].displayName;

    var key = displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        counts: {},
        durations: {},
        totalDuration: 0
      };
    }
    if (!stats.durations[timerType]) {
      stats.durations[timerType] = 0;
    }
    if (!stats.counts[timerType]) {
      stats.counts[timerType] = 0;
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
        stats.totalDuration += duration;
        stats.durations[timerType] += duration;
        stats.counts[timerType]++;
      });
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return _extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.totalDuration - a.totalDuration;
  });
}

function getInclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (false) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc.displayName,
        ownerID = _treeSnapshot$instanc.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  var isCompositeByID = {};
  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements;

    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      isCompositeByID[instanceID] = true;
    });
  });

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });
      var nextParentID = instanceID;
      while (nextParentID) {
        // As we traverse parents, only count inclusive time towards composites.
        // We know something is a composite if its render() was called.
        if (isCompositeByID[nextParentID]) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return _extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getWasted() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (false) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc2.displayName,
        ownerID = _treeSnapshot$instanc2.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot,
        operations = flush.operations;

    var isDefinitelyNotWastedByID = {};

    // Find host components associated with an operation in this batch.
    // Mark all components in their parent tree as definitely not wasted.
    operations.forEach(function (operation) {
      var instanceID = operation.instanceID;

      var nextParentID = instanceID;
      while (nextParentID) {
        isDefinitelyNotWastedByID[nextParentID] = true;
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });

    // Find composite components that rendered in this batch.
    // These are potential candidates for being wasted renders.
    var renderedCompositeIDs = {};
    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      renderedCompositeIDs[instanceID] = true;
    });

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }

      // If there was a DOM update below this component, or it has just been
      // mounted, its render() is not considered wasted.
      var updateCount = treeSnapshot[instanceID].updateCount;

      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
        return;
      }

      // We consider this render() wasted.
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });

      var nextParentID = instanceID;
      while (nextParentID) {
        // Any parents rendered during this batch are considered wasted
        // unless we previously marked them as dirty.
        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
        if (isWasted) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return _extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getOperations() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (false) {
    warnInProduction();
    return [];
  }

  var stats = [];
  flushHistory.forEach(function (flush, flushIndex) {
    var operations = flush.operations,
        treeSnapshot = flush.treeSnapshot;

    operations.forEach(function (operation) {
      var instanceID = operation.instanceID,
          type = operation.type,
          payload = operation.payload;
      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
          displayName = _treeSnapshot$instanc3.displayName,
          ownerID = _treeSnapshot$instanc3.ownerID;

      var owner = treeSnapshot[ownerID];
      var key = (owner ? owner.displayName + ' > ' : '') + displayName;

      stats.push({
        flushIndex: flushIndex,
        instanceID: instanceID,
        key: key,
        type: type,
        ownerID: ownerID,
        payload: payload
      });
    });
  });
  return stats;
}

function printExclusive(flushHistory) {
  if (false) {
    warnInProduction();
    return;
  }

  var stats = getExclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        totalDuration = item.totalDuration;

    var renderCount = item.counts.render || 0;
    var renderDuration = item.durations.render || 0;
    return {
      Component: key,
      'Total time (ms)': roundFloat(totalDuration),
      'Instance count': instanceCount,
      'Total render time (ms)': roundFloat(renderDuration),
      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
      'Render count': renderCount,
      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
    };
  });
  consoleTable(table);
}

function printInclusive(flushHistory) {
  if (false) {
    warnInProduction();
    return;
  }

  var stats = getInclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printWasted(flushHistory) {
  if (false) {
    warnInProduction();
    return;
  }

  var stats = getWasted(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printOperations(flushHistory) {
  if (false) {
    warnInProduction();
    return;
  }

  var stats = getOperations(flushHistory);
  var table = stats.map(function (stat) {
    return {
      'Owner > Node': stat.key,
      Operation: stat.type,
      Payload: typeof stat.payload === 'object' ? JSON.stringify(stat.payload) : stat.payload,
      'Flush index': stat.flushIndex,
      'Owner Component ID': stat.ownerID,
      'DOM Component ID': stat.instanceID
    };
  });
  consoleTable(table);
}

var warnedAboutPrintDOM = false;
function printDOM(measurements) {
  lowPriorityWarning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.');
  warnedAboutPrintDOM = true;
  return printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = false;
function getMeasurementsSummaryMap(measurements) {
  lowPriorityWarning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.');
  warnedAboutGetMeasurementsSummaryMap = true;
  return getWasted(measurements);
}

function start() {
  if (false) {
    warnInProduction();
    return;
  }

  ReactDebugTool.beginProfiling();
}

function stop() {
  if (false) {
    warnInProduction();
    return;
  }

  ReactDebugTool.endProfiling();
}

function isRunning() {
  if (false) {
    warnInProduction();
    return false;
  }

  return ReactDebugTool.isProfiling();
}

var ReactPerfAnalysis = {
  getLastMeasurements: getLastMeasurements,
  getExclusive: getExclusive,
  getInclusive: getInclusive,
  getWasted: getWasted,
  getOperations: getOperations,
  printExclusive: printExclusive,
  printInclusive: printInclusive,
  printWasted: printWasted,
  printOperations: printOperations,
  start: start,
  stop: stop,
  isRunning: isRunning,
  // Deprecated:
  printDOM: printDOM,
  getMeasurementsSummaryMap: getMeasurementsSummaryMap
};

module.exports = ReactPerfAnalysis;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(6);

if (true) {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
     true ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(239);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(17);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (true) {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(13);
var ReactDefaultInjection = __webpack_require__(242);
var ReactMount = __webpack_require__(169);
var ReactReconciler = __webpack_require__(48);
var ReactUpdates = __webpack_require__(28);
var ReactVersion = __webpack_require__(315);

var findDOMNode = __webpack_require__(316);
var getHostComponentFromComposite = __webpack_require__(170);
var renderSubtreeIntoContainer = __webpack_require__(317);
var warning = __webpack_require__(6);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (true) {
  var ExecutionEnvironment = __webpack_require__(17);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
     true ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

     true ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
         true ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (true) {
  var ReactInstrumentation = __webpack_require__(21);
  var ReactDOMUnknownPropertyHook = __webpack_require__(318);
  var ReactDOMNullInputValuePropHook = __webpack_require__(319);
  var ReactDOMInvalidARIAHook = __webpack_require__(320);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(243);
var BeforeInputEventPlugin = __webpack_require__(244);
var ChangeEventPlugin = __webpack_require__(248);
var DefaultEventPluginOrder = __webpack_require__(251);
var EnterLeaveEventPlugin = __webpack_require__(252);
var HTMLDOMPropertyConfig = __webpack_require__(253);
var ReactComponentBrowserEnvironment = __webpack_require__(254);
var ReactDOMComponent = __webpack_require__(260);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactDOMEmptyComponent = __webpack_require__(286);
var ReactDOMTreeTraversal = __webpack_require__(287);
var ReactDOMTextComponent = __webpack_require__(288);
var ReactDefaultBatchingStrategy = __webpack_require__(289);
var ReactEventListener = __webpack_require__(290);
var ReactInjection = __webpack_require__(292);
var ReactReconcileTransaction = __webpack_require__(293);
var SVGDOMPropertyConfig = __webpack_require__(299);
var SelectEventPlugin = __webpack_require__(300);
var SimpleEventPlugin = __webpack_require__(301);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(55);
var ExecutionEnvironment = __webpack_require__(17);
var FallbackCompositionState = __webpack_require__(245);
var SyntheticCompositionEvent = __webpack_require__(246);
var SyntheticInputEvent = __webpack_require__(247);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var PooledClass = __webpack_require__(38);

var getTextContentAccessor = __webpack_require__(149);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(30);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(30);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(56);
var EventPropagators = __webpack_require__(55);
var ExecutionEnvironment = __webpack_require__(17);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactUpdates = __webpack_require__(28);
var SyntheticEvent = __webpack_require__(30);

var inputValueTracking = __webpack_require__(152);
var getEventTarget = __webpack_require__(86);
var isEventSupported = __webpack_require__(87);
var isTextInputElement = __webpack_require__(153);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(250);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ?  true ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ?  true ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(55);
var ReactDOMComponentTree = __webpack_require__(13);
var SyntheticMouseEvent = __webpack_require__(70);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(34);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(89);
var ReactDOMIDOperations = __webpack_require__(259);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var DOMLazyTree = __webpack_require__(49);
var ExecutionEnvironment = __webpack_require__(17);

var createNodesFromMarkup = __webpack_require__(256);
var emptyFunction = __webpack_require__(24);
var invariant = __webpack_require__(5);

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(17);

var createArrayFromMixed = __webpack_require__(257);
var getMarkupWrap = __webpack_require__(258);
var invariant = __webpack_require__(5);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(5);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(17);

var invariant = __webpack_require__(5);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(89);
var ReactDOMComponentTree = __webpack_require__(13);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var AutoFocusUtils = __webpack_require__(261);
var CSSPropertyOperations = __webpack_require__(262);
var DOMLazyTree = __webpack_require__(49);
var DOMNamespaces = __webpack_require__(90);
var DOMProperty = __webpack_require__(34);
var DOMPropertyOperations = __webpack_require__(158);
var EventPluginHub = __webpack_require__(56);
var EventPluginRegistry = __webpack_require__(68);
var ReactBrowserEventEmitter = __webpack_require__(73);
var ReactDOMComponentFlags = __webpack_require__(146);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactDOMInput = __webpack_require__(272);
var ReactDOMOption = __webpack_require__(273);
var ReactDOMSelect = __webpack_require__(160);
var ReactDOMTextarea = __webpack_require__(274);
var ReactInstrumentation = __webpack_require__(21);
var ReactMultiChild = __webpack_require__(275);
var ReactServerRenderingTransaction = __webpack_require__(284);

var emptyFunction = __webpack_require__(24);
var escapeTextContentForBrowser = __webpack_require__(72);
var invariant = __webpack_require__(5);
var isEventSupported = __webpack_require__(87);
var shallowEqual = __webpack_require__(94);
var inputValueTracking = __webpack_require__(152);
var validateDOMNesting = __webpack_require__(98);
var warning = __webpack_require__(6);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

   true ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ?  true ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  true ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (true) {
     true ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
     true ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
     true ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ?  true ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (true) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
     true ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (true) {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ?  true ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ?  true ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ?  true ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (true) {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (true) {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (true) {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (true) {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (true) {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (true) {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (true) {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (true) {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (true) {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (true) {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ?  true ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (true) {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(13);

var focusNode = __webpack_require__(156);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(157);
var ExecutionEnvironment = __webpack_require__(17);
var ReactInstrumentation = __webpack_require__(21);

var camelizeStyleName = __webpack_require__(263);
var dangerousStyleValue = __webpack_require__(265);
var hyphenateStyleName = __webpack_require__(266);
var memoizeStringOnly = __webpack_require__(268);
var warning = __webpack_require__(6);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (true) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
     true ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
     true ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
     true ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
     true ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (true) {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (true) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (true) {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(264);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(157);
var warning = __webpack_require__(6);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (true) {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
           true ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(267);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(72);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(56);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(17);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var DOMPropertyOperations = __webpack_require__(158);
var LinkedValueUtils = __webpack_require__(92);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactUpdates = __webpack_require__(28);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (true) {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
         true ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
         true ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
         true ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
         true ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (true) {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
         true ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
         true ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ?  true ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var React = __webpack_require__(46);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactDOMSelect = __webpack_require__(160);

var warning = __webpack_require__(6);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
       true ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (true) {
       true ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var LinkedValueUtils = __webpack_require__(92);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactUpdates = __webpack_require__(28);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (true) {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
         true ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
         true ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (true) {
           true ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ?  true ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ?  true ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactComponentEnvironment = __webpack_require__(93);
var ReactInstanceMap = __webpack_require__(58);
var ReactInstrumentation = __webpack_require__(21);

var ReactCurrentOwner = __webpack_require__(27);
var ReactReconciler = __webpack_require__(48);
var ReactChildReconciler = __webpack_require__(276);

var emptyFunction = __webpack_require__(24);
var flattenChildren = __webpack_require__(283);
var invariant = __webpack_require__(5);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (true) {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (true) {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (true) {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (true) {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (true) {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (true) {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(48);

var instantiateReactComponent = __webpack_require__(161);
var KeyEscapeUtils = __webpack_require__(96);
var shouldUpdateReactComponent = __webpack_require__(95);
var traverseAllChildren = __webpack_require__(165);
var warning = __webpack_require__(6);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(20);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (true) {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(20);
    }
    if (!keyUnique) {
       true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (true) {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var React = __webpack_require__(46);
var ReactComponentEnvironment = __webpack_require__(93);
var ReactCurrentOwner = __webpack_require__(27);
var ReactErrorUtils = __webpack_require__(85);
var ReactInstanceMap = __webpack_require__(58);
var ReactInstrumentation = __webpack_require__(21);
var ReactNodeTypes = __webpack_require__(162);
var ReactReconciler = __webpack_require__(48);

if (true) {
  var checkReactTypeSpec = __webpack_require__(278);
}

var emptyObject = __webpack_require__(66);
var invariant = __webpack_require__(5);
var shallowEqual = __webpack_require__(94);
var shouldUpdateReactComponent = __webpack_require__(95);
var warning = __webpack_require__(6);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (true) {
     true ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
     true ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (true) {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ?  true ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (true) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
         true ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

       true ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (true) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
       true ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
       true ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
       true ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
       true ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
       true ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
       true ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
       true ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (true) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (true) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (true) {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (true) {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (true) {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (true) {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (true) {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (true) {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (true) {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (true) {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ?  true ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (true) {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ?  true ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (true) {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ?  true ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (true) {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (true) {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (true) {
       true ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (true) {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (true) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (true) {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (true) {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (true) {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (true) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (true) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  true ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ?  true ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (true) {
      var componentName = component && component.getName ? component.getName() : 'a component';
       true ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactPropTypeLocationNames = __webpack_require__(279);
var ReactPropTypesSecret = __webpack_require__(159);

var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(20);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (true) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(20);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(96);
var traverseAllChildren = __webpack_require__(165);
var warning = __webpack_require__(6);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(20);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (true) {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(20);
      }
      if (!keyUnique) {
         true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (true) {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var PooledClass = __webpack_require__(38);
var Transaction = __webpack_require__(69);
var ReactInstrumentation = __webpack_require__(21);
var ReactServerUpdateQueue = __webpack_require__(285);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (true) {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(97);

var warning = __webpack_require__(6);

function warnNoop(publicInstance, callerName) {
  if (true) {
    var constructor = publicInstance.constructor;
     true ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var DOMLazyTree = __webpack_require__(49);
var ReactDOMComponentTree = __webpack_require__(13);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var invariant = __webpack_require__(5);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ?  true ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7),
    _assign = __webpack_require__(8);

var DOMChildrenOperations = __webpack_require__(89);
var DOMLazyTree = __webpack_require__(49);
var ReactDOMComponentTree = __webpack_require__(13);

var escapeTextContentForBrowser = __webpack_require__(72);
var invariant = __webpack_require__(5);
var validateDOMNesting = __webpack_require__(98);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (true) {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ?  true ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var ReactUpdates = __webpack_require__(28);
var Transaction = __webpack_require__(69);

var emptyFunction = __webpack_require__(24);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var EventListener = __webpack_require__(166);
var ExecutionEnvironment = __webpack_require__(17);
var PooledClass = __webpack_require__(38);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactUpdates = __webpack_require__(28);

var getEventTarget = __webpack_require__(86);
var getUnboundedScrollPosition = __webpack_require__(291);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(34);
var EventPluginHub = __webpack_require__(56);
var EventPluginUtils = __webpack_require__(84);
var ReactComponentEnvironment = __webpack_require__(93);
var ReactEmptyComponent = __webpack_require__(163);
var ReactBrowserEventEmitter = __webpack_require__(73);
var ReactHostComponent = __webpack_require__(164);
var ReactUpdates = __webpack_require__(28);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(8);

var CallbackQueue = __webpack_require__(150);
var PooledClass = __webpack_require__(38);
var ReactBrowserEventEmitter = __webpack_require__(73);
var ReactInputSelection = __webpack_require__(167);
var ReactInstrumentation = __webpack_require__(21);
var Transaction = __webpack_require__(69);
var ReactUpdateQueue = __webpack_require__(97);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (true) {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(17);

var getNodeForCharacterOffset = __webpack_require__(295);
var getTextContentAccessor = __webpack_require__(149);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(297);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(298);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(55);
var ExecutionEnvironment = __webpack_require__(17);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactInputSelection = __webpack_require__(167);
var SyntheticEvent = __webpack_require__(30);

var getActiveElement = __webpack_require__(168);
var isTextInputElement = __webpack_require__(153);
var shallowEqual = __webpack_require__(94);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(7);

var EventListener = __webpack_require__(166);
var EventPropagators = __webpack_require__(55);
var ReactDOMComponentTree = __webpack_require__(13);
var SyntheticAnimationEvent = __webpack_require__(302);
var SyntheticClipboardEvent = __webpack_require__(303);
var SyntheticEvent = __webpack_require__(30);
var SyntheticFocusEvent = __webpack_require__(304);
var SyntheticKeyboardEvent = __webpack_require__(305);
var SyntheticMouseEvent = __webpack_require__(70);
var SyntheticDragEvent = __webpack_require__(307);
var SyntheticTouchEvent = __webpack_require__(308);
var SyntheticTransitionEvent = __webpack_require__(309);
var SyntheticUIEvent = __webpack_require__(57);
var SyntheticWheelEvent = __webpack_require__(310);

var emptyFunction = __webpack_require__(24);
var getEventCharCode = __webpack_require__(99);
var invariant = __webpack_require__(5);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ?  true ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(30);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(30);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(57);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(57);

var getEventCharCode = __webpack_require__(99);
var getEventKey = __webpack_require__(306);
var getEventModifierState = __webpack_require__(88);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(99);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(70);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(57);

var getEventModifierState = __webpack_require__(88);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(30);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(70);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(98);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (true) {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(314);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(7);

var ReactCurrentOwner = __webpack_require__(27);
var ReactDOMComponentTree = __webpack_require__(13);
var ReactInstanceMap = __webpack_require__(58);

var getHostComponentFromComposite = __webpack_require__(170);
var invariant = __webpack_require__(5);
var warning = __webpack_require__(6);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (true) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
       true ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ?  true ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ?  true ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(169);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(34);
var EventPluginRegistry = __webpack_require__(68);
var ReactComponentTreeHook = __webpack_require__(20);

var warning = __webpack_require__(6);

if (true) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
       true ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
       true ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
     true ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
     true ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(20);

var warning = __webpack_require__(6);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
     true ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(34);
var ReactComponentTreeHook = __webpack_require__(20);

var warning = __webpack_require__(6);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
       true ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
     true ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
     true ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (true) {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (true) {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _receiveProfile = __webpack_require__(115);

var _ProfileViewer = __webpack_require__(407);

var _ProfileViewer2 = _interopRequireDefault(_ProfileViewer);

var _Home = __webpack_require__(526);

var _Home2 = _interopRequireDefault(_Home);

var _urlHandling = __webpack_require__(191);

var _app = __webpack_require__(82);

var _urlState = __webpack_require__(15);

var _UrlManager = __webpack_require__(531);

var _UrlManager2 = _interopRequireDefault(_UrlManager);

var _FooterLinks = __webpack_require__(136);

var _FooterLinks2 = _interopRequireDefault(_FooterLinks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
__webpack_require__(532);

var LOADING_MESSAGES = Object.freeze({
  'from-addon': 'Grabbing the profile from the Gecko Profiler Addon...',
  'from-file': 'Reading the file and processing the profile...',
  local: 'Not implemented yet.',
  public: 'Downloading and processing the profile...',
  'from-url': 'Downloading and processing the profile...'
});

var ERROR_MESSAGES = Object.freeze({
  'from-addon': "Couldn't retrieve the profile from the Gecko Profiler Addon.",
  'from-file': "Couldn't read the file or parse the profile in it.",
  local: 'Not implemented yet.',
  public: 'Could not download the profile.',
  'from-url': 'Could not download the profile.'
});

// TODO Switch to a proper i18n library
function fewTimes(count) {
  switch (count) {
    case 1:
      return 'once';
    case 2:
      return 'twice';
    default:
      return count + ' times';
  }
}

function toParagraphs(str) {
  return str.split('\n').map(function (s, i) {
    return _react2.default.createElement(
      'p',
      { key: i },
      s
    );
  });
}

var ProfileViewWhenReadyImpl = function (_PureComponent) {
  (0, _inherits3.default)(ProfileViewWhenReadyImpl, _PureComponent);

  function ProfileViewWhenReadyImpl() {
    (0, _classCallCheck3.default)(this, ProfileViewWhenReadyImpl);
    return (0, _possibleConstructorReturn3.default)(this, (ProfileViewWhenReadyImpl.__proto__ || Object.getPrototypeOf(ProfileViewWhenReadyImpl)).apply(this, arguments));
  }

  (0, _createClass3.default)(ProfileViewWhenReadyImpl, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          dataSource = _props.dataSource,
          hash = _props.hash,
          profileUrl = _props.profileUrl,
          retrieveProfileFromAddon = _props.retrieveProfileFromAddon,
          retrieveProfileFromStore = _props.retrieveProfileFromStore,
          retrieveProfileFromUrl = _props.retrieveProfileFromUrl;

      switch (dataSource) {
        case 'from-addon':
          retrieveProfileFromAddon();
          break;
        case 'from-file':
          // retrieveProfileFromFile should already have been called
          break;
        case 'local':
          break;
        case 'public':
          retrieveProfileFromStore(hash);
          break;
        case 'from-url':
          retrieveProfileFromUrl(profileUrl);
          break;
        case 'none':
          // nothing to do
          break;
        default:
          throw new Error('Unknown datasource ' + dataSource);
      }
    }
  }, {
    key: 'renderMessage',
    value: function renderMessage(message, additionalMessage, showLoader) {
      return _react2.default.createElement(
        'div',
        { className: 'rootMessageContainer' },
        _react2.default.createElement(
          'div',
          { className: 'rootMessage' },
          _react2.default.createElement(
            'h1',
            { className: 'rootMessageTitle' },
            'perf.html'
          ),
          _react2.default.createElement(
            'div',
            { className: 'rootMessageText' },
            message
          ),
          additionalMessage ? _react2.default.createElement(
            'div',
            { className: 'rootMessageAdditional' },
            toParagraphs(additionalMessage)
          ) : null,
          showLoader ? _react2.default.createElement(
            'div',
            { className: 'loading' },
            _react2.default.createElement('div', { className: 'loading-div loading-div-1 loading-row-1' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-2 loading-row-2' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-3 loading-row-3' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-4 loading-row-3' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-5 loading-row-4' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-6 loading-row-4' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-7 loading-row-4' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-8 loading-row-4' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-9 loading-row-4' }),
            _react2.default.createElement('div', { className: 'loading-div loading-div-10 loading-row-4' })
          ) : null
        ),
        _react2.default.createElement(_FooterLinks2.default, null)
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          view = _props2.view,
          dataSource = _props2.dataSource;

      switch (view.phase) {
        case 'INITIALIZING':
          {
            if (dataSource === 'none') {
              return _react2.default.createElement(_Home2.default, null);
            }

            var loadingMessage = LOADING_MESSAGES[dataSource];
            var message = loadingMessage ? loadingMessage : 'View not found';
            var showLoader = Boolean(loadingMessage);

            var additionalMessage = '';
            if (view.additionalData) {
              if (view.additionalData.message) {
                additionalMessage = view.additionalData.message;
              }

              if (view.additionalData.attempt) {
                var attempt = view.additionalData.attempt;
                additionalMessage += '\nTried ' + fewTimes(attempt.count) + ' out of ' + attempt.total + '.';
              }
            }

            return this.renderMessage(message, additionalMessage, showLoader);
          }
        case 'FATAL_ERROR':
          {
            var _message = ERROR_MESSAGES[dataSource] || "Couldn't retrieve the profile.";
            var _additionalMessage = null;
            if (view.error) {
              console.error(view.error);
              _additionalMessage = view.error.toString() + '\n' + 'The full stack has been written to the Web Console.';
            }

            return this.renderMessage(_message, _additionalMessage, false);
          }
        case 'PROFILE':
          return _react2.default.createElement(_ProfileViewer2.default, null);
        case 'ROUTE_NOT_FOUND':
        default:
          return _react2.default.createElement(_Home2.default, { specialMessage: 'The URL you came in on was not recognized.' });
      }
    }
  }]);
  return ProfileViewWhenReadyImpl;
}(_react.PureComponent);

var ProfileViewWhenReady = (0, _reactRedux.connect)(function (state) {
  return {
    view: (0, _app.getView)(state),
    dataSource: (0, _urlState.getDataSource)(state),
    hash: (0, _urlState.getHash)(state),
    profileUrl: (0, _urlState.getProfileUrl)(state)
  };
}, { retrieveProfileFromStore: _receiveProfile.retrieveProfileFromStore, retrieveProfileFromUrl: _receiveProfile.retrieveProfileFromUrl, retrieveProfileFromAddon: _receiveProfile.retrieveProfileFromAddon })(ProfileViewWhenReadyImpl);

var Root = function (_PureComponent2) {
  (0, _inherits3.default)(Root, _PureComponent2);

  function Root() {
    (0, _classCallCheck3.default)(this, Root);
    return (0, _possibleConstructorReturn3.default)(this, (Root.__proto__ || Object.getPrototypeOf(Root)).apply(this, arguments));
  }

  (0, _createClass3.default)(Root, [{
    key: 'render',
    value: function render() {
      var store = this.props.store;

      return _react2.default.createElement(
        _reactRedux.Provider,
        { store: store },
        _react2.default.createElement(
          _UrlManager2.default,
          {
            urlFromState: _urlHandling.urlFromState,
            stateFromLocation: _urlHandling.stateFromLocation
          },
          _react2.default.createElement(ProfileViewWhenReady, null)
        )
      );
    }
  }]);
  return Root;
}(_react.PureComponent);

exports.default = Root;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(323);
var $Object = __webpack_require__(16).Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(25);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(33), 'Object', {defineProperty: __webpack_require__(31).f});

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(325), __esModule: true };

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(60);
__webpack_require__(77);
module.exports = __webpack_require__(111).f('iterator');

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(103)
  , defined   = __webpack_require__(104);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(105)
  , descriptor     = __webpack_require__(59)
  , setToStringTag = __webpack_require__(76)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(39)(IteratorPrototype, __webpack_require__(18)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(42)
  , toLength  = __webpack_require__(106)
  , toIndex   = __webpack_require__(329);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(103)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(41)
  , toObject    = __webpack_require__(110)
  , IE_PROTO    = __webpack_require__(107)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(332)
  , step             = __webpack_require__(333)
  , Iterators        = __webpack_require__(52)
  , toIObject        = __webpack_require__(42);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(173)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 332 */
/***/ (function(module, exports) {

module.exports = function(){ /* empty */ };

/***/ }),
/* 333 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(335), __esModule: true };

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(336);
__webpack_require__(182);
__webpack_require__(341);
__webpack_require__(342);
module.exports = __webpack_require__(16).Symbol;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(22)
  , has            = __webpack_require__(41)
  , DESCRIPTORS    = __webpack_require__(33)
  , $export        = __webpack_require__(25)
  , redefine       = __webpack_require__(174)
  , META           = __webpack_require__(179).KEY
  , $fails         = __webpack_require__(51)
  , shared         = __webpack_require__(108)
  , setToStringTag = __webpack_require__(76)
  , uid            = __webpack_require__(75)
  , wks            = __webpack_require__(18)
  , wksExt         = __webpack_require__(111)
  , wksDefine      = __webpack_require__(112)
  , keyOf          = __webpack_require__(337)
  , enumKeys       = __webpack_require__(338)
  , isArray        = __webpack_require__(339)
  , anObject       = __webpack_require__(32)
  , toIObject      = __webpack_require__(42)
  , toPrimitive    = __webpack_require__(102)
  , createDesc     = __webpack_require__(59)
  , _create        = __webpack_require__(105)
  , gOPNExt        = __webpack_require__(340)
  , $GOPD          = __webpack_require__(181)
  , $DP            = __webpack_require__(31)
  , $keys          = __webpack_require__(61)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(180).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(78).f  = $propertyIsEnumerable;
  __webpack_require__(113).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(74)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(39)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(61)
  , toIObject = __webpack_require__(42);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(61)
  , gOPS    = __webpack_require__(113)
  , pIE     = __webpack_require__(78);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(62);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(42)
  , gOPN      = __webpack_require__(180).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(112)('asyncIterator');

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(112)('observable');

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(344), __esModule: true };

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(345);
module.exports = __webpack_require__(16).Object.setPrototypeOf;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(25);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(346).set});

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(40)
  , anObject = __webpack_require__(32);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(50)(Function.call, __webpack_require__(181).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(348), __esModule: true };

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(349);
var $Object = __webpack_require__(16).Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(25)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(105)});

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */


var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try { // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
};


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (true) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;


/***/ }),
/* 352 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/* harmony default export */ __webpack_exports__["a"] = (freeGlobal);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(63)))

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(354);


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = __webpack_require__(355);

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63), __webpack_require__(183)(module)))

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(357), __esModule: true };

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(77);
__webpack_require__(60);
module.exports = __webpack_require__(358);

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(116)
  , ITERATOR  = __webpack_require__(18)('iterator')
  , Iterators = __webpack_require__(52);
module.exports = __webpack_require__(16).isIterable = function(it){
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    || Iterators.hasOwnProperty(classof(O));
};

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(360), __esModule: true };

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(77);
__webpack_require__(60);
module.exports = __webpack_require__(361);

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(32)
  , get      = __webpack_require__(117);
module.exports = __webpack_require__(16).getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(363), __esModule: true };

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(364);
var $Object = __webpack_require__(16).Object;
module.exports = function defineProperties(T, D){
  return $Object.defineProperties(T, D);
};

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(25);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(33), 'Object', {defineProperties: __webpack_require__(175)});

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(366), __esModule: true };

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(367);
module.exports = __webpack_require__(16).Object.freeze;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(40)
  , meta     = __webpack_require__(179).onFreeze;

__webpack_require__(368)('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(25)
  , core    = __webpack_require__(16)
  , fails   = __webpack_require__(51);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(370);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 370 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(372), __esModule: true };

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(182);
__webpack_require__(60);
__webpack_require__(77);
__webpack_require__(373);
module.exports = __webpack_require__(16).Promise;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(74)
  , global             = __webpack_require__(22)
  , ctx                = __webpack_require__(50)
  , classof            = __webpack_require__(116)
  , $export            = __webpack_require__(25)
  , isObject           = __webpack_require__(40)
  , aFunction          = __webpack_require__(100)
  , anInstance         = __webpack_require__(374)
  , forOf              = __webpack_require__(375)
  , speciesConstructor = __webpack_require__(376)
  , task               = __webpack_require__(187).set
  , microtask          = __webpack_require__(378)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(18)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(379)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(76)($Promise, PROMISE);
__webpack_require__(380)(PROMISE);
Wrapper = __webpack_require__(16)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(188)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 374 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(50)
  , call        = __webpack_require__(185)
  , isArrayIter = __webpack_require__(186)
  , anObject    = __webpack_require__(32)
  , toLength    = __webpack_require__(106)
  , getIterFn   = __webpack_require__(117)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(32)
  , aFunction = __webpack_require__(100)
  , SPECIES   = __webpack_require__(18)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 377 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(22)
  , macrotask = __webpack_require__(187).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(62)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(39);
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(22)
  , core        = __webpack_require__(16)
  , dP          = __webpack_require__(31)
  , DESCRIPTORS = __webpack_require__(33)
  , SPECIES     = __webpack_require__(18)('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 381 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/taggedTemplateLiteral.js
var taggedTemplateLiteral = __webpack_require__(184);
var taggedTemplateLiteral_default = /*#__PURE__*/__webpack_require__.n(taggedTemplateLiteral);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(1);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/createClass.js
var createClass = __webpack_require__(2);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// CONCATENATED MODULE: ./node_modules/common-tags/es/TemplateTag/TemplateTag.js


/**
 * @class TemplateTag
 * @classdesc Consumes a pipeline of composeable transformer plugins and produces a template tag.
 */





var _templateObject = taggedTemplateLiteral_default()(['', ''], ['', '']);

var TemplateTag_TemplateTag = function () {
  /**
   * constructs a template tag
   * @constructs TemplateTag
   * @param  {...Object} [...transformers] - an array or arguments list of transformers
   * @return {Function}                    - a template tag
   */
  function TemplateTag() {
    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {
      transformers[_key] = arguments[_key];
    }

    classCallCheck_default()(this, TemplateTag);

    // if first argument is an array, extrude it as a list of transformers
    if (transformers.length && Array.isArray(transformers[0])) {
      transformers = transformers[0];
    }

    // if any transformers are functions, this means they are not initiated - automatically initiate them
    this.transformers = transformers.map(function (transformer) {
      return typeof transformer === 'function' ? transformer() : transformer;
    });

    // return an ES2015 template tag
    return this.tag.bind(this);
  }

  /**
   * Applies all transformers to a template literal tagged with this method.
   * If a function is passed as the first argument, assumes the function is a template tag
   * and applies it to the template, returning a template tag.
   * @param  {(Function|Array<String>)} args[0] - Either a template tag or an array containing template strings separated by identifier
   * @param  {...*} [args[1]]                   - Optional list of substitution values.
   * @return {(String|Function)}                - Either an intermediary tag function or the results of processing the template.
   */


  createClass_default()(TemplateTag, [{
    key: 'tag',
    value: function tag() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // if the first argument passed is a function, assume it is a template tag and return
      // an intermediary tag that processes the template using the aforementioned tag, passing the
      // result to our tag
      if (typeof args[0] === 'function') {
        return this.interimTag.bind(this, args.shift());
      }

      // else, return a transformed end result of processing the template with our tag
      return this.transformEndResult(args.shift().reduce(this.processSubstitutions.bind(this, args)));
    }

    /**
     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received
     * template tag to our own template tag.
     * @param  {Function}        nextTag          - the received template tag
     * @param  {Array<String>}   template         - the template to process
     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template
     * @return {*}                                - the final processed value
     */

  }, {
    key: 'interimTag',
    value: function interimTag(previousTag, template) {
      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        substitutions[_key3 - 2] = arguments[_key3];
      }

      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));
    }

    /**
     * Performs bulk processing on the tagged template, transforming each substitution and then
     * concatenating the resulting values into a string.
     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template
     * @param  {String}   resultSoFar   - this iteration's result string so far
     * @param  {String}   remainingPart - the template chunk after the current substitution
     * @return {String}                 - the result of joining this iteration's processed substitution with the result
     */

  }, {
    key: 'processSubstitutions',
    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {
      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);
      return resultSoFar + substitution + remainingPart;
    }

    /**
     * When a substitution is encountered, iterates through each transformer and applies the transformer's
     * `onSubstitution` method to the substitution.
     * @param  {*}      substitution - The current substitution
     * @param  {String} resultSoFar  - The result up to and excluding this substitution.
     * @return {*}                   - The final result of applying all substitution transformations.
     */

  }, {
    key: 'transformSubstitution',
    value: function transformSubstitution(substitution, resultSoFar) {
      var cb = function cb(res, transform) {
        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;
      };
      return this.transformers.reduce(cb, substitution);
    }

    /**
     * Iterates through each transformer, applying the transformer's `onEndResult` method to the
     * template literal after all substitutions have finished processing.
     * @param  {String} endResult - The processed template, just before it is returned from the tag
     * @return {String}           - The final results of processing each transformer
     */

  }, {
    key: 'transformEndResult',
    value: function transformEndResult(endResult) {
      var cb = function cb(res, transform) {
        return transform.onEndResult ? transform.onEndResult(res) : res;
      };
      return this.transformers.reduce(cb, endResult);
    }
  }]);

  return TemplateTag;
}();

/* harmony default export */ var es_TemplateTag_TemplateTag = (TemplateTag_TemplateTag);
//# sourceMappingURL=data:application/json;base64,
// CONCATENATED MODULE: ./node_modules/common-tags/es/TemplateTag/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZW1wbGF0ZVRhZy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLGU7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9UZW1wbGF0ZVRhZydcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js


/**
 * TemplateTag transformer that trims whitespace on the end result of a tagged template
 * @param  {String} side = '' - The side of the string to trim. Can be 'left' or 'right'
 * @return {Object}           - a TemplateTag transformer
 */

var trimResultTransformer = function trimResultTransformer() {
  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return {
    onEndResult: function onEndResult(endResult) {
      side = side.toLowerCase();
      // uppercase the first letter of side value
      if (side === 'left' || side === 'right') {
        side = side.charAt(0).toUpperCase() + side.slice(1);
      } else if (side !== '') {
        throw new Error('Side not supported: ' + side);
      }
      return endResult['trim' + side]();
    }
  };
};

/* harmony default export */ var trimResultTransformer_trimResultTransformer = (trimResultTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRvTG93ZXJDYXNlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQy9CQyxTQUQrQixFQUNwQjtBQUN0QkYsYUFBT0EsS0FBS0csV0FBTCxFQUFQO0FBQ0E7QUFDQSxVQUFJSCxTQUFTLE1BQVQsSUFBbUJBLFNBQVMsT0FBaEMsRUFBeUM7QUFDdkNBLGVBQU9BLEtBQUtJLE1BQUwsQ0FBWSxDQUFaLEVBQWVDLFdBQWYsS0FBK0JMLEtBQUtNLEtBQUwsQ0FBVyxDQUFYLENBQXRDO0FBQ0QsT0FGRCxNQUVPLElBQUlOLFNBQVMsRUFBYixFQUFpQjtBQUN0QixjQUFNLElBQUlPLEtBQUosMEJBQWlDUCxJQUFqQyxDQUFOO0FBQ0Q7QUFDRCxhQUFPRSxtQkFBaUJGLElBQWpCLEdBQVA7QUFDRDtBQVYyQyxHQUFoQjtBQUFBLENBQTlCOztBQWFBLGVBQWVELHFCQUFmIiwiZmlsZSI6InRyaW1SZXN1bHRUcmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnbGVmdCcgb3IgJ3JpZ2h0J1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0IChlbmRSZXN1bHQpIHtcbiAgICBzaWRlID0gc2lkZS50b0xvd2VyQ2FzZSgpXG4gICAgLy8gdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2Ygc2lkZSB2YWx1ZVxuICAgIGlmIChzaWRlID09PSAnbGVmdCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgc2lkZSA9IHNpZGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzaWRlLnNsaWNlKDEpXG4gICAgfSBlbHNlIGlmIChzaWRlICE9PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaWRlIG5vdCBzdXBwb3J0ZWQ6ICR7c2lkZX1gKVxuICAgIH1cbiAgICByZXR1cm4gZW5kUmVzdWx0W2B0cmltJHtzaWRlfWBdKClcbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/trimResultTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O3FCQUVvQix5QjtxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcidcbiJdfQ==
// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(36);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js


/**
 * strips indentation from a template literal
 * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'
 * @return {Object}                  - a TemplateTag transformer
 */


var stripIndentTransformer_stripIndentTransformer = function stripIndentTransformer() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';
  return {
    onEndResult: function onEndResult(endResult) {
      if (type === 'initial') {
        // remove the shortest leading indentation from each line
        var match = endResult.match(/^[ \t]*(?=\S)/gm);
        // return early if there's nothing to strip
        if (match === null) {
          return endResult;
        }
        var indent = Math.min.apply(Math, toConsumableArray_default()(match.map(function (el) {
          return el.length;
        })));
        var regexp = new RegExp('^[ \\t]{' + indent + '}', 'gm');
        endResult = indent > 0 ? endResult.replace(regexp, '') : endResult;
      } else if (type === 'all') {
        // remove all indentation from each line
        endResult = endResult.split('\n').map(function (line) {
          return line.trimLeft();
        }).join('\n');
      } else {
        throw new Error('Unknown type: ' + type);
      }
      return endResult;
    }
  };
};

/* harmony default export */ var es_stripIndentTransformer_stripIndentTransformer = (stripIndentTransformer_stripIndentTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsInNwbGl0IiwibGluZSIsInRyaW1MZWZ0Iiwiam9pbiIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN2Q0MsU0FEdUMsRUFDNUI7QUFDdEIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixpQkFBaEIsQ0FBZDtBQUNBO0FBQ0EsWUFBSUEsVUFBVSxJQUFkLEVBQW9CO0FBQ2xCLGlCQUFPRCxTQUFQO0FBQ0Q7QUFDRCxZQUFNRSxTQUFTQyxLQUFLQyxHQUFMLGdDQUFZSCxNQUFNSSxHQUFOLENBQVU7QUFBQSxpQkFBTUMsR0FBR0MsTUFBVDtBQUFBLFNBQVYsQ0FBWixFQUFmO0FBQ0EsWUFBTUMsU0FBUyxJQUFJQyxNQUFKLENBQVcsYUFBYVAsTUFBYixHQUFzQixHQUFqQyxFQUFzQyxJQUF0QyxDQUFmO0FBQ0FGLG9CQUFZRSxTQUFTLENBQVQsR0FBYUYsVUFBVVUsT0FBVixDQUFrQkYsTUFBbEIsRUFBMEIsRUFBMUIsQ0FBYixHQUE2Q1IsU0FBekQ7QUFDRCxPQVZELE1BVU8sSUFBSUYsU0FBUyxLQUFiLEVBQW9CO0FBQ3pCO0FBQ0FFLG9CQUFZQSxVQUFVVyxLQUFWLENBQWdCLElBQWhCLEVBQXNCTixHQUF0QixDQUEwQjtBQUFBLGlCQUFRTyxLQUFLQyxRQUFMLEVBQVI7QUFBQSxTQUExQixFQUFtREMsSUFBbkQsQ0FBd0QsSUFBeEQsQ0FBWjtBQUNELE9BSE0sTUFHQTtBQUNMLGNBQU0sSUFBSUMsS0FBSixvQkFBMkJqQixJQUEzQixDQUFOO0FBQ0Q7QUFDRCxhQUFPRSxTQUFQO0FBQ0Q7QUFuQm1ELEdBQXZCO0FBQUEsQ0FBL0I7O0FBc0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdCAoZW5kUmVzdWx0KSB7XG4gICAgaWYgKHR5cGUgPT09ICdpbml0aWFsJykge1xuICAgICAgLy8gcmVtb3ZlIHRoZSBzaG9ydGVzdCBsZWFkaW5nIGluZGVudGF0aW9uIGZyb20gZWFjaCBsaW5lXG4gICAgICBjb25zdCBtYXRjaCA9IGVuZFJlc3VsdC5tYXRjaCgvXlsgXFx0XSooPz1cXFMpL2dtKVxuICAgICAgLy8gcmV0dXJuIGVhcmx5IGlmIHRoZXJlJ3Mgbm90aGluZyB0byBzdHJpcFxuICAgICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHRcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZGVudCA9IE1hdGgubWluKC4uLm1hdGNoLm1hcChlbCA9PiBlbC5sZW5ndGgpKVxuICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cCgnXlsgXFxcXHRdeycgKyBpbmRlbnQgKyAnfScsICdnbScpXG4gICAgICBlbmRSZXN1bHQgPSBpbmRlbnQgPiAwID8gZW5kUmVzdWx0LnJlcGxhY2UocmVnZXhwLCAnJykgOiBlbmRSZXN1bHRcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhbGwnKSB7XG4gICAgICAvLyByZW1vdmUgYWxsIGluZGVudGF0aW9uIGZyb20gZWFjaCBsaW5lXG4gICAgICBlbmRSZXN1bHQgPSBlbmRSZXN1bHQuc3BsaXQoJ1xcbicpLm1hcChsaW5lID0+IGxpbmUudHJpbUxlZnQoKSkuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHR5cGU6ICR7dHlwZX1gKVxuICAgIH1cbiAgICByZXR1cm4gZW5kUmVzdWx0XG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXJcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndentTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsMEI7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJ1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js


/**
 * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences
 * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced
 * @param  {*}               replaceWith - the replacement value
 * @return {Object}                      - a TemplateTag transformer
 */

var replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {
  return {
    onEndResult: function onEndResult(endResult) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error('replaceResultTransformer requires at least 2 arguments.');
      }
      return endResult.replace(replaceWhat, replaceWith);
    }
  };
};

/* harmony default export */ var replaceResultTransformer_replaceResultTransformer = (replaceResultTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7Ozs7QUFNQSxJQUFNQSwyQkFBMkIsU0FBM0JBLHdCQUEyQixDQUFDQyxXQUFELEVBQWNDLFdBQWQ7QUFBQSxTQUErQjtBQUM5REMsZUFEOEQsdUJBQ2pEQyxTQURpRCxFQUN0QztBQUN0QixVQUFJSCxlQUFlLElBQWYsSUFBdUJDLGVBQWUsSUFBMUMsRUFBZ0Q7QUFDOUMsY0FBTSxJQUFJRyxLQUFKLENBQVUseURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0QsVUFBVUUsT0FBVixDQUFrQkwsV0FBbEIsRUFBK0JDLFdBQS9CLENBQVA7QUFDRDtBQU42RCxHQUEvQjtBQUFBLENBQWpDOztBQVNBLGVBQWVGLHdCQUFmIiwiZmlsZSI6InJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIFJlcGxhY2VzIHRhYnMsIG5ld2xpbmVzIGFuZCBzcGFjZXMgd2l0aCB0aGUgY2hvc2VuIHZhbHVlIHdoZW4gdGhleSBvY2N1ciBpbiBzZXF1ZW5jZXNcbiAqIEBwYXJhbSAgeyhTdHJpbmd8UmVnRXhwKX0gcmVwbGFjZVdoYXQgLSB0aGUgdmFsdWUgb3IgcGF0dGVybiB0aGF0IHNob3VsZCBiZSByZXBsYWNlZFxuICogQHBhcmFtICB7Kn0gICAgICAgICAgICAgICByZXBsYWNlV2l0aCAtIHRoZSByZXBsYWNlbWVudCB2YWx1ZVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3QgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyID0gKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCkgPT4gKHtcbiAgb25FbmRSZXN1bHQgKGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicpXG4gICAgfVxuICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpXG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lclxuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/replaceResultTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O3FCQUVvQiw0QjtxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcidcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js


var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');
      }

      // Do not touch if null or undefined
      if (substitution == null) {
        return substitution;
      } else {
        return substitution.toString().replace(replaceWhat, replaceWith);
      }
    }
  };
};

/* harmony default export */ var replaceSubstitutionTransformer_replaceSubstitutionTransformer = (replaceSubstitutionTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3BEQyxZQURvRCxFQUN0Q0MsV0FEc0MsRUFDekI7QUFDekMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUFVLCtEQUFWLENBQU47QUFDRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQVptRSxHQUEvQjtBQUFBLENBQXZDOztBQWVBLGVBQWVGLDhCQUFmIiwiZmlsZSI6InJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbiAoc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicpXG4gICAgfVxuXG4gICAgLy8gRG8gbm90IHRvdWNoIGlmIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgaWYgKHN1YnN0aXR1dGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aClcbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lclxuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/replaceSubstitutionTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O3FCQUVvQixrQztxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcidcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js


var defaults = {
  separator: '',
  conjunction: '',
  serial: false
};

/**
 * Converts an array substitution to a string containing a list
 * @param  {String} [opts.separator = ''] - the character that separates each item
 * @param  {String} [opts.conjunction = '']  - replace the last separator with this
 * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)
 *
 * @return {Object}                     - a TemplateTag transformer
 */
var inlineArrayTransformer = function inlineArrayTransformer() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      // only operate on arrays
      if (Array.isArray(substitution)) {
        var separator = opts.separator;
        var conjunction = opts.conjunction;
        var serial = opts.serial;
        // join each item in the array into a string where each item is separated by separator
        // be sure to maintain indentation
        var indent = resultSoFar.match(/(\s+)$/);
        if (indent) {
          substitution = substitution.join(separator + indent[1]);
        } else {
          substitution = substitution.join(separator + ' ');
        }
        // if conjunction is set, replace the last separator with conjunction
        if (conjunction) {
          var separatorIndex = substitution.lastIndexOf(separator);
          substitution = substitution.substr(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.substr(separatorIndex + 1);
        }
      }
      return substitution;
    }
  };
};

/* harmony default export */ var inlineArrayTransformer_inlineArrayTransformer = (inlineArrayTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImluZGVudCIsIm1hdGNoIiwiam9pbiIsInNlcGFyYXRvckluZGV4IiwibGFzdEluZGV4T2YiLCJzdWJzdHIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFdBQVc7QUFDZkMsYUFBVyxFQURJO0FBRWZDLGVBQWEsRUFGRTtBQUdmQyxVQUFRO0FBSE8sQ0FBakI7O0FBTUE7Ozs7Ozs7O0FBUUEsSUFBTUMseUJBQXlCLFNBQXpCQSxzQkFBeUI7QUFBQSxNQUFDQyxJQUFELHVFQUFRTCxRQUFSO0FBQUEsU0FBc0I7QUFDbkRNLGtCQURtRCwwQkFDbkNDLFlBRG1DLEVBQ3JCQyxXQURxQixFQUNSO0FBQ3pDO0FBQ0EsVUFBSUMsTUFBTUMsT0FBTixDQUFjSCxZQUFkLENBQUosRUFBaUM7QUFDL0IsWUFBTU4sWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1RLFNBQVNILFlBQVlJLEtBQVosQ0FBa0IsUUFBbEIsQ0FBZjtBQUNBLFlBQUlELE1BQUosRUFBWTtBQUNWSix5QkFBZUEsYUFBYU0sSUFBYixDQUFrQlosWUFBWVUsT0FBTyxDQUFQLENBQTlCLENBQWY7QUFDRCxTQUZELE1BRU87QUFDTEoseUJBQWVBLGFBQWFNLElBQWIsQ0FBa0JaLFlBQVksR0FBOUIsQ0FBZjtBQUNEO0FBQ0Q7QUFDQSxZQUFJQyxXQUFKLEVBQWlCO0FBQ2YsY0FBTVksaUJBQWlCUCxhQUFhUSxXQUFiLENBQXlCZCxTQUF6QixDQUF2QjtBQUNBTSx5QkFBZUEsYUFDWlMsTUFEWSxDQUNMLENBREssRUFDRkYsY0FERSxLQUNpQlgsU0FBU0YsU0FBVCxHQUFxQixFQUR0QyxJQUM0QyxHQUQ1QyxHQUVYQyxXQUZXLEdBRUdLLGFBQWFTLE1BQWIsQ0FBb0JGLGlCQUFpQixDQUFyQyxDQUZsQjtBQUdEO0FBQ0Y7QUFDRCxhQUFPUCxZQUFQO0FBQ0Q7QUF4QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBMkJBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgZGVmYXVsdHMgPSB7XG4gIHNlcGFyYXRvcjogJycsXG4gIGNvbmp1bmN0aW9uOiAnJyxcbiAgc2VyaWFsOiBmYWxzZVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIGFycmF5IHN1YnN0aXR1dGlvbiB0byBhIHN0cmluZyBjb250YWluaW5nIGEgbGlzdFxuICogQHBhcmFtICB7U3RyaW5nfSBbb3B0cy5zZXBhcmF0b3IgPSAnJ10gLSB0aGUgY2hhcmFjdGVyIHRoYXQgc2VwYXJhdGVzIGVhY2ggaXRlbVxuICogQHBhcmFtICB7U3RyaW5nfSBbb3B0cy5jb25qdW5jdGlvbiA9ICcnXSAgLSByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIHRoaXNcbiAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRzLnNlcmlhbCA9IGZhbHNlXSAtIGluY2x1ZGUgdGhlIHNlcGFyYXRvciBiZWZvcmUgdGhlIGNvbmp1bmN0aW9uPyAoT3hmb3JkIGNvbW1hIHVzZS1jYXNlKVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3QgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciA9IChvcHRzID0gZGVmYXVsdHMpID0+ICh7XG4gIG9uU3Vic3RpdHV0aW9uIChzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yXG4gICAgICBjb25zdCBjb25qdW5jdGlvbiA9IG9wdHMuY29uanVuY3Rpb25cbiAgICAgIGNvbnN0IHNlcmlhbCA9IG9wdHMuc2VyaWFsXG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXHMrKSQvKVxuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyBpbmRlbnRbMV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpXG4gICAgICB9XG4gICAgICAvLyBpZiBjb25qdW5jdGlvbiBpcyBzZXQsIHJlcGxhY2UgdGhlIGxhc3Qgc2VwYXJhdG9yIHdpdGggY29uanVuY3Rpb25cbiAgICAgIGlmIChjb25qdW5jdGlvbikge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpXG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvblxuICAgICAgICAgIC5zdWJzdHIoMCwgc2VwYXJhdG9ySW5kZXgpICsgKHNlcmlhbCA/IHNlcGFyYXRvciA6ICcnKSArICcgJyArXG4gICAgICAgICAgICBjb25qdW5jdGlvbiArIHN1YnN0aXR1dGlvbi5zdWJzdHIoc2VwYXJhdG9ySW5kZXggKyAxKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uXG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXJcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineArrayTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsMEI7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJ1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js


var splitStringTransformer = function splitStringTransformer(splitBy) {
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (splitBy != null && typeof splitBy === 'string') {
        if (typeof substitution === 'string' && substitution.includes(splitBy)) {
          substitution = substitution.split(splitBy);
        }
      } else {
        throw new Error('You need to specify a string character to split by.');
      }
      return substitution;
    }
  };
};

/* harmony default export */ var splitStringTransformer_splitStringTransformer = (splitStringTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInNwbGl0QnkiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QixDQUFDQyxPQUFEO0FBQUEsU0FBYztBQUMzQ0Msa0JBRDJDLDBCQUMzQkMsWUFEMkIsRUFDYkMsV0FEYSxFQUNBO0FBQ3pDLFVBQUlILFdBQVcsSUFBWCxJQUFtQixPQUFPQSxPQUFQLEtBQW1CLFFBQTFDLEVBQW9EO0FBQ2xELFlBQUksT0FBT0UsWUFBUCxLQUF3QixRQUF4QixJQUFvQ0EsYUFBYUUsUUFBYixDQUFzQkosT0FBdEIsQ0FBeEMsRUFBd0U7QUFDdEVFLHlCQUFlQSxhQUFhRyxLQUFiLENBQW1CTCxPQUFuQixDQUFmO0FBQ0Q7QUFDRixPQUpELE1BSU87QUFDTCxjQUFNLElBQUlNLEtBQUosQ0FBVSxxREFBVixDQUFOO0FBQ0Q7QUFDRCxhQUFPSixZQUFQO0FBQ0Q7QUFWMEMsR0FBZDtBQUFBLENBQS9COztBQWFBLGVBQWVILHNCQUFmIiwiZmlsZSI6InNwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IChzcGxpdEJ5KSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbiAoc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHNwZWNpZnkgYSBzdHJpbmcgY2hhcmFjdGVyIHRvIHNwbGl0IGJ5LicpXG4gICAgfVxuICAgIHJldHVybiBzdWJzdGl0dXRpb25cbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lclxuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/splitStringTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsMEI7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJ1xuIl19
// EXTERNAL MODULE: ./node_modules/babel-runtime/core-js/number/is-nan.js
var is_nan = __webpack_require__(386);
var is_nan_default = /*#__PURE__*/__webpack_require__.n(is_nan);

// CONCATENATED MODULE: ./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js



var removeNonPrintingValuesTransformer_isValidValue = function isValidValue(x) {
  return x != null && !is_nan_default()(x) && typeof x !== 'boolean';
};

var removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {
  return {
    onSubstitution: function onSubstitution(substitution) {
      if (Array.isArray(substitution)) {
        return substitution.filter(removeNonPrintingValuesTransformer_isValidValue);
      }
      if (removeNonPrintingValuesTransformer_isValidValue(substitution)) {
        return substitution;
      }
      return '';
    }
  };
};

/* harmony default export */ var removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer = (removeNonPrintingValuesTransformer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsInJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImZpbHRlciJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBLElBQU1BLGVBQWUsU0FBZkEsWUFBZSxDQUFDQyxDQUFEO0FBQUEsU0FDbkJBLEtBQUssSUFBTCxJQUNBLENBQUMsY0FBYUEsQ0FBYixDQURELElBRUEsT0FBT0EsQ0FBUCxLQUFhLFNBSE07QUFBQSxDQUFyQjs7QUFLQSxJQUFNQyxxQ0FBcUMsU0FBckNBLGtDQUFxQztBQUFBLFNBQU87QUFDaERDLGtCQURnRCwwQkFDaENDLFlBRGdDLEVBQ2xCO0FBQzVCLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0YsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLGVBQU9BLGFBQWFHLE1BQWIsQ0FBb0JQLFlBQXBCLENBQVA7QUFDRDtBQUNELFVBQUlBLGFBQWFJLFlBQWIsQ0FBSixFQUFnQztBQUM5QixlQUFPQSxZQUFQO0FBQ0Q7QUFDRCxhQUFPLEVBQVA7QUFDRDtBQVQrQyxHQUFQO0FBQUEsQ0FBM0M7O0FBWUEsZUFBZUYsa0NBQWYiLCJmaWxlIjoicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBpc1ZhbGlkVmFsdWUgPSAoeCkgPT5cbiAgeCAhPSBudWxsICYmXG4gICFOdW1iZXIuaXNOYU4oeCkgJiZcbiAgdHlwZW9mIHggIT09ICdib29sZWFuJ1xuXG5jb25zdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyID0gKCkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24gKHN1YnN0aXR1dGlvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb24uZmlsdGVyKGlzVmFsaWRWYWx1ZSlcbiAgICB9XG4gICAgaWYgKGlzVmFsaWRWYWx1ZShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uXG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/removeNonPrintingValuesTransformer/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0Isc0M7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyJ1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/commaLists/commaLists.js







var commaLists = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({ separator: ',' }), es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);

/* harmony default export */ var commaLists_commaLists = (commaLists);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInXG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJ1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInXG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/commaLists/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsYztxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL2NvbW1hTGlzdHMnXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js







var commaListsAnd = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({ separator: ',', conjunction: 'and' }), es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);

/* harmony default export */ var commaListsAnd_commaListsAnd = (commaListsAnd);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnXG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJ1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcidcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJ1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNBbmRcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsAnd/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsaUI7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9jb21tYUxpc3RzQW5kJ1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsOr/commaListsOr.js







var commaListsOr = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({ separator: ',', conjunction: 'or' }), es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);

/* harmony default export */ var commaListsOr_commaListsOr = (commaListsOr);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnXG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJ1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcidcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJ1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lclxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21tYUxpc3RzT3JcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsOr/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O3FCQUVvQixnQjtxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL2NvbW1hTGlzdHNPcidcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/html/html.js









var html = new es_TemplateTag_TemplateTag(splitStringTransformer_splitStringTransformer('\n'), removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer, inlineArrayTransformer_inlineArrayTransformer, es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);

/* harmony default export */ var html_html = (html);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInXG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJ1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInXG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJ1xuaW1wb3J0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcidcblxuY29uc3QgaHRtbCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcignXFxuJyksXG4gIHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIsXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lclxuKVxuXG5leHBvcnQgZGVmYXVsdCBodG1sXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/html/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsUTtxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL2h0bWwnXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/codeBlock/index.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2RlQmxvY2svaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6InFCQUFvQixTO3FCQUFiQSxPIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi4vaHRtbCdcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/source/index.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zb3VyY2UvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6InFCQUFvQixTO3FCQUFiQSxPIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi4vaHRtbCdcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/safeHtml/safeHtml.js









var safeHtml = new es_TemplateTag_TemplateTag(splitStringTransformer_splitStringTransformer('\n'), inlineArrayTransformer_inlineArrayTransformer, es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer, replaceSubstitutionTransformer_replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/"/g, '&quot;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/`/g, '&#x60;'));

/* harmony default export */ var safeHtml_safeHtml = (safeHtml);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnXG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJ1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcidcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJ1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcidcbmltcG9ydCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyJ1xuXG5jb25zdCBzYWZlSHRtbCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcignXFxuJyksXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC8mL2csICcmYW1wOycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLzwvZywgJyZsdDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC8+L2csICcmZ3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvXCIvZywgJyZxdW90OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLycvZywgJyYjeDI3OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoL2AvZywgJyYjeDYwOycpXG4pXG5cbmV4cG9ydCBkZWZhdWx0IHNhZmVIdG1sXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/safeHtml/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLFk7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9zYWZlSHRtbCdcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLine/oneLine.js






var oneLine = new es_TemplateTag_TemplateTag(replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var oneLine_oneLine = (oneLine);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRGMsRUFFZEQscUJBRmMsQ0FBaEI7O0FBS0EsZUFBZUUsT0FBZiIsImZpbGUiOiJvbmVMaW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJ1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInXG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyXG4pXG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLine/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsVztxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL29uZUxpbmUnXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js






var oneLineTrim = new es_TemplateTag_TemplateTag(replaceResultTransformer_replaceResultTransformer(/(?:\n\s+)/g, ''), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var oneLineTrim_oneLineTrim = (oneLineTrim);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJ1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInXG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcidcblxuY29uc3Qgb25lTGluZVRyaW0gPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuXFxzKykvZywgJycpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXJcbilcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZVRyaW1cbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineTrim/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLGU7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9vbmVMaW5lVHJpbSdcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js







var oneLineCommaLists = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({ separator: ',' }), replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var oneLineCommaLists_oneLineCommaLists = (oneLineCommaLists);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInXG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcidcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJ1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lclxuKVxuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaLists/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLHFCO3FCQUFiQSxPIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHMnXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js







var oneLineCommaListsOr = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var oneLineCommaListsOr_oneLineCommaListsOr = (oneLineCommaListsOr);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnXG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJ1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInXG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcidcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXJcbilcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUNvbW1hTGlzdHNPclxuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsOr/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL2luZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztxQkFFb0IsdUI7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9vbmVMaW5lQ29tbWFMaXN0c09yJ1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js







var oneLineCommaListsAnd = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var oneLineCommaListsAnd_oneLineCommaListsAnd = (oneLineCommaListsAnd);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJ1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcidcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJ1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInXG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXJcbilcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUNvbW1hTGlzdHNBbmRcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsAnd/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLHdCO3FCQUFiQSxPIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHNBbmQnXG4iXX0=
// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineLists/inlineLists.js







var inlineLists = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer, es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);

/* harmony default export */ var inlineLists_inlineLists = (inlineLists);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInXG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJ1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInXG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXJcbilcblxuZXhwb3J0IGRlZmF1bHQgaW5saW5lTGlzdHNcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineLists/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLGU7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9pbmxpbmVMaXN0cydcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js







var oneLineInlineLists = new es_TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer, replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var oneLineInlineLists_oneLineInlineLists = (oneLineInlineLists);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInXG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcidcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJ1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyXG4pXG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVJbmxpbmVMaXN0c1xuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineInlineLists/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O3FCQUVvQixzQjtxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL29uZUxpbmVJbmxpbmVMaXN0cydcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndent/stripIndent.js






var stripIndent = new es_TemplateTag_TemplateTag(es_stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);

/* harmony default export */ var stripIndent_stripIndent = (stripIndent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZydcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInXG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcidcblxuY29uc3Qgc3RyaXBJbmRlbnQgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lclxuKVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpcEluZGVudFxuIl19
// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndent/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7cUJBRW9CLGU7cUJBQWJBLE8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9zdHJpcEluZGVudCdcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndents/stripIndents.js






var stripIndents = new es_TemplateTag_TemplateTag(es_stripIndentTransformer_stripIndentTransformer('all'), trimResultTransformer_trimResultTransformer);

/* harmony default export */ var stripIndents_stripIndents = (stripIndents);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnXG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJ1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInXG5cbmNvbnN0IHN0cmlwSW5kZW50cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcignYWxsJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lclxuKVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpcEluZGVudHNcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndents/index.js




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O3FCQUVvQixnQjtxQkFBYkEsTyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3N0cmlwSW5kZW50cydcbiJdfQ==
// CONCATENATED MODULE: ./node_modules/common-tags/es/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TemplateTag", function() { return es_TemplateTag_TemplateTag; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "trimResultTransformer", function() { return trimResultTransformer_trimResultTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "stripIndentTransformer", function() { return es_stripIndentTransformer_stripIndentTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "replaceResultTransformer", function() { return replaceResultTransformer_replaceResultTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "replaceSubstitutionTransformer", function() { return replaceSubstitutionTransformer_replaceSubstitutionTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "inlineArrayTransformer", function() { return inlineArrayTransformer_inlineArrayTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "splitStringTransformer", function() { return splitStringTransformer_splitStringTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "removeNonPrintingValuesTransformer", function() { return removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "commaLists", function() { return commaLists_commaLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "commaListsAnd", function() { return commaListsAnd_commaListsAnd; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "commaListsOr", function() { return commaListsOr_commaListsOr; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "html", function() { return html_html; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "codeBlock", function() { return html_html; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "source", function() { return html_html; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "safeHtml", function() { return safeHtml_safeHtml; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "oneLine", function() { return oneLine_oneLine; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "oneLineTrim", function() { return oneLineTrim_oneLineTrim; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "oneLineCommaLists", function() { return oneLineCommaLists_oneLineCommaLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "oneLineCommaListsOr", function() { return oneLineCommaListsOr_oneLineCommaListsOr; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "oneLineCommaListsAnd", function() { return oneLineCommaListsAnd_oneLineCommaListsAnd; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "inlineLists", function() { return inlineLists_inlineLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "oneLineInlineLists", function() { return oneLineInlineLists_oneLineInlineLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "stripIndent", function() { return stripIndent_stripIndent; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "stripIndents", function() { return stripIndents_stripIndents; });


// core




// transformers
















// tags

































//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzIiwiY29tbWFMaXN0c0FuZCIsImNvbW1hTGlzdHNPciIsImh0bWwiLCJjb2RlQmxvY2siLCJzb3VyY2UiLCJzYWZlSHRtbCIsIm9uZUxpbmUiLCJvbmVMaW5lVHJpbSIsIm9uZUxpbmVDb21tYUxpc3RzIiwib25lTGluZUNvbW1hTGlzdHNPciIsIm9uZUxpbmVDb21tYUxpc3RzQW5kIiwiaW5saW5lTGlzdHMiLCJvbmVMaW5lSW5saW5lTGlzdHMiLCJzdHJpcEluZGVudCIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O3lCQUN3QixlO3lCQUFqQkEsVzs7QUFFUDs7bUNBQ2tDLHlCO21DQUEzQkMscUI7b0NBQzRCLDBCO29DQUE1QkMsc0I7c0NBQzhCLDRCO3NDQUE5QkMsd0I7NENBQ29DLGtDOzRDQUFwQ0MsOEI7b0NBQzRCLDBCO29DQUE1QkMsc0I7b0NBQzRCLDBCO29DQUE1QkMsc0I7Z0RBQ3dDLHNDO2dEQUF4Q0Msa0M7O0FBRVA7O3dCQUN1QixjO3dCQUFoQkMsVTsyQkFDbUIsaUI7MkJBQW5CQyxhOzBCQUNrQixnQjswQkFBbEJDLFk7a0JBQ1UsUTtrQkFBVkMsSTt1QkFDZSxhO3VCQUFmQyxTO29CQUNZLFU7b0JBQVpDLE07c0JBQ2MsWTtzQkFBZEMsUTtxQkFDYSxXO3FCQUFiQyxPO3lCQUNpQixlO3lCQUFqQkMsVzsrQkFDdUIscUI7K0JBQXZCQyxpQjtpQ0FDeUIsdUI7aUNBQXpCQyxtQjtrQ0FDMEIsd0I7a0NBQTFCQyxvQjt5QkFDaUIsZTt5QkFBakJDLFc7Z0NBQ3dCLHNCO2dDQUF4QkMsa0I7eUJBQ2lCLGU7eUJBQWpCQyxXOzBCQUNrQixnQjswQkFBbEJDLFkiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLy8gY29yZVxuZXhwb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4vVGVtcGxhdGVUYWcnXG5cbi8vIHRyYW5zZm9ybWVyc1xuZXhwb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcidcbmV4cG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4vc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcidcbmV4cG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInXG5leHBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4vcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyJ1xuZXhwb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJ1xuZXhwb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJ1xuZXhwb3J0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgZnJvbSAnLi9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyJ1xuXG4vLyB0YWdzXG5leHBvcnQgY29tbWFMaXN0cyBmcm9tICcuL2NvbW1hTGlzdHMnXG5leHBvcnQgY29tbWFMaXN0c0FuZCBmcm9tICcuL2NvbW1hTGlzdHNBbmQnXG5leHBvcnQgY29tbWFMaXN0c09yIGZyb20gJy4vY29tbWFMaXN0c09yJ1xuZXhwb3J0IGh0bWwgZnJvbSAnLi9odG1sJ1xuZXhwb3J0IGNvZGVCbG9jayBmcm9tICcuL2NvZGVCbG9jaydcbmV4cG9ydCBzb3VyY2UgZnJvbSAnLi9zb3VyY2UnXG5leHBvcnQgc2FmZUh0bWwgZnJvbSAnLi9zYWZlSHRtbCdcbmV4cG9ydCBvbmVMaW5lIGZyb20gJy4vb25lTGluZSdcbmV4cG9ydCBvbmVMaW5lVHJpbSBmcm9tICcuL29uZUxpbmVUcmltJ1xuZXhwb3J0IG9uZUxpbmVDb21tYUxpc3RzIGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHMnXG5leHBvcnQgb25lTGluZUNvbW1hTGlzdHNPciBmcm9tICcuL29uZUxpbmVDb21tYUxpc3RzT3InXG5leHBvcnQgb25lTGluZUNvbW1hTGlzdHNBbmQgZnJvbSAnLi9vbmVMaW5lQ29tbWFMaXN0c0FuZCdcbmV4cG9ydCBpbmxpbmVMaXN0cyBmcm9tICcuL2lubGluZUxpc3RzJ1xuZXhwb3J0IG9uZUxpbmVJbmxpbmVMaXN0cyBmcm9tICcuL29uZUxpbmVJbmxpbmVMaXN0cydcbmV4cG9ydCBzdHJpcEluZGVudCBmcm9tICcuL3N0cmlwSW5kZW50J1xuZXhwb3J0IHN0cmlwSW5kZW50cyBmcm9tICcuL3N0cmlwSW5kZW50cydcbiJdfQ==

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(383), __esModule: true };

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(60);
__webpack_require__(384);
module.exports = __webpack_require__(16).Array.from;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx            = __webpack_require__(50)
  , $export        = __webpack_require__(25)
  , toObject       = __webpack_require__(110)
  , call           = __webpack_require__(185)
  , isArrayIter    = __webpack_require__(186)
  , toLength       = __webpack_require__(106)
  , createProperty = __webpack_require__(385)
  , getIterFn      = __webpack_require__(117);

$export($export.S + $export.F * !__webpack_require__(188)(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(31)
  , createDesc      = __webpack_require__(59);

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(387), __esModule: true };

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(388);
module.exports = __webpack_require__(16).Number.isNaN;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(25);

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortDataTable = sortDataTable;


/**
 * Sorts the data table |table|, affecting all columns.
 * This is necessary because Array.prototype.sort doesn't let you sort
 * multiple arrays at the same time; you'd need to convert from
 * struct-of-arrays form to array-of-structs, sort, and convert back into
 * struct-of-arrays form.
 * This function lets you sort without conversion, and saves the garbage
 * allocation that this would cause.
 * @param {object}   table       The data table. Gets mutated.
 * @param {string}   keyColumn   The column whose values to pass to the
 *                               comparator function. E.g. table.time
 * @param {function} comparator  A comparator function that receives two
 *                               arguments which are values from keyColumn,
 *                               and behaves like one that you'd pass to
 *                               Array.prototype.sort.
 * @returns The data table.
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * A "data table" is a JS object of the form:
 * {
 *   length: <length>
 *   someColumnName: SomeType[<length>]
 *   someOtherColumnName: SomeOtherType[<length>]
 * }
 */

function sortDataTable(table, keyColumn, comparator) {
  function swap(i, j) {
    if (i !== j) {
      for (var columnName in table) {
        if (columnName !== 'length') {
          var column = table[columnName];
          var temp = column[i];
          column[i] = column[j];
          column[j] = temp;
        }
      }
    }
  }

  // Reorders the values in the range left <= k <= right and returns an index
  // "partitionIndex" such that the elements at k for left <= k < partitionIndex
  // are < pivotValue, the elements at k for partitionIndex < k <= right
  // are >= pivotValue, and the element at partitionIndex is == pivotValue.
  // If the range is already sorted, no swaps are performed.
  function partition(pivot, left, right) {
    var pivotValue = keyColumn[pivot];

    // At the end of each iteration, the following is true:
    // All elements at k for left <= k < partitionIndex are < pivotValue.
    // All elements at k for partitionIndex <= k <= i are >= pivotValue.
    // Specifically, the element at partitionIndex is the first one in the
    // range left <= k <= right which is potentially >= pivotValue, and which
    // will need to be moved out of the way when encountering an element
    // that's < pivotValue.
    var partitionIndex = left;
    var pivotIndex = pivot;
    for (var i = left; i <= right; i++) {
      if (comparator(keyColumn[i], pivotValue) < 0) {
        swap(i, partitionIndex);
        if (partitionIndex === pivotIndex) {
          // We just swapped our pivot away. Update pivotIndex to keep track
          // of it.
          pivotIndex = i;
        }
        partitionIndex++;
      }
    }
    // Swap the pivot back into the position at partitionIndex.
    swap(partitionIndex, pivotIndex);
    return partitionIndex;
  }

  function quickSort(left, right) {
    if (left < right) {
      // QuickSort's effectiveness depends on its ability to partition the
      // sequence being sorted into two subsequences of roughly equal length:
      // by halving the length at each recursion level, the subproblems get
      // smaller faster. To get a good partition, we must choose a pivot value
      // that is close to the median of the values in the sequence: by
      // definition, half of the values will fall before the median, half
      // after it.
      // If the sequence is already mostly sorted, then choosing the first or
      // last value as the pivot is probably as far from the median as you
      // could possibly get; this is a "pessimal", not optimal, choice.
      // Choosing the middle value as the pivot is likely to be much closer to
      // the median.
      var pivot = left + right >> 1;
      var partitionIndex = partition(pivot, left, right);

      // Sort left and right
      quickSort(left, partitionIndex - 1);
      quickSort(partitionIndex + 1, right);
    }
  }

  quickSort(0, table.length - 1);
  return table;
}

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tuplemap = __webpack_require__(391);

var _tuplemap2 = _interopRequireDefault(_tuplemap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof WeakMap === 'undefined' || typeof Map === 'undefined') {
  throw new Error('This lib requires an implementation of WeakMap and Map');
} /* An efficient memoizer for functions that only receive immutable arguments.
   * Ideal with Redux and similar environments.
   */


function memoize(fn, options) {
  var cache = options && options.cache || new _tuplemap2.default(options);

  var memoized = void 0;

  // Memoizer for functions that accept a single argument
  if (/^\[object (Weak|LRU|NamedTuple)?Map\]$/.test(cache.toString())) {
    memoized = function memoized(arg) {
      if (!cache.has(arg)) {
        var result = fn.call(this, arg);
        cache.set(arg, result);
        return result;
      }
      return cache.get(arg);
    };
  }

  // Memoizer for functions that accept multiple arguments
  else {
      memoized = function memoized() {
        if (!cache.has(arguments)) {
          var result = fn.apply(this, arguments);
          cache.set(arguments, result);
          return result;
        }
        return cache.get(arguments);
      };
    }

  // Give a meaningful displayName to the memoized function
  if (fn.name) {
    memoized.displayName = fn.name + 'Memoized';
  }

  return memoized;
}

exports.default = memoize;
module.exports = exports['default'];

//# sourceMappingURL=index.js.map

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function TupleMap(opts) {
  if (opts && 'limit' in opts) {
    this._limit = opts.limit;
  }
  this.clear();
}

TupleMap.prototype = {
  toString: function toString() {
    return '[object TupleMap]';
  },
  _hash: function _hash(tuple) {
    // Speed up hash generation for the folowing pattern:
    // if ( !cache.has(t) ) { cache.set( t, slowFn(t) ); }
    if (tuple === this._lastTuple) {
      return this._lastHash;
    }

    var l = tuple.length;
    var hash = [];

    for (var i = 0; i < l; i++) {
      var arg = tuple[i];
      var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

      // if the argument is not a primitive, get a unique (memoized?) id for it
      // (typeof null is "object", but should be considered a primitive)
      if (arg !== null && (argType === 'object' || argType === 'function')) {
        if (this._idMap.has(arg)) {
          hash.push(this._idMap.get(arg));
        } else {
          var id = '#' + this._id++;
          this._idMap.set(arg, id);
          hash.push(id);
        }

        // otherwise, add the argument and its type to the hash
      } else {
        hash.push(argType === 'string' ? '"' + arg + '"' : '' + arg);
      }
    }

    this._lastTuple = tuple;
    // concatenate serialized arguments using a complex separator
    // (to avoid key collisions)
    this._lastHash = hash.join('/<[MI_SEP]>/');

    return this._lastHash;
  },

  has: function has(tuple) {
    var hash = this._hash(tuple);
    return this._cache.has(hash);
  },

  set: function set(tuple, value) {
    var hash = this._hash(tuple);

    if (this._limit !== undefined) {
      this._cache.delete(hash);
    }

    this._cache.set(hash, value);

    if (this._limit !== undefined && this._cache.size > this._limit) {
      this._cache.delete(this._cache.keys().next().value);
    }

    return this;
  },

  get: function get(tuple) {
    var hash = this._hash(tuple);

    if (this._limit !== undefined && this._cache.has(hash)) {
      var value = this._cache.get(hash);
      this._cache.delete(hash);
      this._cache.set(hash, value);
      return value;
    }

    return this._cache.get(hash);
  },

  clear: function clear() {
    this._cache = new Map();
    this._idMap = new WeakMap();
    this._id = 0;
    delete this._lastTuple;
    delete this._lastHash;
  }
};

exports.default = TupleMap;
module.exports = exports['default'];

//# sourceMappingURL=index.js.map

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function WeakTupleMap() {
  this.clear();
}

WeakTupleMap.prototype = {
  toString: function toString() {
    return '[object WeakTupleMap]';
  },
  has: function has(tuple) {
    var curr = this._cache;
    var l = tuple.length;

    for (var i = 0; i < l; i++) {
      if (!curr.has || !curr.has(tuple[i])) {
        return false;
      }
      curr = curr.get(tuple[i]);
    }

    return true;
  },

  set: function set(tuple, value) {
    var curr = this._cache;
    var l = tuple.length;
    var mustCreate = false;

    for (var i = 0; i < l - 1; i++) {
      if (!mustCreate && curr.has(tuple[i])) {
        curr = curr.get(tuple[i]);
      } else {
        mustCreate = true;
        curr.set(tuple[i], curr = new WeakMap());
      }
    }

    curr.set(tuple[l - 1], value);

    return this;
  },

  get: function get(tuple) {
    var curr = this._cache;
    var l = tuple.length;

    for (var i = 0; i < l; i++) {
      var ret = curr.get && curr.get(tuple[i]);
      if (ret === undefined) {
        return ret;
      } else {
        curr = ret;
      }
    }

    return curr;
  },

  clear: function clear() {
    this._cache = new WeakMap();
  }
};

exports.default = WeakTupleMap;
module.exports = exports['default'];

//# sourceMappingURL=index.js.map

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uintArrayToString = uintArrayToString;
exports.stringToUintArray = stringToUintArray;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var encodingChars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._';

function uintToString(value) {
  var x = value;
  var r = encodingChars[x & 31];
  x >>= 5;
  while (x !== 0) {
    r = encodingChars[32 + (x & 31)] + r;
    x >>= 5;
  }
  return r;
}

function uintArrayToString(array) {
  return array.map(uintToString).join('');
}

function encodingCharToNumber(x) {
  switch (x) {
    // encodingChars.split('').map((c, i) => `    case '${c}': return ${i};`).join('\n')
    case '0':
      return 0;
    case '1':
      return 1;
    case '2':
      return 2;
    case '3':
      return 3;
    case '4':
      return 4;
    case '5':
      return 5;
    case '6':
      return 6;
    case '7':
      return 7;
    case '8':
      return 8;
    case '9':
      return 9;
    case 'a':
      return 10;
    case 'b':
      return 11;
    case 'c':
      return 12;
    case 'd':
      return 13;
    case 'e':
      return 14;
    case 'f':
      return 15;
    case 'g':
      return 16;
    case 'h':
      return 17;
    case 'i':
      return 18;
    case 'j':
      return 19;
    case 'k':
      return 20;
    case 'l':
      return 21;
    case 'm':
      return 22;
    case 'n':
      return 23;
    case 'o':
      return 24;
    case 'p':
      return 25;
    case 'q':
      return 26;
    case 'r':
      return 27;
    case 's':
      return 28;
    case 't':
      return 29;
    case 'u':
      return 30;
    case 'v':
      return 31;
    case 'w':
      return 32;
    case 'x':
      return 33;
    case 'y':
      return 34;
    case 'z':
      return 35;
    case 'A':
      return 36;
    case 'B':
      return 37;
    case 'C':
      return 38;
    case 'D':
      return 39;
    case 'E':
      return 40;
    case 'F':
      return 41;
    case 'G':
      return 42;
    case 'H':
      return 43;
    case 'I':
      return 44;
    case 'J':
      return 45;
    case 'K':
      return 46;
    case 'L':
      return 47;
    case 'M':
      return 48;
    case 'N':
      return 49;
    case 'O':
      return 50;
    case 'P':
      return 51;
    case 'Q':
      return 52;
    case 'R':
      return 53;
    case 'S':
      return 54;
    case 'T':
      return 55;
    case 'U':
      return 56;
    case 'V':
      return 57;
    case 'W':
      return 58;
    case 'X':
      return 59;
    case 'Y':
      return 60;
    case 'Z':
      return 61;
    case '.':
      return 62;
    case '_':
      return 63;
    default:
      return 0;
  }
}

function stringToUintArray(s) {
  var array = [];
  var val = 0;
  for (var i = 0; i < s.length; i++) {
    var x = encodingCharToNumber(s[i]);
    val = (val << 5) + (x & 31);
    if ((x & 32) === 0) {
      array.push(val);
      val = 0;
    }
  }
  return array;
}

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

module.exports = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStackTimingByDepth = getStackTimingByDepth;
exports.computeCallNodeMaxDepth = computeCallNodeMaxDepth;
exports.getLeafCategoryStackTiming = getLeafCategoryStackTiming;


/**
 * Build a StackTimingByDepth table from a given thread.
 *
 * @param {object} thread - The profile thread.
 * @param {object} callNodeInfo - from the callNodeInfo selector.
 * @param {integer} maxDepth - The max depth of the all the stacks.
 * @param {number} interval - The sampling interval that the profile was recorded with.
 * @return {array} stackTimingByDepth
 */

/**
 * The StackTimingByDepth data structure organizes stack frames by their depth, and start
 * and end times. This optimizes sample data for Stack Chart views. It
 * makes it really easy to draw a large amount of boxes at once based on where the
 * viewport is in the stack frame data. Plus the end timings for frames need to be
 * reconstructed from the sample data, as the samples only contain start timings.
 *
 * This format allows for specifically selecting certain rows of stack frames by using
 * the stack depth information. In addition, the start and end times of samples can be
 * found through binary searches, allowing for selecting the proper subsets of frames
 * to be drawn. Each row's sample length is different, but it can still be efficient
 * to find subsets of the data.
 *
 * Each object in the array below represents a single row of stack frames at a given
 * depth. Each object is a table that contains the the start time and end time in
 * milliseconds, and the stack index that points into the stack table.
 *
 * stackTimingByDepth Example:
 * [
 *   // This first object represents the first box at the base of the chart. It only
 *   // contains a single stack frame to draw, starting at 10ms, ending at 100ms. It
 *   // points to the stackIndex 0.
 *
 *   {start: [10], end: [100], stack: [0]}
 *
 *   // This next object represents 3 boxes to draw, the first box being stack 1 in the
 *   // stack table, and it starts at 20ms, and ends at 40ms.
 *
 *   {start: [20, 40, 60], end: [40, 60, 80], stack: [1, 2, 3]}
 *   {start: [20, 40, 60], end: [40, 60, 80], stack: [34, 59, 72]}
 *   ...
 *   {start: [25, 45], end: [35, 55], stack: [123, 159]}
 * ]
 */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function getStackTimingByDepth(thread, callNodeInfo, maxDepth, interval) {
  var callNodeTable = callNodeInfo.callNodeTable,
      stackIndexToCallNodeIndex = callNodeInfo.stackIndexToCallNodeIndex;

  var stackTimingByDepth = Array.from({ length: maxDepth + 1 }, function () {
    return {
      start: [],
      end: [],
      stack: [],
      length: 0
    };
  });

  var lastSeen = {
    startTimeByDepth: [],
    stackIndexByDepth: []
  };

  // Go through each sample, and push/pop it on the stack to build up
  // the stackTimingByDepth.
  var previousDepth = -1;
  for (var i = 0; i < thread.samples.length; i++) {
    var stackIndex = thread.samples.stack[i];
    var sampleTime = thread.samples.time[i];

    // If this stack index is null (for instance if it was filtered out) then pop back
    // down to the base stack.
    if (stackIndex === null) {
      _popStacks(stackTimingByDepth, lastSeen, -1, previousDepth, sampleTime);
      previousDepth = -1;
    } else {
      var callNodeIndex = stackIndexToCallNodeIndex[stackIndex];
      var depth = callNodeTable.depth[callNodeIndex];

      // Find the depth of the nearest shared stack.
      var depthToPop = _findNearestSharedStackDepth(thread.stackTable, stackIndex, lastSeen, depth);
      _popStacks(stackTimingByDepth, lastSeen, depthToPop, previousDepth, sampleTime);
      _pushStacks(thread, lastSeen, depth, stackIndex, sampleTime);
      previousDepth = depth;
    }
  }

  // Pop the remaining stacks
  var endingTime = thread.samples.time[thread.samples.time.length - 1] + interval;
  _popStacks(stackTimingByDepth, lastSeen, -1, previousDepth, endingTime);

  return stackTimingByDepth;
}

function _findNearestSharedStackDepth(stackTable, stackIndex, lastSeen, depthStart) {
  var nextStackIndex = stackIndex;
  for (var depth = depthStart; depth >= 0; depth--) {
    if (lastSeen.stackIndexByDepth[depth] === nextStackIndex) {
      return depth;
    }
    nextStackIndex = stackTable.prefix[nextStackIndex];
  }
  return -1;
}

function _popStacks(stackTimingByDepth, lastSeen, depth, previousDepth, sampleTime) {
  // "Pop" off the stack, and commit the timing of the frames
  for (var stackDepth = depth + 1; stackDepth <= previousDepth; stackDepth++) {
    // Push on the new information.
    stackTimingByDepth[stackDepth].start.push(lastSeen.startTimeByDepth[stackDepth]);
    stackTimingByDepth[stackDepth].end.push(sampleTime);
    stackTimingByDepth[stackDepth].stack.push(lastSeen.stackIndexByDepth[stackDepth]);
    stackTimingByDepth[stackDepth].length++;

    // Delete that this stack frame has been seen.
    delete lastSeen.stackIndexByDepth[stackDepth];
    delete lastSeen.startTimeByDepth[stackDepth];
  }
}

function _pushStacks(thread, lastSeen, depth, startingIndex, sampleTime) {
  var stackIndex = startingIndex;
  // "Push" onto the stack with new frames
  for (var parentDepth = depth; parentDepth >= 0; parentDepth--) {
    if (stackIndex === null || lastSeen.stackIndexByDepth[parentDepth] !== undefined) {
      break;
    }
    lastSeen.stackIndexByDepth[parentDepth] = stackIndex;
    lastSeen.startTimeByDepth[parentDepth] = sampleTime;
    stackIndex = thread.stackTable.prefix[stackIndex];
  }
}

function computeCallNodeMaxDepth(rangedThread, callNodeInfo) {
  var maxDepth = 0;
  var samples = rangedThread.samples;
  var callNodeTable = callNodeInfo.callNodeTable,
      stackIndexToCallNodeIndex = callNodeInfo.stackIndexToCallNodeIndex;

  for (var i = 0; i < rangedThread.samples.length; i++) {
    var stackIndex = samples.stack[i];
    if (stackIndex !== null) {
      var callNodeIndex = stackIndexToCallNodeIndex[stackIndex];
      var depth = callNodeTable.depth[callNodeIndex];
      if (depth > maxDepth) {
        maxDepth = depth;
      }
    }
  }
  return maxDepth;
}

function getLeafCategoryStackTiming(thread, interval, getCategory) {
  var getRelevantLeafStack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getNearestJSFrame;

  var stackTiming = {
    start: [],
    end: [],
    stack: [],
    length: 0
  };

  var previousName = null;
  var previousSampleTime = null;
  for (var i = 0; i < thread.samples.length; i++) {
    var stackIndex = thread.samples.stack[i];
    if (stackIndex === null) {
      if (previousSampleTime !== null) {
        stackTiming.end.push(previousSampleTime);
      }
      previousName = null;
    } else {
      var relevantStackIndex = getRelevantLeafStack(thread, stackIndex);
      var frameIndex = thread.stackTable.frame[relevantStackIndex];

      var _getCategory = getCategory(thread, frameIndex),
          name = _getCategory.name;

      if (name !== previousName) {
        var sampleTime = thread.samples.time[i];
        stackTiming.start.push(sampleTime);
        stackTiming.stack.push(relevantStackIndex);
        stackTiming.length++;
        if (previousName !== null) {
          stackTiming.end.push(sampleTime);
        }
        previousName = name;
        previousSampleTime = sampleTime;
      }
    }
  }

  if (stackTiming.end.length !== stackTiming.start.length) {
    // Calculate the final end time.
    stackTiming.end.push(thread.samples.time[thread.samples.length - 1] + interval);
  }

  return [stackTiming];
}

function getNearestJSFrame(thread, stackIndex) {
  var nextStackIndex = stackIndex;
  while (nextStackIndex !== null) {
    var frameIndex = thread.stackTable.frame[nextStackIndex];
    var funcIndex = thread.frameTable.func[frameIndex];
    var isJS = thread.funcTable.isJS[funcIndex];
    if (isJS) {
      return nextStackIndex;
    }
    nextStackIndex = thread.stackTable.prefix[nextStackIndex];
  }
  return stackIndex;
}

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.getMarkerTiming = getMarkerTiming;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Arbitrarily set an upper limit for adding marker depths, avoiding an infinite loop.
var MAX_STACKING_DEPTH = 300;

/**
 * This function computes the timing information for laying out the markers in the
 * MarkerChart component. Each marker is put into a single row based on its name.
 *
 * e.g. An array of 15 markers named either "A", "B", or "C" would be translated into
 *      something that looks like:
 *
 *  [
 *    {
 *      name: "A",
 *      start: [0, 23, 35, 65, 75],
 *      end: [1, 25, 37, 67, 77],
 *      index: [0, 2, 5, 6, 8],
 *      label: ["Aye", "Aye", "Aye", "Aye", "Aye"]
 *    }
 *    {
 *      name: "B",
 *      start: [1, 28, 39, 69, 70],
 *      end: [2, 29, 49, 70, 77],
 *      index: [1, 3, 7, 9, 10],
 *      label: ["Bee", "Bee", "Bee", "Bee", "Bee"]
 *    }
 *    {
 *      name: "C",
 *      start: [10, 33, 45, 75, 85],
 *      end: [11, 35, 47, 77, 87],
 *      index: [4, 11, 12, 13, 14],
 *      label: ["Sea", "Sea", "Sea", "Sea", "Sea"]
 *    }
 *  ]
 *
 * If a marker of a name has timings that overlap in a single row, then it is broken
 * out into multiple rows, with the overlapping timings going in the next rows. The
 * getMarkerTiming tests show the behavior of how this works in practice.
 *
 * This structure allows the markers to easily be laid out like this example below:
 *    ____________________________________________
 *   | GC           | *--*       *--*        *--* |
 *   |              |                             |
 *   | Scripts      | *---------------------*     |
 *   |              |                             |
 *   | User Timings |    *----------------*       |
 *   | User Timings |       *------------*        |
 *   | User Timings |       *--*     *---*        |
 *   |______________|_____________________________|
 */
function getMarkerTiming(tracingMarkers) {
  var _ref;

  // Each marker type will have it's own timing information, later collapse these into
  var markerTimingsMap = new Map();

  // Go through all of the markers.
  for (var tracingMarkerIndex = 0; tracingMarkerIndex < tracingMarkers.length; tracingMarkerIndex++) {
    var marker = tracingMarkers[tracingMarkerIndex];
    var markerTimingsByName = markerTimingsMap.get(marker.name);
    if (markerTimingsByName === undefined) {
      markerTimingsByName = [];
      markerTimingsMap.set(marker.name, markerTimingsByName);
    }

    // Place the marker in the closest row that is empty.
    for (var i = 0; i < MAX_STACKING_DEPTH; i++) {
      // Get or create a row for marker timings.
      var markerTimingsRow = markerTimingsByName[i];
      if (!markerTimingsRow) {
        markerTimingsRow = {
          start: [],
          end: [],
          index: [],
          label: [],
          name: marker.name,
          length: 0
        };
        markerTimingsByName.push(markerTimingsRow);
      }

      var continueSearching = false;

      // Search for a spot not already taken up by another marker of this type.
      for (var j = 0; j < markerTimingsRow.length; j++) {
        var otherStart = markerTimingsRow.start[j];
        var otherEnd = markerTimingsRow.end[j];
        if (otherStart > marker.start + marker.dur) {
          break;
        }
        if (otherEnd > marker.start) {
          continueSearching = true;
          break;
        }
      }

      if (!continueSearching) {
        // An empty spot was found, fill the values in the table.
        markerTimingsRow.start.push(marker.start);
        markerTimingsRow.end.push(marker.start + marker.dur);
        markerTimingsRow.label.push(computeMarkerLabel(marker.data));
        markerTimingsRow.index.push(tracingMarkerIndex);
        markerTimingsRow.length++;
        break;
      }
    }
  }

  // Flatten out the map into a single array.
  return (_ref = []).concat.apply(_ref, (0, _toConsumableArray3.default)(markerTimingsMap.values()));
}

function computeMarkerLabel(data) {
  // Satisfy flow's type checker.
  if (data !== null && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
    // Handle different marker payloads.
    switch (data.type) {
      case 'UserTiming':
        return data.name;
      case 'DOMEvent':
        return data.eventType;
      default:
    }
  }

  return '';
}

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallTree = undefined;

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

exports.computeCallTreeCountsAndTimings = computeCallTreeCountsAndTimings;
exports.getCallTree = getCallTree;

var _timeCode = __webpack_require__(45);

var _profileData = __webpack_require__(19);

var _uniqueStringArray = __webpack_require__(54);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extractFaviconFromLibname(libname) {
  var url = new URL('/favicon.ico', libname);
  return url.href;
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var CallTree = exports.CallTree = function () {
  function CallTree(_ref, callNodeTable, callNodeTimes, callNodeChildCount, rootTotalTime, rootCount, jsOnly, isIntegerInterval) {
    var funcTable = _ref.funcTable,
        resourceTable = _ref.resourceTable,
        stringTable = _ref.stringTable;
    (0, _classCallCheck3.default)(this, CallTree);

    this._callNodeTable = callNodeTable;
    this._callNodeTimes = callNodeTimes;
    this._callNodeChildCount = callNodeChildCount;
    this._funcTable = funcTable;
    this._resourceTable = resourceTable;
    this._stringTable = stringTable;
    this._rootTotalTime = rootTotalTime;
    this._rootCount = rootCount;
    this._nodes = new Map();
    this._children = new Map();
    this._jsOnly = jsOnly;
    this._isIntegerInterval = isIntegerInterval;
  } // A table column matching the callNodeTable


  (0, _createClass3.default)(CallTree, [{
    key: 'getRoots',
    value: function getRoots() {
      return this.getChildren(-1);
    }

    /**
     * Return an array of callNodeIndex for the children of the node with index callNodeIndex.
     * @param  {[type]} callNodeIndex [description]
     * @return {[type]}                [description]
     */

  }, {
    key: 'getChildren',
    value: function getChildren(callNodeIndex) {
      var _this = this;

      var children = this._children.get(callNodeIndex);
      if (children === undefined) {
        var childCount = callNodeIndex === -1 ? this._rootCount : this._callNodeChildCount[callNodeIndex];
        children = [];
        for (var childCallNodeIndex = callNodeIndex + 1; childCallNodeIndex < this._callNodeTable.length && children.length < childCount; childCallNodeIndex++) {
          if (this._callNodeTable.prefix[childCallNodeIndex] === callNodeIndex && this._callNodeTimes.totalTime[childCallNodeIndex] !== 0) {
            children.push(childCallNodeIndex);
          }
        }
        children.sort(function (a, b) {
          return _this._callNodeTimes.totalTime[b] - _this._callNodeTimes.totalTime[a];
        });
        this._children.set(callNodeIndex, children);
      }
      return children;
    }
  }, {
    key: 'hasChildren',
    value: function hasChildren(callNodeIndex) {
      return this.getChildren(callNodeIndex).length !== 0;
    }
  }, {
    key: 'getParent',
    value: function getParent(callNodeIndex) {
      return this._callNodeTable.prefix[callNodeIndex];
    }
  }, {
    key: 'getDepth',
    value: function getDepth(callNodeIndex) {
      return this._callNodeTable.depth[callNodeIndex];
    }
  }, {
    key: 'hasSameNodeIds',
    value: function hasSameNodeIds(tree) {
      return this._callNodeTable === tree._callNodeTable;
    }

    /**
     * Return an object with information about the node with index callNodeIndex.
     * @param  {[type]} callNodeIndex [description]
     * @return {[type]}                [description]
     */

  }, {
    key: 'getNode',
    value: function getNode(callNodeIndex) {
      var node = this._nodes.get(callNodeIndex);
      if (node === undefined) {
        var funcIndex = this._callNodeTable.func[callNodeIndex];
        var funcName = this._stringTable.getString(this._funcTable.name[funcIndex]);
        var resourceIndex = this._funcTable.resource[funcIndex];
        var resourceType = this._resourceTable.type[resourceIndex];
        var isJS = this._funcTable.isJS[funcIndex];
        var libName = this._getOriginAnnotation(funcIndex);
        var precision = this._isIntegerInterval ? 0 : 1;
        var _selfTime = this._callNodeTimes.selfTime[callNodeIndex];
        var formatNumber = this._isIntegerInterval ? _formatIntegerNumber : _formatDecimalNumber;

        node = {
          totalTime: '' + formatNumber(this._callNodeTimes.totalTime[callNodeIndex]),
          totalTimePercent: (100 * this._callNodeTimes.totalTime[callNodeIndex] / this._rootTotalTime).toFixed(precision) + '%',
          selfTime: _selfTime === 0 ? '—' : '' + formatNumber(_selfTime),
          name: funcName,
          lib: libName,
          // Dim platform pseudo-stacks.
          dim: !isJS && this._jsOnly,
          icon: resourceType === _profileData.resourceTypes.webhost ? extractFaviconFromLibname(libName) : null
        };
        this._nodes.set(callNodeIndex, node);
      }
      return node;
    }
  }, {
    key: '_getOriginAnnotation',
    value: function _getOriginAnnotation(funcIndex) {
      var fileNameIndex = this._funcTable.fileName[funcIndex];
      if (fileNameIndex !== null) {
        var fileName = this._stringTable.getString(fileNameIndex);
        var lineNumber = this._funcTable.lineNumber[funcIndex];
        if (lineNumber !== null) {
          return fileName + ':' + lineNumber;
        }
        return fileName;
      }

      var resourceIndex = this._funcTable.resource[funcIndex];
      var resourceNameIndex = this._resourceTable.name[resourceIndex];
      if (resourceNameIndex !== undefined) {
        return this._stringTable.getString(resourceNameIndex);
      }

      return '';
    }
  }]);
  return CallTree;
}();

function _getInvertedStackSelfTimes(thread, callNodeTable, sampleCallNodes, interval) {
  // Compute an array that maps the callNodeIndex to its root.
  var callNodeToRoot = new Int32Array(callNodeTable.length);
  for (var callNodeIndex = 0; callNodeIndex < callNodeTable.length; callNodeIndex++) {
    var prefixCallNode = callNodeTable.prefix[callNodeIndex];
    if (prefixCallNode !== -1) {
      callNodeToRoot[callNodeIndex] = callNodeToRoot[prefixCallNode];
    } else {
      callNodeToRoot[callNodeIndex] = callNodeIndex;
    }
  }

  // Calculate the timing information by going through each sample.
  var callNodeSelfTime = new Float32Array(callNodeTable.length);
  var callNodeLeafTime = new Float32Array(callNodeTable.length);
  for (var sampleIndex = 0; sampleIndex < sampleCallNodes.length; sampleIndex++) {
    var _callNodeIndex = sampleCallNodes[sampleIndex];
    if (_callNodeIndex !== null) {
      var rootIndex = callNodeToRoot[_callNodeIndex];
      callNodeSelfTime[rootIndex] += interval;
      callNodeLeafTime[_callNodeIndex] += interval;
    }
  }

  return { callNodeSelfTime: callNodeSelfTime, callNodeLeafTime: callNodeLeafTime };
}

/**
 * This is a helper function to get the stack timings for un-inverted call trees.
 */
function _getStackSelfTimes(thread, callNodeTable, sampleCallNodes, interval) {
  var callNodeSelfTime = new Float32Array(callNodeTable.length);

  for (var sampleIndex = 0; sampleIndex < sampleCallNodes.length; sampleIndex++) {
    var callNodeIndex = sampleCallNodes[sampleIndex];
    if (callNodeIndex !== null) {
      callNodeSelfTime[callNodeIndex] += interval;
    }
  }

  return { callNodeSelfTime: callNodeSelfTime, callNodeLeafTime: callNodeSelfTime };
}

/**
 * This computes all of the count and timing information displayed in the calltree.
 * It takes into account both the normal tree, and the inverted tree.
 */
function computeCallTreeCountsAndTimings(thread, _ref2, interval, invertCallstack) {
  var callNodeTable = _ref2.callNodeTable,
      stackIndexToCallNodeIndex = _ref2.stackIndexToCallNodeIndex;

  var sampleCallNodes = (0, _profileData.getSampleCallNodes)(thread.samples, stackIndexToCallNodeIndex);
  // Inverted trees need a different method for computing the timing.

  var _ref3 = invertCallstack ? _getInvertedStackSelfTimes(thread, callNodeTable, sampleCallNodes, interval) : _getStackSelfTimes(thread, callNodeTable, sampleCallNodes, interval),
      callNodeSelfTime = _ref3.callNodeSelfTime,
      callNodeLeafTime = _ref3.callNodeLeafTime;

  // Compute the following variables:


  var callNodeTotalTime = new Float32Array(callNodeTable.length);
  var callNodeChildCount = new Uint32Array(callNodeTable.length);
  var rootTotalTime = 0;
  var rootCount = 0;

  for (var callNodeIndex = callNodeTable.length - 1; callNodeIndex >= 0; callNodeIndex--) {
    callNodeTotalTime[callNodeIndex] += callNodeLeafTime[callNodeIndex];
    if (callNodeTotalTime[callNodeIndex] === 0) {
      continue;
    }
    var prefixCallNode = callNodeTable.prefix[callNodeIndex];
    if (prefixCallNode === -1) {
      rootTotalTime += callNodeTotalTime[callNodeIndex];
      rootCount++;
    } else {
      callNodeTotalTime[prefixCallNode] += callNodeTotalTime[callNodeIndex];
      callNodeChildCount[prefixCallNode]++;
    }
  }

  return {
    callNodeTimes: {
      selfTime: callNodeSelfTime,
      totalTime: callNodeTotalTime
    },
    callNodeChildCount: callNodeChildCount,
    rootTotalTime: rootTotalTime,
    rootCount: rootCount
  };
}

/**
 * An exported interface to get an instance of the CallTree class.
 * This handles computing timing information, and passing it all into
 * the CallTree constructor.
 */
function getCallTree(thread, interval, callNodeInfo, implementationFilter, invertCallstack) {
  return (0, _timeCode.timeCode)('getCallTree', function () {
    var _computeCallTreeCount = computeCallTreeCountsAndTimings(thread, callNodeInfo, interval, invertCallstack),
        callNodeTimes = _computeCallTreeCount.callNodeTimes,
        callNodeChildCount = _computeCallTreeCount.callNodeChildCount,
        rootTotalTime = _computeCallTreeCount.rootTotalTime,
        rootCount = _computeCallTreeCount.rootCount;

    var jsOnly = implementationFilter === 'js';
    var isIntegerInterval = Math.floor(interval) === interval;

    return new CallTree(thread, callNodeInfo.callNodeTable, callNodeTimes, callNodeChildCount, rootTotalTime, rootCount, jsOnly, isIntegerInterval);
  });
}

var LOCALE_WITH_DECIMAL_POINT = {
  minimumFractionDigits: 1,
  maximumFractionDigits: 1
};
function _formatDecimalNumber(number) {
  return number.toLocaleString(undefined, LOCALE_WITH_DECIMAL_POINT);
}

function _formatIntegerNumber(number) {
  return number.toLocaleString();
}

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.implementationCategories = exports.implementationCategoryMap = undefined;
exports.getImplementationColor = getImplementationColor;
exports.getCategoryByImplementation = getCategoryByImplementation;
exports.getImplementationCategoryIndex = getImplementationCategoryIndex;
exports.getFunctionName = getFunctionName;

var _photonColors = __webpack_require__(128);

var colors = _interopRequireWildcard(_photonColors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var implementationCategoryMap = exports.implementationCategoryMap = {
  'JS Baseline': colors.GREY_30,
  JIT: '#86EC71', // A lighter version of GREEN_50
  'JS Interpreter': colors.GREY_40,
  Platform: colors.GREY_20
}; /* This Source Code Form is subject to the terms of the Mozilla Public
    * License, v. 2.0. If a copy of the MPL was not distributed with this
    * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var implementationCategories = exports.implementationCategories = _categoriesMapToList(implementationCategoryMap);

var _implementationCategoriesIndexMap = _toIndexMap(implementationCategories);

// TODO - This function is not needed.

function getImplementationColor(thread, frameIndex) {
  return getCategoryByImplementation(thread, frameIndex).color;
}

function getCategoryByImplementation(thread, frameIndex) {
  return implementationCategories[getImplementationCategoryIndex(thread, frameIndex)];
}

// TODO - This function is not needed.

function getImplementationCategoryIndex(thread, frameIndex) {
  var funcIndex = thread.frameTable.func[frameIndex];
  var implementationIndex = thread.frameTable.implementation[frameIndex];
  var implementation = implementationIndex ? thread.stringTable.getString(implementationIndex) : null;
  var categoryName = void 0;
  if (implementation) {
    categoryName = implementation === 'baseline' ? 'JS Baseline' : 'JIT';
  } else {
    categoryName = thread.funcTable.isJS[funcIndex] ? 'JS Interpreter' : 'Platform';
  }
  return _implementationCategoriesIndexMap[categoryName];
}

function _toIndexMap(categories) {
  var indexMap = {};
  for (var i = 0; i < categories.length; i++) {
    indexMap[categories[i].name] = i;
  }
  return indexMap;
}

function _categoriesMapToList(object) {
  var list = [];
  for (var _name in object) {
    if (object.hasOwnProperty(_name)) {
      list.push({ name: _name, color: object[_name] });
    }
  }
  return list;
}

function getFunctionName(thread, stackIndex) {
  var frameIndex = thread.stackTable.frame[stackIndex];
  var funcIndex = thread.frameTable.func[frameIndex];
  return thread.stringTable.getString(thread.funcTable.name[funcIndex]);
}

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFunctionName = getFunctionName;
exports.getImplementationName = getImplementationName;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function getFunctionName(thread, stackIndex) {
  var frameIndex = thread.stackTable.frame[stackIndex];
  var funcIndex = thread.frameTable.func[frameIndex];
  return thread.stringTable.getString(thread.funcTable.name[funcIndex]);
}

function getImplementationName(thread, stackIndex) {
  var frameIndex = thread.stackTable.frame[stackIndex];
  var implementation = thread.frameTable.implementation[frameIndex];
  if (implementation) {
    return implementation === 'baseline' ? 'JS Baseline' : 'JS Ion';
  }
  var funcIndex = thread.frameTable.func[frameIndex];
  return thread.funcTable.isJS[funcIndex] ? 'JS Interpreter' : 'Platform';
}

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    Set = getNative(root, 'Set'),
    nativeCreate = getNative(Object, 'create');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * This method is like `_.uniq` except that it accepts `comparator` which
 * is invoked to compare elements of `array`. The comparator is invoked with
 * two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.uniqWith(objects, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */
function uniqWith(array, comparator) {
  return (array && array.length)
    ? baseUniq(array, undefined, comparator)
    : [];
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = uniqWith;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63)))

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = __webpack_require__(36);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.provideHostSide = provideHostSide;
exports.provideWorkerSide = provideWorkerSide;

var _workerFactory = __webpack_require__(129);

var _workerFactory2 = _interopRequireDefault(_workerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function provideHostSide(workerFilename, methods) {
  return function HostClass() {
    for (var _len = arguments.length, constructorArguments = Array(_len), _key = 0; _key < _len; _key++) {
      constructorArguments[_key] = arguments[_key];
    }

    var worker = new _workerFactory2.default(workerFilename);
    var callbacks = new Map(); // msgID -> { resolve, reject }
    var nextMessageID = 0;

    worker.onmessage = function (_ref) {
      var data = _ref.data;
      var msgID = data.msgID,
          type = data.type;

      var _callbacks$get = callbacks.get(msgID),
          resolve = _callbacks$get.resolve,
          reject = _callbacks$get.reject;

      callbacks.delete(msgID);
      if (type === 'success') {
        resolve(data.result);
      } else if (type === 'error') {
        reject(data.error);
      }
    };

    function makeMethod(method) {
      return function () {
        for (var _len2 = arguments.length, paramArray = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          paramArray[_key2] = arguments[_key2];
        }

        var msgID = nextMessageID++;
        worker.postMessage({ msgID: msgID, type: 'method', method: method, paramArray: paramArray });
        return new Promise(function (resolve, reject) {
          callbacks.set(msgID, { resolve: resolve, reject: reject });
        });
      };
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var method = _step.value;

        this[method] = makeMethod(method);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    worker.postMessage({ type: 'constructor', constructorArguments: constructorArguments });
  };
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
function provideWorkerSide(workerGlobal, theClass) {
  var theObject = null;
  workerGlobal.onmessage = function (_ref2) {
    var data = _ref2.data;

    if (data.type === 'constructor') {
      theObject = new (Function.prototype.bind.apply(theClass, [null].concat((0, _toConsumableArray3.default)(data.constructorArguments))))();
    } else if (data.type === 'method') {
      var _theObject;

      var msgID = data.msgID,
          method = data.method,
          paramArray = data.paramArray;

      (_theObject = theObject)[method].apply(_theObject, (0, _toConsumableArray3.default)(paramArray)).then(function (result) {
        workerGlobal.postMessage({ msgID: msgID, type: 'success', result: result });
      }, function (error) {
        workerGlobal.postMessage({
          msgID: msgID,
          type: 'error',
          error: error.toString()
        });
      });
    }
  };
}

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOldCleopatraFormat = isOldCleopatraFormat;
exports.convertOldCleopatraProfile = convertOldCleopatraProfile;

var _uniqueStringArray = __webpack_require__(54);

var _profileData = __webpack_require__(19);

var _geckoProfileVersioning = __webpack_require__(122);

var _taskTracer = __webpack_require__(79);

/**
 * The "old cleopatra format" is the profile format that was used by the
 * cleopatra version before the big rewrite. Profiles of this format are still
 * in the profile store, and there are links to those profiles strewn across
 * bugzilla. We want to be able to display those profiles.
 * This file's purpose is to convert "old cleopatra" profiles into
 * processed profiles of "processed profile format" version zero.
 * The result will be run through the processed profile format
 * compatibility conversion. Consequently, when the processed profile
 * format changes, this file does not need to be touched and instead we will
 * automatically take advantage of the process profile format conversion.
 *
 * A lot of this code will remind you of very similar code in
 * process-profile.js. However, we intentionally do not share code with it:
 * We want process-profile to be exclusively concerned with converting the
 * most recent Gecko profile format into the most recent processed profile
 * format.
 * Some of the code below is basically a snapshot of the processing code as
 * it was before the versioning scheme was introduced.
 */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function isOldCleopatraFormat(profile) {
  return 'format' in profile && profile.format === 'profileJSONWithSymbolicationTable,1';
}

function _getRealScriptURI(url) {
  if (url) {
    var urls = url.split(' -> ');
    return urls[urls.length - 1];
  }
  return url;
}

function _cleanFunctionName(functionName) {
  var ignoredPrefix = 'non-virtual thunk to ';
  if (functionName.startsWith && functionName.startsWith(ignoredPrefix)) {
    return functionName.substr(ignoredPrefix.length);
  }
  return functionName;
}

function _convertThread(thread, interval, symbolicationTable) {
  var stringTable = new _uniqueStringArray.UniqueStringArray(symbolicationTable);
  var frameTable = {
    length: 0,
    category: [],
    location: [],
    implementation: [],
    line: [],
    optimizations: [],
    func: undefined,
    address: undefined
  };
  var stackTable = {
    length: 0,
    frame: [],
    prefix: []
  };
  var samples = {
    length: 0,
    responsiveness: [],
    rss: [],
    stack: [],
    time: [],
    uss: []
  };
  var markers = {
    length: 0,
    data: [],
    name: [],
    time: []
  };

  var frameMap = new Map();
  var stackMap = new Map();

  var lastSampleTime = 0;

  for (var i = 0; i < thread.samples.length; i++) {
    var sample = thread.samples[i];
    // sample has the shape: {
    //   frames: [symbolicationTableIndices for the stack frames]
    //   extraInfo: {
    //     responsiveness,
    //     time,
    //   }
    // }
    //
    // We map every stack frame to a frame.
    // Then we walk the stack, creating "stacks" (= (prefix stack, frame) pairs)
    // as needed, and arrive at the sample's stackIndex.
    var _frames = sample.frames;
    var prefix = null;
    for (var _i = 0; _i < _frames.length; _i++) {
      var frameSymbolicationTableIndex = _frames[_i];
      var frameIndex = frameMap.get(frameSymbolicationTableIndex);
      if (frameIndex === undefined) {
        frameIndex = frameTable.length++;
        frameTable.location[frameIndex] = frameSymbolicationTableIndex;
        frameTable.category[frameIndex] = null;
        frameTable.implementation[frameIndex] = null;
        frameTable.line[frameIndex] = null;
        frameTable.optimizations[frameIndex] = null;
        frameMap.set(frameSymbolicationTableIndex, frameIndex);
      }
      var stackMapKey = prefix !== null ? prefix + ':' + frameIndex : ':' + frameIndex;
      var stackIndex = stackMap.get(stackMapKey);
      if (stackIndex === undefined) {
        stackIndex = stackTable.length++;
        stackTable.prefix[stackIndex] = prefix;
        stackTable.frame[stackIndex] = frameIndex;
        stackMap.set(stackMapKey, stackIndex);
      }
      prefix = stackIndex;
    }
    var sampleIndex = samples.length++;
    samples.stack[sampleIndex] = prefix;
    var hasTime = 'time' in sample.extraInfo && typeof sample.extraInfo.time === 'number';
    var sampleTime = hasTime ? sample.extraInfo.time : lastSampleTime + interval;
    samples.time[sampleIndex] = sampleTime;
    lastSampleTime = sampleTime;
    samples.responsiveness[sampleIndex] = 'responsiveness' in sample.extraInfo ? sample.extraInfo.responsiveness : null;
    samples.rss[sampleIndex] = 'rss' in sample.extraInfo ? sample.extraInfo.rss : null;
    samples.uss[sampleIndex] = 'uss' in sample.extraInfo ? sample.extraInfo.uss : null;
  }

  for (var _i2 = 0; _i2 < thread.markers.length; _i2++) {
    var marker = thread.markers[_i2];
    var markerIndex = markers.length++;
    markers.data[markerIndex] = marker.data;
    markers.name[markerIndex] = stringTable.indexForString(marker.name);
    markers.time[markerIndex] = marker.time;
  }

  var funcTable = {
    length: 0,
    name: [],
    resource: [],
    address: [],
    isJS: []
  };
  function addFunc(name, resource, address, isJS) {
    var index = funcTable.length++;
    funcTable.name[index] = name;
    funcTable.resource[index] = resource;
    funcTable.address[index] = address;
    funcTable.isJS[index] = isJS;
  }
  var resourceTable = {
    length: 0,
    type: [],
    name: [],
    lib: [],
    icon: [],
    addonId: []
  };
  function addLibResource(name, lib) {
    var index = resourceTable.length++;
    resourceTable.type[index] = _profileData.resourceTypes.library;
    resourceTable.name[index] = name;
    resourceTable.lib[index] = lib;
  }
  function addUrlResource(urlStringIndex) {
    var index = resourceTable.length++;
    resourceTable.type[index] = _profileData.resourceTypes.url;
    resourceTable.name[index] = urlStringIndex;
  }

  var libNameToResourceIndex = new Map();
  var urlToResourceIndex = new Map();
  var stringTableIndexToNewFuncIndex = new Map();

  frameTable.func = frameTable.location.map(function (locationIndex) {
    var funcNameIndex = locationIndex;
    var funcIndex = stringTableIndexToNewFuncIndex.get(funcNameIndex);
    if (funcIndex !== undefined) {
      return funcIndex;
    }

    var resourceIndex = -1;
    var addressRelativeToLib = -1;
    var isJS = false;
    var locationString = stringTable.getString(funcNameIndex);
    if (!locationString.startsWith('0x')) {
      var cppMatch = /^(.*) \(in ([^)]*)\) (\+ [0-9]+)$/.exec(locationString) || /^(.*) \(in ([^)]*)\) (\(.*:.*\))$/.exec(locationString) || /^(.*) \(in ([^)]*)\)$/.exec(locationString);
      if (cppMatch) {
        funcNameIndex = stringTable.indexForString(_cleanFunctionName(cppMatch[1]));
        var libraryNameStringIndex = stringTable.indexForString(cppMatch[2]);
        funcIndex = stringTableIndexToNewFuncIndex.get(funcNameIndex);
        if (funcIndex !== undefined) {
          return funcIndex;
        }
        if (libNameToResourceIndex.has(libraryNameStringIndex)) {
          resourceIndex = libNameToResourceIndex.get(libraryNameStringIndex);
        } else {
          resourceIndex = resourceTable.length;
          libNameToResourceIndex.set(libraryNameStringIndex, resourceIndex);
          addLibResource(libraryNameStringIndex, -1);
        }
      } else {
        var jsMatch = /^(.*) \((.*):([0-9]+)\)$/.exec(locationString) || /^()(.*):([0-9]+)$/.exec(locationString);
        if (jsMatch) {
          isJS = true;
          var scriptURI = _getRealScriptURI(jsMatch[2]);
          if (urlToResourceIndex.has(scriptURI)) {
            resourceIndex = urlToResourceIndex.get(scriptURI);
          } else {
            resourceIndex = resourceTable.length;
            urlToResourceIndex.set(scriptURI, resourceIndex);
            var urlStringIndex = scriptURI ? stringTable.indexForString(scriptURI) : null;
            addUrlResource(urlStringIndex);
          }
        }
      }
    }
    funcIndex = funcTable.length;
    addFunc(funcNameIndex, resourceIndex, addressRelativeToLib, isJS);
    stringTableIndexToNewFuncIndex.set(funcNameIndex, funcIndex);
    return funcIndex;
  });
  frameTable.address = frameTable.func.map(function (funcIndex) {
    return funcTable.address[funcIndex];
  });
  delete frameTable.location;

  var threadName = thread.name;
  var processType = void 0;
  if (threadName === 'Content') {
    processType = 'tab';
  } else if (threadName === 'Plugin') {
    processType = 'plugin';
  } else {
    processType = 'default';
  }

  if (threadName === 'Content') {
    threadName = 'GeckoMain';
  }

  return {
    libs: [],
    name: threadName,
    processType: processType,
    frameTable: frameTable,
    funcTable: funcTable,
    resourceTable: resourceTable,
    stackTable: stackTable,
    markers: markers,
    samples: samples,
    stringArray: stringTable.serializeToArray()
  };
}

function arrayFromArrayLikeObject(obj) {
  var result = [];
  for (var _index in obj) {
    result[+_index] = obj[_index];
  }
  return result;
}

function _extractThreadList(profileJSON) {
  if (Array.isArray(profileJSON)) {
    // Ancient versions of the old cleopatra format did not have a threads list
    // or markers. Instead, profileJSON was just the list of samples.
    var oneThread = {
      name: 'GeckoMain',
      markers: [],
      samples: profileJSON
    };

    return [oneThread];
  }

  return arrayFromArrayLikeObject(profileJSON.threads);
}

/**
 * Convert the old cleopatra format into the serialized processed format
 * version zero.
 * @param {object} profile The input profile.
 * @returns A "processed" profile that needs to be run through the
 *          "processed format" compatibility conversion.
 */
function convertOldCleopatraProfile(profile) {
  var meta = profile.meta,
      profileJSON = profile.profileJSON;


  var threads = _extractThreadList(profileJSON);
  var symbolicationTable = arrayFromArrayLikeObject(profile.symbolicationTable);

  return {
    meta: Object.assign({}, meta, { version: _geckoProfileVersioning.CURRENT_VERSION }),
    threads: threads.map(function (t) {
      return _convertThread(t, meta.interval, symbolicationTable);
    }),
    tasktracer: (0, _taskTracer.getEmptyTaskTracerData)()
  };
}

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SymbolStore = undefined;

var _regenerator = __webpack_require__(118);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = __webpack_require__(119);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _symbolStoreDb = __webpack_require__(405);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Lets you get symbol tables and only requests them from the symbol provider once.
 * @class SymbolStore
 * @classdesc A broker that lets you request stuff as often as you want.
 */
var SymbolStore = exports.SymbolStore = function () {

  /**
   * SymbolStore constructor.
   * @param {string} dbNamePrefix   A prefix for the indexedDB database which the SymbolStore
   *                                uses internally (using asyncStorage) to store symbol tables.
   * @param {object} symbolProvider An object with a method 'requestSymbolTable(debugName, breakpadId)'
   *                                which will be called whenever we need a symbol table. This method
   *                                needs to return a promise of [addr, syms] (the symbol table).
   */
  function SymbolStore(dbNamePrefix, symbolProvider) {
    (0, _classCallCheck3.default)(this, SymbolStore);

    this._symbolProvider = symbolProvider;
    this._db = new _symbolStoreDb.SymbolStoreDB(dbNamePrefix + '-symbol-tables');

    // A set of strings identifying libraries that we have requested
    // symbols for but gotten an error back.
    this._failedRequests = new Set();

    // A map with one entry for each library that we have requested (but not yet
    // received) symbols for. The keys are strings (libid), and the values are
    // promises that resolve to [ addrs, index, buffer ] symbol tables.
    this._requestedSymbolTables = new Map();
  }

  (0, _createClass3.default)(SymbolStore, [{
    key: '_getSymbolTable',
    value: function _getSymbolTable(lib) {
      var _this = this;

      var debugName = lib.debugName,
          breakpadId = lib.breakpadId;

      var libid = debugName + '/' + breakpadId;

      if (this._failedRequests.has(libid)) {
        return Promise.reject(new Error("We've tried to request a symbol table for this library before and failed, so we're not trying again."));
      }

      var existingRequest = this._requestedSymbolTables.get(libid);
      if (existingRequest !== undefined) {
        // We've already requested a symbol table for this library and are
        // waiting for the result, so just return the promise for the existing
        // request.
        return existingRequest;
      }

      // Try to get the symbol table from the database
      var symbolTablePromise = this._db.getSymbolTable(debugName, breakpadId).catch(function () {
        // Request the symbol table from the symbol provider.
        var symbolTablePromise = _this._symbolProvider.requestSymbolTable(debugName, breakpadId).catch(function (error) {
          console.error('Failed to symbolicate library ' + debugName, error);
          _this._failedRequests.add(libid);
          _this._requestedSymbolTables.delete(libid);
          throw error;
        });

        // Once the symbol table comes in, store it in the database, but don't
        // let that block the promise that we return to our caller.
        symbolTablePromise.then(function (symbolTable) {
          _this._db.storeSymbolTable(debugName, breakpadId, symbolTable).then(function () {
            _this._requestedSymbolTables.delete(libid);
          }, function (error) {
            console.error('Failed to store the symbol table for ' + debugName + ' ' + breakpadId + ' in the database:', error);
            // We'll keep the symbolTablePromise in _requestedSymbolTables so
            // that we'll the symbolTable around for future requests even though
            // we failed to put it into the database.
          });
        });

        return symbolTablePromise;
      });
      this._requestedSymbolTables.set(libid, symbolTablePromise);
      return symbolTablePromise;
    }

    /**
     * Get the array of symbol addresses for the given library.
     * @param  {Library} lib A library object with the properties `debugName` and `breakpadId`.
     * @return {Promise<number[]>} A promise of the array of addresses.
     */

  }, {
    key: 'getFuncAddressTableForLib',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(lib) {
        var _ref2, _ref3, addrs;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._getSymbolTable(lib);

              case 2:
                _ref2 = _context.sent;
                _ref3 = (0, _slicedToArray3.default)(_ref2, 1);
                addrs = _ref3[0];
                return _context.abrupt('return', addrs);

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getFuncAddressTableForLib(_x) {
        return _ref.apply(this, arguments);
      }

      return getFuncAddressTableForLib;
    }()

    /**
     * Get an array of symbol strings for the given symbol indices.
     * @param  {number[]} requestedAddressesIndices An array where each element is the index of the symbol whose string should be looked up.
     * @param  {Library} lib A library object with the properties `debugName` and `breakpadId`.
     * @return {Promise<string[]>} An promise array of strings, in the order as requested.
     */

  }, {
    key: 'getSymbolsForAddressesInLib',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(requestedAddressesIndices, lib) {
        var _ref5, _ref6, index, buffer, decoder;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._getSymbolTable(lib);

              case 2:
                _ref5 = _context2.sent;
                _ref6 = (0, _slicedToArray3.default)(_ref5, 3);
                index = _ref6[1];
                buffer = _ref6[2];
                decoder = new TextDecoder();
                return _context2.abrupt('return', requestedAddressesIndices.map(function (addrIndex) {
                  var startOffset = index[addrIndex];
                  var endOffset = index[addrIndex + 1];
                  var subarray = buffer.subarray(startOffset, endOffset);
                  return decoder.decode(subarray);
                }));

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSymbolsForAddressesInLib(_x2, _x3) {
        return _ref4.apply(this, arguments);
      }

      return getSymbolsForAddressesInLib;
    }()
  }]);
  return SymbolStore;
}(); /* This Source Code Form is subject to the terms of the Mozilla Public
      * License, v. 2.0. If a copy of the MPL was not distributed with this
      * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SymbolStoreDB = undefined;

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var kTwoWeeksInMilliseconds = 2 * 7 * 24 * 60 * 60 * 1000;

/**
 * A wrapper around an IndexedDB table that stores symbol tables.
 * @class SymbolStoreDB
 * @classdesc Where does this description show up?
 */

var SymbolStoreDB = exports.SymbolStoreDB = function () {
  // in milliseconds

  /**
   * @param {string} dbName   The name of the indexedDB database that's used
   *                          to store the symbol tables.
   * @param {number} maxCount The maximum number of symbol tables to have in
   *                          storage at the same time.
   * @param {number} maxAge   The maximum age, in milliseconds, before stored
   *                          symbol tables should get evicted.
   */
  function SymbolStoreDB(dbName) {
    var maxCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
    var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : kTwoWeeksInMilliseconds;
    (0, _classCallCheck3.default)(this, SymbolStoreDB);

    this._dbPromise = this._setupDB(dbName);
    this._maxCount = maxCount;
    this._maxAge = maxAge;
  }

  (0, _createClass3.default)(SymbolStoreDB, [{
    key: '_getDB',
    value: function _getDB() {
      if (this._dbPromise) {
        return this._dbPromise;
      }
      return Promise.reject(new Error('The database is closed.'));
    }
  }, {
    key: '_setupDB',
    value: function _setupDB(dbName) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var indexedDB = window.indexedDB;
        var openReq = indexedDB.open(dbName, 2);
        openReq.onerror = function () {
          if (openReq.error.name === 'VersionError') {
            // This error fires if the database already exists, and the existing
            // database has a higher version than what we requested. So either
            // this version of perf.html is outdated, or somebody briefly tried
            // to change this database format (and increased the version number)
            // and then downgraded to a version of perf.html without those
            // changes.
            // We delete the database and try again.
            var deleteDBReq = indexedDB.deleteDatabase(dbName);
            deleteDBReq.onerror = function () {
              return reject(deleteDBReq.error);
            };
            deleteDBReq.onsuccess = function () {
              // Try to open the database again.
              _this._setupDB(dbName).then(resolve, reject);
            };
          } else {
            reject(openReq.error);
          }
        };
        openReq.onupgradeneeded = function (_ref) {
          var oldVersion = _ref.oldVersion;

          var db = openReq.result;
          db.onerror = reject;

          if (oldVersion === 1) {
            db.deleteObjectStore('symbol-tables');
          }
          var store = db.createObjectStore('symbol-tables', {
            keyPath: ['debugName', 'breakpadId']
          });
          store.createIndex('lastUsedDate', 'lastUsedDate');
        };

        openReq.onblocked = function () {
          reject(new Error('The symbol store database could not be upgraded because it is ' + 'open in another tab. Please close all your other perf-html.io ' + 'tabs and refresh.'));
        };

        openReq.onsuccess = function () {
          var db = openReq.result;
          db.onversionchange = function () {
            db.close();
          };
          resolve(db);
          _this._deleteAllBeforeDate(db, new Date(+new Date() - _this._maxAge)).catch(function (e) {
            console.error('Encountered error while cleaning out database:', e);
          });
        };
      });
    }

    /**
     * Store the symbol table for a given library.
     * @param {string}      The debugName of the library.
     * @param {string}      The breakpadId of the library.
     * @param {symbolTable} The symbol table, in SymbolTableAsTuple format.
     * @return              A promise that resolves (with nothing) once storage
     *                      has succeeded.
     */

  }, {
    key: 'storeSymbolTable',
    value: function storeSymbolTable(debugName, breakpadId, _ref2) {
      var _this2 = this;

      var _ref3 = (0, _slicedToArray3.default)(_ref2, 3),
          addrs = _ref3[0],
          index = _ref3[1],
          buffer = _ref3[2];

      return this._getDB().then(function (db) {
        return new Promise(function (resolve, reject) {
          var transaction = db.transaction('symbol-tables', 'readwrite');
          transaction.onerror = function () {
            return reject(transaction.error);
          };
          var store = transaction.objectStore('symbol-tables');
          _this2._deleteLeastRecentlyUsedUntilCountIsNoMoreThanN(store, _this2._maxCount - 1, function () {
            var lastUsedDate = new Date();
            var addReq = store.add({
              debugName: debugName,
              breakpadId: breakpadId,
              addrs: addrs,
              index: index,
              buffer: buffer,
              lastUsedDate: lastUsedDate
            });
            addReq.onsuccess = function () {
              return resolve();
            };
          });
        });
      });
    }

    /**
     * Retrieve the symbol table for the given library.
     * @param {string}      The debugName of the library.
     * @param {string}      The breakpadId of the library.
     * @return              A promise that resolves with the symbol table (in
     *                      SymbolTableAsTuple format), or fails if we couldn't
     *                      find a symbol table for the requested library.
     */

  }, {
    key: 'getSymbolTable',
    value: function getSymbolTable(debugName, breakpadId) {
      return this._getDB().then(function (db) {
        return new Promise(function (resolve, reject) {
          var transaction = db.transaction('symbol-tables', 'readwrite');
          transaction.onerror = function () {
            return reject(transaction.error);
          };
          var store = transaction.objectStore('symbol-tables');
          var req = store.openCursor([debugName, breakpadId]);
          req.onsuccess = function () {
            var cursor = req.result;
            if (cursor) {
              var value = cursor.value;
              value.lastUsedDate = new Date();
              var updateDateReq = cursor.update(value);
              var _addrs = value.addrs,
                  _index = value.index,
                  _buffer = value.buffer;

              updateDateReq.onsuccess = function () {
                return resolve([_addrs, _index, _buffer]);
              };
            } else {
              reject(new Error('The requested library does not exist in the database.'));
            }
          };
        });
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      // Close the database and make all methods uncallable.
      return this._getDB().then(function (db) {
        db.close();
        _this3._dbPromise = null;
      });
    }

    // Many of the utility functions below use callback functions instead of
    // promises. That's because IndexedDB transactions auto-close at the end of
    // the current event tick if there hasn't been a new request after the last
    // success event. So we need to synchronously add more work inside the
    // onsuccess handler, and we do that by calling the callback function.
    // Resolving a promise only calls any then() callback at the next microtask,
    // and by that time the transaction will already have closed.
    // We don't propagate errors because those will be caught by the onerror
    // handler of the transaction that we got `store` from.

  }, {
    key: '_deleteAllBeforeDate',
    value: function _deleteAllBeforeDate(db, beforeDate) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        var transaction = db.transaction('symbol-tables', 'readwrite');
        transaction.onerror = function () {
          return reject(transaction.error);
        };
        var store = transaction.objectStore('symbol-tables');
        _this4._deleteRecordsLastUsedBeforeDate(store, beforeDate, resolve);
      });
    }
  }, {
    key: '_deleteRecordsLastUsedBeforeDate',
    value: function _deleteRecordsLastUsedBeforeDate(store, beforeDate, callback) {
      var lastUsedDateIndex = store.index('lastUsedDate');
      // Get a cursor that walks all records whose lastUsedDate is less than beforeDate.
      var cursorReq = lastUsedDateIndex.openCursor(window.IDBKeyRange.upperBound(beforeDate, true));
      // Iterate over all records in this cursor and delete them.
      cursorReq.onsuccess = function () {
        var cursor = cursorReq.result;
        if (cursor) {
          cursor.delete().onsuccess = function () {
            cursor.continue();
          };
        } else {
          callback();
        }
      };
    }
  }, {
    key: '_deleteNLeastRecentlyUsedRecords',
    value: function _deleteNLeastRecentlyUsedRecords(store, n, callback) {
      // Get a cursor that walks the records from oldest to newest
      var lastUsedDateIndex = store.index('lastUsedDate');
      var cursorReq = lastUsedDateIndex.openCursor();
      var deletedCount = 0;
      cursorReq.onsuccess = function () {
        var cursor = cursorReq.result;
        if (cursor) {
          var deleteReq = cursor.delete();
          deleteReq.onsuccess = function () {
            deletedCount++;
            if (deletedCount < n) {
              cursor.continue();
            } else {
              callback();
            }
          };
        } else {
          callback();
        }
      };
    }
  }, {
    key: '_count',
    value: function _count(store, callback) {
      var countReq = store.count();
      countReq.onsuccess = function () {
        return callback(countReq.result);
      };
    }
  }, {
    key: '_deleteLeastRecentlyUsedUntilCountIsNoMoreThanN',
    value: function _deleteLeastRecentlyUsedUntilCountIsNoMoreThanN(store, n, callback) {
      var _this5 = this;

      this._count(store, function (symbolTableCount) {
        if (symbolTableCount > n) {
          // We'll need to remove at least one symbol table.
          var needToRemoveCount = symbolTableCount - n;
          _this5._deleteNLeastRecentlyUsedRecords(store, needToRemoveCount, callback);
        } else {
          callback();
        }
      });
    }
  }]);
  return SymbolStoreDB;
}();

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemporaryError = undefined;

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TemporaryError = exports.TemporaryError = function (_Error) {
  (0, _inherits3.default)(TemporaryError, _Error);

  function TemporaryError(message) {
    var attempt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck3.default)(this, TemporaryError);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TemporaryError.__proto__ || Object.getPrototypeOf(TemporaryError)).call(this, message));

    _this.name = 'TemporaryError';
    _this.attempt = attempt;
    return _this;
  }

  return TemporaryError;
}(Error); /* This Source Code Form is subject to the terms of the Mozilla Public
           * License, v. 2.0. If a copy of the MPL was not distributed with this
           * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _TabBar = __webpack_require__(408);

var _TabBar2 = _interopRequireDefault(_TabBar);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _ProfileSummaryView = __webpack_require__(411);

var _ProfileSummaryView2 = _interopRequireDefault(_ProfileSummaryView);

var _ProfileCallTreeView = __webpack_require__(421);

var _ProfileCallTreeView2 = _interopRequireDefault(_ProfileCallTreeView);

var _markerTable = __webpack_require__(452);

var _markerTable2 = _interopRequireDefault(_markerTable);

var _ProfileTaskTracerView = __webpack_require__(458);

var _ProfileTaskTracerView2 = _interopRequireDefault(_ProfileTaskTracerView);

var _ProfileFilterNavigator = __webpack_require__(459);

var _ProfileFilterNavigator2 = _interopRequireDefault(_ProfileFilterNavigator);

var _ProfileSharing = __webpack_require__(460);

var _ProfileSharing2 = _interopRequireDefault(_ProfileSharing);

var _SymbolicationStatusOverlay = __webpack_require__(480);

var _SymbolicationStatusOverlay2 = _interopRequireDefault(_SymbolicationStatusOverlay);

var _stackChart = __webpack_require__(481);

var _stackChart2 = _interopRequireDefault(_stackChart);

var _markerChart = __webpack_require__(496);

var _markerChart2 = _interopRequireDefault(_markerChart);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _ProfileViewerHeader = __webpack_require__(502);

var _ProfileViewerHeader2 = _interopRequireDefault(_ProfileViewerHeader);

var _ProfileCallTreeContextMenu = __webpack_require__(514);

var _ProfileCallTreeContextMenu2 = _interopRequireDefault(_ProfileCallTreeContextMenu);

var _ContextMenu = __webpack_require__(522);

var _ContextMenu2 = _interopRequireDefault(_ContextMenu);

var _ProfileThreadHeaderContextMenu = __webpack_require__(523);

var _ProfileThreadHeaderContextMenu2 = _interopRequireDefault(_ProfileThreadHeaderContextMenu);

var _FooterLinks = __webpack_require__(136);

var _FooterLinks2 = _interopRequireDefault(_FooterLinks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProfileViewer = function (_PureComponent) {
  (0, _inherits3.default)(ProfileViewer, _PureComponent);

  function ProfileViewer(props) {
    (0, _classCallCheck3.default)(this, ProfileViewer);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileViewer.__proto__ || Object.getPrototypeOf(ProfileViewer)).call(this, props));

    _this._onSelectTab = _this._onSelectTab.bind(_this);
    _this.state = { isMounted: false };
    // If updating this list, make sure and update the tabOrder reducer with another index.
    _this._tabs = [{
      name: 'calltree',
      title: 'Call Tree'
    }, {
      name: 'stack-chart',
      title: 'Stack Chart'
    }, {
      name: 'marker-chart',
      title: 'Marker Chart'
    }, {
      name: 'marker-table',
      title: 'Marker Table'
    }, {
      name: 'summary',
      title: 'Summary'
    }];
    return _this;
  }

  (0, _createClass3.default)(ProfileViewer, [{
    key: '_onSelectTab',
    value: function _onSelectTab(selectedTab) {
      var changeSelectedTab = this.props.changeSelectedTab;

      changeSelectedTab(selectedTab);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({ isMounted: true });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          tabOrder = _props.tabOrder,
          timeRange = _props.timeRange,
          changeTabOrder = _props.changeTabOrder,
          selectedTab = _props.selectedTab;
      var isMounted = this.state.isMounted;


      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(className, isMounted ? className + 'IsMounted' : null)
        },
        _react2.default.createElement(
          'div',
          { className: className + 'TopBar' },
          _react2.default.createElement(_ProfileFilterNavigator2.default, null),
          _react2.default.createElement(_ProfileSharing2.default, null)
        ),
        _react2.default.createElement(_ProfileViewerHeader2.default, null),
        _react2.default.createElement(_TabBar2.default, {
          tabs: this._tabs,
          selectedTabName: selectedTab,
          tabOrder: tabOrder,
          onSelectTab: this._onSelectTab,
          onChangeTabOrder: changeTabOrder
        }),
        {
          summary: _react2.default.createElement(_ProfileSummaryView2.default, null),
          calltree: _react2.default.createElement(_ProfileCallTreeView2.default, null),
          'marker-table': _react2.default.createElement(_markerTable2.default, null),
          tasktracer: _react2.default.createElement(_ProfileTaskTracerView2.default, {
            rangeStart: timeRange.start,
            rangeEnd: timeRange.end
          }),
          'stack-chart': _react2.default.createElement(_stackChart2.default, null),
          'marker-chart': _react2.default.createElement(_markerChart2.default, null)
        }[selectedTab],
        _react2.default.createElement(_SymbolicationStatusOverlay2.default, null),
        _react2.default.createElement(_ProfileCallTreeContextMenu2.default, null),
        _react2.default.createElement(_ContextMenu2.default, null),
        _react2.default.createElement(_ProfileThreadHeaderContextMenu2.default, null),
        _react2.default.createElement(_FooterLinks2.default, null)
      );
    }
  }]);
  return ProfileViewer;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

ProfileViewer.propTypes = {
  className: _react.PropTypes.string.isRequired,
  tabOrder: _react.PropTypes.arrayOf(_react.PropTypes.number).isRequired,
  timeRange: _react.PropTypes.object.isRequired,
  selectedTab: _react.PropTypes.string.isRequired,
  changeSelectedTab: _react.PropTypes.func.isRequired,
  changeTabOrder: _react.PropTypes.func.isRequired
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    tabOrder: (0, _profileView.getProfileViewOptions)(state).tabOrder,
    selectedTab: (0, _urlState.getSelectedTab)(state),
    className: 'profileViewer',
    timeRange: (0, _profileView.getDisplayRange)(state)
  };
}, _actions2.default)(ProfileViewer);

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _Reorderable = __webpack_require__(195);

var _Reorderable2 = _interopRequireDefault(_Reorderable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TabBar = function (_PureComponent) {
  (0, _inherits3.default)(TabBar, _PureComponent);

  function TabBar(props) {
    (0, _classCallCheck3.default)(this, TabBar);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

    _this._mouseDownListener = _this._mouseDownListener.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(TabBar, [{
    key: '_mouseDownListener',
    value: function _mouseDownListener(e) {
      this.props.onSelectTab(e.target.dataset.name);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          tabs = _props.tabs,
          selectedTabName = _props.selectedTabName,
          tabOrder = _props.tabOrder,
          onChangeTabOrder = _props.onChangeTabOrder;

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('tabBarContainer', className) },
        _react2.default.createElement(
          _Reorderable2.default,
          {
            tagName: 'ol',
            className: 'tabBarTabWrapper',
            order: tabOrder,
            orient: 'horizontal',
            onChangeOrder: onChangeTabOrder
          },
          tabs.map(function (_ref, i) {
            var name = _ref.name,
                title = _ref.title;
            return _react2.default.createElement(
              'li',
              {
                className: (0, _classnames2.default)('tabBarTab', 'grippy', {
                  selected: name === selectedTabName
                }),
                key: i,
                'data-name': name,
                onMouseDown: _this2._mouseDownListener
              },
              title
            );
          })
        )
      );
    }
  }]);
  return TabBar;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

TabBar.propTypes = {
  className: _react.PropTypes.string,
  tabs: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    name: _react.PropTypes.string.isRequired,
    title: _react.PropTypes.string.isRequired
  })).isRequired,
  selectedTabName: _react.PropTypes.string.isRequired,
  tabOrder: _react.PropTypes.arrayOf(_react.PropTypes.number).isRequired,
  onSelectTab: _react.PropTypes.func.isRequired,
  onChangeTabOrder: _react.PropTypes.func.isRequired
};

exports.default = TabBar;

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function arrayMove(x, from, to) {
	x.splice((to < 0 ? x.length + to : to), 0, x.splice(from, 1)[0]);
}

module.exports = function (x, from, to) {
	x = x.slice();
	arrayMove(x, from, to);
	return x;
};

module.exports.mut = arrayMove;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var DOMRectPolyfill = function DOMRectPolyfill() {
  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  (0, _classCallCheck3.default)(this, DOMRectPolyfill);

  this.x = x;
  this.y = y;
  this.width = w;
  this.height = h;
  this.left = x;
  this.top = y;
  this.right = x + w;
  this.bottom = y + h;
};

exports.default = window.DOMRect ? window.DOMRect : DOMRectPolyfill;

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(14);

var _summaryView = __webpack_require__(197);

var _SummarizeLineGraph = __webpack_require__(131);

var _SummarizeLineGraph2 = _interopRequireDefault(_SummarizeLineGraph);

var _SummarizeProfileHeader = __webpack_require__(412);

var _SummarizeProfileHeader2 = _interopRequireDefault(_SummarizeProfileHeader);

var _SummarizeProfileExpand = __webpack_require__(413);

var _SummarizeProfileExpand2 = _interopRequireDefault(_SummarizeProfileExpand);

var _SummarizeProfileThread = __webpack_require__(414);

var _SummarizeProfileThread2 = _interopRequireDefault(_SummarizeProfileThread);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(418); /* This Source Code Form is subject to the terms of the Mozilla Public
                                      * License, v. 2.0. If a copy of the MPL was not distributed with this
                                      * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var EXPAND_LENGTH = 5;

var ProfileSummaryView = function (_PureComponent) {
  (0, _inherits3.default)(ProfileSummaryView, _PureComponent);

  function ProfileSummaryView() {
    (0, _classCallCheck3.default)(this, ProfileSummaryView);
    return (0, _possibleConstructorReturn3.default)(this, (ProfileSummaryView.__proto__ || Object.getPrototypeOf(ProfileSummaryView)).apply(this, arguments));
  }

  (0, _createClass3.default)(ProfileSummaryView, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          summaries = _props.summaries,
          expanded = _props.expanded,
          threads = _props.threads,
          collapse = _props.collapseProfileSummaryThread,
          expand = _props.expandProfileSummaryThread;


      if (summaries) {
        return _react2.default.createElement(
          'div',
          { className: 'summarize-profile' },
          _react2.default.createElement(
            'div',
            { className: 'summarize-profile-inner' },
            summaries.map(function (_ref) {
              var threadIndex = _ref.threadIndex,
                  summary = _ref.summary,
                  rollingSummary = _ref.rollingSummary;
              var _threads$threadIndex = threads[threadIndex],
                  processType = _threads$threadIndex.processType,
                  threadName = _threads$threadIndex.name;

              var isExpanded = expanded.has(threadIndex);

              return _react2.default.createElement(
                'div',
                { key: threadIndex },
                _react2.default.createElement(
                  'div',
                  { className: 'summarize-profile-table' },
                  _react2.default.createElement(_SummarizeProfileHeader2.default, {
                    threadName: threadName,
                    processType: processType
                  }),
                  summary.map(function (summaryTable, index) {
                    return _react2.default.createElement(_SummarizeProfileThread2.default, {
                      summaryTable: summaryTable,
                      rollingSummary: rollingSummary,
                      isExpanded: isExpanded,
                      index: index,
                      key: summaryTable.category,
                      expandLength: EXPAND_LENGTH
                    });
                  }),
                  _react2.default.createElement(_SummarizeProfileExpand2.default, {
                    summary: summary,
                    threadIndex: threadIndex,
                    isExpanded: isExpanded,
                    expand: expand,
                    collapse: collapse,
                    expandLength: EXPAND_LENGTH
                  })
                )
              );
            })
          )
        );
      }

      return _react2.default.createElement(
        'div',
        { className: 'summarize-profile' },
        _react2.default.createElement(
          'div',
          { className: 'summarize-profile-inner' },
          threads.map(function (thread, threadIndex) {
            return _react2.default.createElement(
              'div',
              { key: threadIndex },
              _react2.default.createElement(
                'div',
                { className: 'summarize-profile-table' },
                _react2.default.createElement(_SummarizeProfileHeader2.default, {
                  threadName: thread.name,
                  processType: thread.processType
                }),
                fill(3, function (i) {
                  return _react2.default.createElement(
                    'div',
                    { className: 'summarize-profile-row', key: i },
                    _react2.default.createElement(_SummarizeLineGraph2.default, null),
                    _react2.default.createElement(
                      'div',
                      { className: 'summarize-profile-details' },
                      _react2.default.createElement(
                        'div',
                        { className: 'summarize-profile-text' },
                        _react2.default.createElement('div', { className: 'filler summarize-profile-filler' })
                      ),
                      _react2.default.createElement(
                        'div',
                        { className: 'summarize-profile-numeric' },
                        _react2.default.createElement('div', { className: 'filler summarize-profile-filler' })
                      ),
                      _react2.default.createElement(
                        'div',
                        { className: 'summarize-profile-numeric' },
                        _react2.default.createElement('div', { className: 'filler summarize-profile-filler' })
                      )
                    )
                  );
                })
              )
            );
          })
        )
      );
    }
  }]);
  return ProfileSummaryView;
}(_react.PureComponent);

ProfileSummaryView.propTypes = {
  summaries: _react.PropTypes.array,
  expanded: _react.PropTypes.object,
  threads: _react.PropTypes.array,
  collapseProfileSummaryThread: _react.PropTypes.func,
  expandProfileSummaryThread: _react.PropTypes.func
};

function fill(size, fn) {
  var array = Array(size);
  for (var i = 0; i < size; i++) {
    array[i] = fn(i);
  }
  return array;
}

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    expanded: (0, _summaryView.getProfileExpandedSummaries)(state),
    summaries: (0, _summaryView.getProfileSummaries)(state),
    threads: (0, _profileView.getProfile)(state).threads
  };
}, _actions2.default)(ProfileSummaryView);

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LINE_GRAPH_TITLE = 'The line graph represents the number of samples that were in ' + 'a given category over time. In order to present a high-level summary, the samples ' + 'are smoothed with a rolling average.'; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                                                                                                                                                                         * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                                                                                                                                                                         * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var CATEGORY_TITLE = "Each sample's call stack is used to place it in an " + 'appropriate category.';
var SAMPLE_TITLE = 'The profiler samples the call stack at a fixed rate. Each of ' + 'these samples is categorized and then summed over the course of the recording.';
var PERCENT_TIME_TITLE = 'The percentage of time represents the percentage of how ' + 'many samples of a given category were observed over the entire course of the ' + 'recording.';

var SummarizeProfileHeader = function (_PureComponent) {
  (0, _inherits3.default)(SummarizeProfileHeader, _PureComponent);

  function SummarizeProfileHeader() {
    (0, _classCallCheck3.default)(this, SummarizeProfileHeader);
    return (0, _possibleConstructorReturn3.default)(this, (SummarizeProfileHeader.__proto__ || Object.getPrototypeOf(SummarizeProfileHeader)).apply(this, arguments));
  }

  (0, _createClass3.default)(SummarizeProfileHeader, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          threadName = _props.threadName,
          processType = _props.processType;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: 'summarize-profile-thread', colSpan: '3' },
          threadName,
          ' Thread, ',
          processType,
          ' process'
        ),
        _react2.default.createElement(
          'div',
          { className: 'summarize-profile-header' },
          _react2.default.createElement(
            'div',
            { className: 'summarize-line-graph', title: LINE_GRAPH_TITLE },
            'Rolling Average of Samples'
          ),
          _react2.default.createElement(
            'div',
            { className: 'summarize-profile-details' },
            _react2.default.createElement(
              'div',
              { className: 'summarize-profile-text', title: CATEGORY_TITLE },
              'Category'
            ),
            _react2.default.createElement(
              'div',
              { className: 'summarize-profile-numeric', title: SAMPLE_TITLE },
              'Samples'
            ),
            _react2.default.createElement(
              'div',
              {
                className: 'summarize-profile-numeric',
                title: PERCENT_TIME_TITLE
              },
              '% Time'
            )
          )
        )
      );
    }
  }]);
  return SummarizeProfileHeader;
}(_react.PureComponent);

SummarizeProfileHeader.propTypes = {
  threadName: _react.PropTypes.string.isRequired,
  processType: _react.PropTypes.string.isRequired
};

exports.default = SummarizeProfileHeader;

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _SummarizeLineGraph = __webpack_require__(131);

var _SummarizeLineGraph2 = _interopRequireDefault(_SummarizeLineGraph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var SummarizeProfileExpand = function (_PureComponent) {
  (0, _inherits3.default)(SummarizeProfileExpand, _PureComponent);

  function SummarizeProfileExpand() {
    (0, _classCallCheck3.default)(this, SummarizeProfileExpand);
    return (0, _possibleConstructorReturn3.default)(this, (SummarizeProfileExpand.__proto__ || Object.getPrototypeOf(SummarizeProfileExpand)).apply(this, arguments));
  }

  (0, _createClass3.default)(SummarizeProfileExpand, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          summary = _props.summary,
          threadIndex = _props.threadIndex,
          isExpanded = _props.isExpanded,
          expand = _props.expand,
          collapse = _props.collapse,
          expandLength = _props.expandLength;
      // Only show the expand/collapse button when it is warranted.

      if (summary.length > expandLength) {
        return _react2.default.createElement(
          'div',
          { className: 'summarize-profile-row' },
          _react2.default.createElement(_SummarizeLineGraph2.default, { isBlank: true }),
          _react2.default.createElement(
            'div',
            { className: 'summarize-profile-details' },
            isExpanded ? _react2.default.createElement(
              'a',
              {
                className: 'summarize-profile-collapse expanded',
                onClick: function onClick() {
                  return collapse(threadIndex);
                }
              },
              'Collapse'
            ) : _react2.default.createElement(
              'a',
              {
                className: 'summarize-profile-collapse',
                onClick: function onClick() {
                  return expand(threadIndex);
                }
              },
              'Expand remaining categories...'
            )
          )
        );
      }
      return null;
    }
  }]);
  return SummarizeProfileExpand;
}(_react.PureComponent);

SummarizeProfileExpand.propTypes = {
  summary: _react.PropTypes.array,
  threadIndex: _react.PropTypes.number.isRequired,
  isExpanded: _react.PropTypes.bool,
  expand: _react.PropTypes.func,
  collapse: _react.PropTypes.func,
  expandLength: _react.PropTypes.number
};

exports.default = SummarizeProfileExpand;

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _SummarizeLineGraph = __webpack_require__(131);

var _SummarizeLineGraph2 = _interopRequireDefault(_SummarizeLineGraph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var SummarizeProfileThread = function (_PureComponent) {
  (0, _inherits3.default)(SummarizeProfileThread, _PureComponent);

  function SummarizeProfileThread() {
    (0, _classCallCheck3.default)(this, SummarizeProfileThread);
    return (0, _possibleConstructorReturn3.default)(this, (SummarizeProfileThread.__proto__ || Object.getPrototypeOf(SummarizeProfileThread)).apply(this, arguments));
  }

  (0, _createClass3.default)(SummarizeProfileThread, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          summaryTable = _props.summaryTable,
          rollingSummary = _props.rollingSummary,
          isExpanded = _props.isExpanded,
          index = _props.index,
          expandLength = _props.expandLength;

      if (index > expandLength && !isExpanded) {
        return null;
      }
      var category = summaryTable.category,
          samples = summaryTable.samples,
          percentage = summaryTable.percentage;

      return _react2.default.createElement(
        'div',
        { className: 'summarize-profile-row' },
        _react2.default.createElement(_SummarizeLineGraph2.default, {
          rollingSummary: rollingSummary,
          category: category
        }),
        _react2.default.createElement(
          'div',
          { className: 'summarize-profile-details' },
          _react2.default.createElement(
            'div',
            { className: 'summarize-profile-text' },
            category
          ),
          _react2.default.createElement(
            'div',
            { className: 'summarize-profile-numeric' },
            samples
          ),
          _react2.default.createElement(
            'div',
            { className: 'summarize-profile-numeric' },
            displayPercentage(percentage)
          )
        )
      );
    }
  }]);
  return SummarizeProfileThread;
}(_react.PureComponent);

SummarizeProfileThread.propTypes = {
  summaryTable: _react.PropTypes.object,
  rollingSummary: _react.PropTypes.array,
  isExpanded: _react.PropTypes.bool,
  index: _react.PropTypes.number,
  expandLength: _react.PropTypes.number
};

exports.default = SummarizeProfileThread;
/**
 * Format a percentage for display, e.g. 0.1344844543 => "13.45%".
 * @param {number} n - The number.
 * @returns {string} The formatted string.
 */

function displayPercentage(n) {
  var percentage = Math.round(n * 1000);
  var integer = Math.floor(percentage / 10);
  var decimal = Math.floor(percentage - integer * 10);
  return integer + '.' + decimal;
}

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeSelectedTab = changeSelectedTab;
exports.profilePublished = profilePublished;
exports.changeTabOrder = changeTabOrder;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function changeSelectedTab(selectedTab) {
  return {
    type: 'CHANGE_SELECTED_TAB',
    selectedTab: selectedTab
  };
}

function profilePublished(hash) {
  return {
    type: 'PROFILE_PUBLISHED',
    hash: hash
  };
}

function changeTabOrder(tabOrder) {
  return {
    type: 'CHANGE_TAB_ORDER',
    tabOrder: tabOrder
  };
}

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iconHasLoaded = iconHasLoaded;
exports.iconIsInError = iconIsInError;
exports.iconStartLoading = iconStartLoading;
function iconHasLoaded(icon) {
  return {
    type: 'ICON_HAS_LOADED',
    icon: icon
  };
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function iconIsInError(icon) {
  return {
    type: 'ICON_IN_ERROR',
    icon: icon
  };
}

var icons = new Set();

function _getIcon(icon) {
  if (icons.has(icon)) {
    return Promise.resolve('cached');
  }

  icons.add(icon);

  var result = new Promise(function (resolve) {
    var image = new Image();
    image.src = icon;
    image.referrerPolicy = 'no-referrer';
    image.onload = function () {
      resolve('loaded');
    };
    image.onerror = function () {
      resolve('error');
    };
  });

  return result;
}

function iconStartLoading(icon) {
  return function (dispatch) {
    return _getIcon(icon).then(function (result) {
      switch (result) {
        case 'loaded':
          dispatch(iconHasLoaded(icon));
          break;
        case 'error':
          dispatch(iconIsInError(icon));
          break;
        case 'cached':
          // nothing to do
          break;
        default:
          throw new Error('Unknown icon load result ' + result);
      }
    });
  };
}

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeStackChartColorStrategy = changeStackChartColorStrategy;
exports.changeStackChartLabelingStrategy = changeStackChartLabelingStrategy;
exports.setHasZoomedViaMousewheel = setHasZoomedViaMousewheel;
function changeStackChartColorStrategy(getCategory) {
  return {
    type: 'CHANGE_STACK_CHART_COLOR_STRATEGY',
    getCategory: getCategory
  };
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function changeStackChartLabelingStrategy(getLabel) {
  return {
    type: 'CHANGE_STACK_CHART_LABELING_STRATEGY',
    getLabel: getLabel
  };
}

function setHasZoomedViaMousewheel() {
  return { type: 'HAS_ZOOMED_VIA_MOUSEWHEEL' };
}

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(419);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./ProfileSummaryView.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./ProfileSummaryView.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".summarize-profile{flex:1;overflow:auto;position:relative}.summarize-profile *{box-sizing:border-box}.summarize-profile-inner{position:absolute;top:0;left:0;right:0;max-width:80em;margin:0 auto}.summarize-profile-table{display:flex;flex-direction:column;padding:2em;margin:0 1.66%;font-size:1.2em}.summarize-line-graph{min-width:50%;flex:1;margin-inline-end:1em}.summarize-profile-details{width:40em;display:flex;align-items:center}.summarize-profile-line-graph,.summarize-profile-numeric,.summarize-profile-text{text-overflow:ellipsis;overflow:hidden}.summarize-profile-text{flex:1;flex-shrink:1}.summarize-profile-header,.summarize-profile-row{display:flex}.summarize-profile-row:hover{background-color:#fcfcfc}.summarize-profile-row>div{padding:.1em 0}.summarize-profile-header{text-align:left;font-weight:400;border-bottom:1px solid #888;margin-bottom:.5em;padding-bottom:.5em}.summarize-profile-numeric{text-align:right;width:25%}.summarize-profile-row .summarize-profile-numeric{font-family:monospace;color:#444}.summarize-profile-thread{margin-bottom:1em;font-size:1.5em;color:#000}.summarize-line-graph svg{background-color:#f6f6f6}.summarize-profile-filler:after{content:\"\\A0\"}.summarize-profile-filler{width:75%;display:inline-block;background-color:#eee}.summarize-line-graph-filler.filler{background-color:#eee}.summarize-profile-collapse{background:none;border:none;color:#03f;text-decoration:none;cursor:pointer;padding:0;margin-left:auto}.summarize-profile-collapse:hover{text-decoration:underline}.summarize-profile-collapse:before{content:\"\";width:0;height:0;position:relative;display:inline-block;margin:0 .4em;border-left:.5em solid transparent;border-right:.5em solid transparent;border-top:.5em solid #03f;transition:transform .5s}.summarize-profile-collapse.expanded:before{transform:rotate(180deg)}.summarize-profile-button-row{text-align:right}", ""]);

// exports


/***/ }),
/* 420 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _CallTree = __webpack_require__(422);

var _CallTree2 = _interopRequireDefault(_CallTree);

var _ProfileCallTreeSettings = __webpack_require__(431);

var _ProfileCallTreeSettings2 = _interopRequireDefault(_ProfileCallTreeSettings);

var _TransformNavigator = __webpack_require__(438);

var _TransformNavigator2 = _interopRequireDefault(_TransformNavigator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var ProfileCallTreeView = function ProfileCallTreeView() {
  return _react2.default.createElement(
    'div',
    { className: 'treeAndSidebarWrapper' },
    _react2.default.createElement(_ProfileCallTreeSettings2.default, null),
    _react2.default.createElement(_TransformNavigator2.default, null),
    _react2.default.createElement(_CallTree2.default, null)
  );
};

ProfileCallTreeView.propTypes = {};

exports.default = ProfileCallTreeView;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _TreeView = __webpack_require__(199);

var _TreeView2 = _interopRequireDefault(_TreeView);

var _NodeIcon = __webpack_require__(430);

var _NodeIcon2 = _interopRequireDefault(_NodeIcon);

var _profileData = __webpack_require__(19);

var _urlState = __webpack_require__(15);

var _profileView = __webpack_require__(14);

var _icons = __webpack_require__(132);

var _profileView2 = __webpack_require__(23);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallTreeComponent = function (_PureComponent) {
  (0, _inherits3.default)(CallTreeComponent, _PureComponent);

  function CallTreeComponent(props) {
    (0, _classCallCheck3.default)(this, CallTreeComponent);

    var _this = (0, _possibleConstructorReturn3.default)(this, (CallTreeComponent.__proto__ || Object.getPrototypeOf(CallTreeComponent)).call(this, props));

    _this._fixedColumns = [{ propName: 'totalTimePercent', title: '' }, { propName: 'totalTime', title: 'Running Time (ms)' }, { propName: 'selfTime', title: 'Self (ms)' }, { propName: 'icon', title: '', component: _NodeIcon2.default }];
    _this._mainColumn = { propName: 'name', title: '' };
    _this._appendageColumn = { propName: 'lib', title: '' };
    _this._appendageButtons = ['focusCallstackButton'];
    _this._treeView = null;
    _this._onSelectedCallNodeChange = _this._onSelectedCallNodeChange.bind(_this);
    _this._onExpandedCallNodesChange = _this._onExpandedCallNodesChange.bind(_this);
    _this._onAppendageButtonClick = _this._onAppendageButtonClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(CallTreeComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.focus();
      this.procureInterestingInitialSelection();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.scrollToSelectionGeneration > prevProps.scrollToSelectionGeneration) {
        if (this._treeView) {
          this._treeView.scrollSelectionIntoView();
        }
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this._treeView) {
        this._treeView.focus();
      }
    }
  }, {
    key: '_onSelectedCallNodeChange',
    value: function _onSelectedCallNodeChange(newSelectedCallNode) {
      var _props = this.props,
          callNodeInfo = _props.callNodeInfo,
          threadIndex = _props.threadIndex,
          changeSelectedCallNode = _props.changeSelectedCallNode;

      changeSelectedCallNode(threadIndex, (0, _profileData.getCallNodePath)(newSelectedCallNode, callNodeInfo.callNodeTable));
    }
  }, {
    key: '_onExpandedCallNodesChange',
    value: function _onExpandedCallNodesChange(newExpandedCallNodeIndexes) {
      var _props2 = this.props,
          callNodeInfo = _props2.callNodeInfo,
          threadIndex = _props2.threadIndex,
          changeExpandedCallNodes = _props2.changeExpandedCallNodes;

      changeExpandedCallNodes(threadIndex, newExpandedCallNodeIndexes.map(function (callNodeIndex) {
        return (0, _profileData.getCallNodePath)(callNodeIndex, callNodeInfo.callNodeTable);
      }));
    }
  }, {
    key: '_onAppendageButtonClick',
    value: function _onAppendageButtonClick(callNodeIndex) {
      var _props3 = this.props,
          callNodeInfo = _props3.callNodeInfo,
          threadIndex = _props3.threadIndex,
          addTransformToStack = _props3.addTransformToStack,
          implementation = _props3.implementationFilter,
          invertCallstack = _props3.invertCallstack;

      var callNodePath = (0, _profileData.getCallNodePath)(callNodeIndex, callNodeInfo.callNodeTable);
      addTransformToStack(threadIndex, {
        type: 'focus-subtree',
        callNodePath: callNodePath,
        implementation: implementation,
        inverted: invertCallstack
      });
    }
  }, {
    key: 'procureInterestingInitialSelection',
    value: function procureInterestingInitialSelection() {
      // Expand the heaviest callstack up to a certain depth and select the frame
      // at that depth.
      var _props4 = this.props,
          tree = _props4.tree,
          expandedCallNodeIndexes = _props4.expandedCallNodeIndexes;

      var newExpandedCallNodeIndexes = expandedCallNodeIndexes.slice();
      var maxInterestingDepth = 17; // scientifically determined
      var currentCallNodeIndex = tree.getRoots()[0];
      newExpandedCallNodeIndexes.push(currentCallNodeIndex);
      for (var i = 0; i < maxInterestingDepth; i++) {
        var children = tree.getChildren(currentCallNodeIndex);
        if (children.length === 0) {
          break;
        }
        currentCallNodeIndex = children[0];
        newExpandedCallNodeIndexes.push(currentCallNodeIndex);
      }
      this._onExpandedCallNodesChange(newExpandedCallNodeIndexes);
      this._onSelectedCallNodeChange(currentCallNodeIndex);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props5 = this.props,
          tree = _props5.tree,
          selectedCallNodeIndex = _props5.selectedCallNodeIndex,
          expandedCallNodeIndexes = _props5.expandedCallNodeIndexes,
          searchString = _props5.searchString,
          disableOverscan = _props5.disableOverscan;

      return _react2.default.createElement(_TreeView2.default, {
        tree: tree,
        fixedColumns: this._fixedColumns,
        mainColumn: this._mainColumn,
        appendageColumn: this._appendageColumn,
        onSelectionChange: this._onSelectedCallNodeChange,
        onExpandedNodesChange: this._onExpandedCallNodesChange,
        selectedNodeId: selectedCallNodeIndex,
        expandedNodeIds: expandedCallNodeIndexes,
        highlightString: searchString.toLowerCase(),
        disableOverscan: disableOverscan,
        appendageButtons: this._appendageButtons,
        onAppendageButtonClick: this._onAppendageButtonClick,
        ref: function ref(_ref) {
          _this2._treeView = _ref;
        },
        contextMenuId: 'ProfileCallTreeContextMenu',
        icons: this.props.icons
      });
    }
  }]);
  return CallTreeComponent;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    thread: _profileView.selectedThreadSelectors.getFilteredThread(state),
    threadIndex: (0, _urlState.getSelectedThreadIndex)(state),
    scrollToSelectionGeneration: (0, _profileView.getScrollToSelectionGeneration)(state),
    interval: (0, _profileView.getProfile)(state).meta.interval,
    tree: _profileView.selectedThreadSelectors.getCallTree(state),
    callNodeInfo: _profileView.selectedThreadSelectors.getCallNodeInfo(state),
    selectedCallNodeIndex: _profileView.selectedThreadSelectors.getSelectedCallNodeIndex(state),
    expandedCallNodeIndexes: _profileView.selectedThreadSelectors.getExpandedCallNodeIndexes(state),
    searchString: (0, _urlState.getSearchString)(state),
    disableOverscan: (0, _profileView.getProfileViewOptions)(state).selection.isModifying,
    invertCallstack: (0, _urlState.getInvertCallstack)(state),
    implementationFilter: (0, _urlState.getImplementationFilter)(state),
    icons: (0, _icons.getIconsWithClassNames)(state)
  };
}, {
  changeSelectedCallNode: _profileView2.changeSelectedCallNode,
  changeExpandedCallNodes: _profileView2.changeExpandedCallNodes,
  addTransformToStack: _profileView2.addTransformToStack
}, null, { withRef: true })(CallTreeComponent);

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _arrayRange = __webpack_require__(424);

var _arrayRange2 = _interopRequireDefault(_arrayRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VirtualListRow = function (_PureComponent) {
  (0, _inherits3.default)(VirtualListRow, _PureComponent);

  function VirtualListRow() {
    (0, _classCallCheck3.default)(this, VirtualListRow);
    return (0, _possibleConstructorReturn3.default)(this, (VirtualListRow.__proto__ || Object.getPrototypeOf(VirtualListRow)).apply(this, arguments));
  }

  (0, _createClass3.default)(VirtualListRow, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          renderItem = _props.renderItem,
          item = _props.item,
          index = _props.index,
          columnIndex = _props.columnIndex;

      return renderItem(item, index, columnIndex);
    }
  }]);
  return VirtualListRow;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

VirtualListRow.propTypes = {
  renderItem: _react.PropTypes.func.isRequired,
  item: _react.PropTypes.any.isRequired,
  index: _react.PropTypes.number.isRequired,
  columnIndex: _react.PropTypes.number.isRequired,
  isSpecial: _react.PropTypes.bool
};

var VirtualListInnerChunk = function (_PureComponent2) {
  (0, _inherits3.default)(VirtualListInnerChunk, _PureComponent2);

  function VirtualListInnerChunk() {
    (0, _classCallCheck3.default)(this, VirtualListInnerChunk);
    return (0, _possibleConstructorReturn3.default)(this, (VirtualListInnerChunk.__proto__ || Object.getPrototypeOf(VirtualListInnerChunk)).apply(this, arguments));
  }

  (0, _createClass3.default)(VirtualListInnerChunk, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          renderItem = _props2.renderItem,
          items = _props2.items,
          specialItems = _props2.specialItems,
          visibleRangeStart = _props2.visibleRangeStart,
          visibleRangeEnd = _props2.visibleRangeEnd,
          columnIndex = _props2.columnIndex;


      return _react2.default.createElement(
        'div',
        { className: className },
        (0, _arrayRange2.default)(visibleRangeStart, Math.max(visibleRangeStart, visibleRangeEnd)).map(function (i) {
          var item = items[i];
          return _react2.default.createElement(VirtualListRow, {
            key: i,
            index: i,
            columnIndex: columnIndex,
            renderItem: renderItem,
            item: item,
            items: items,
            isSpecial: specialItems.includes(item)
          });
        })
      );
    }
  }]);
  return VirtualListInnerChunk;
}(_react.PureComponent);

VirtualListInnerChunk.propTypes = {
  className: _react.PropTypes.string,
  renderItem: _react.PropTypes.func.isRequired,
  items: _react.PropTypes.array.isRequired,
  specialItems: _react.PropTypes.array.isRequired,
  visibleRangeStart: _react.PropTypes.number.isRequired,
  visibleRangeEnd: _react.PropTypes.number.isRequired,
  columnIndex: _react.PropTypes.number.isRequired
};

var VirtualListInner = function (_PureComponent3) {
  (0, _inherits3.default)(VirtualListInner, _PureComponent3);

  function VirtualListInner(props) {
    (0, _classCallCheck3.default)(this, VirtualListInner);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (VirtualListInner.__proto__ || Object.getPrototypeOf(VirtualListInner)).call(this, props));

    _this3._containerCreated = function (e) {
      _this3._container = e;
    };
    return _this3;
  }

  (0, _createClass3.default)(VirtualListInner, [{
    key: 'getBoundingClientRect',
    value: function getBoundingClientRect() {
      if (this._container) {
        return this._container.getBoundingClientRect();
      }
      return new window.DOMRect();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          itemHeight = _props3.itemHeight,
          className = _props3.className,
          renderItem = _props3.renderItem,
          items = _props3.items,
          specialItems = _props3.specialItems,
          visibleRangeStart = _props3.visibleRangeStart,
          visibleRangeEnd = _props3.visibleRangeEnd,
          columnIndex = _props3.columnIndex;


      var chunkSize = 16;
      var startChunkIndex = Math.floor(visibleRangeStart / chunkSize);
      var endChunkIndex = Math.ceil(visibleRangeEnd / chunkSize);
      var chunks = (0, _arrayRange2.default)(startChunkIndex, Math.max(startChunkIndex, endChunkIndex)).map(function (c) {
        return c * chunkSize;
      });

      return _react2.default.createElement(
        'div',
        {
          className: className,
          ref: this._containerCreated,
          style: {
            height: items.length * itemHeight + 'px',
            width: columnIndex === 1 ? '3000px' : undefined
          }
        },
        _react2.default.createElement('div', {
          className: className + 'TopSpacer',
          key: -1,
          style: { height: Math.max(0, visibleRangeStart) * itemHeight + 'px' }
        }),
        chunks.map(function (chunkStart) {
          return _react2.default.createElement(VirtualListInnerChunk, {
            className: className + 'InnerChunk',
            key: chunkStart,
            visibleRangeStart: Math.max(chunkStart, visibleRangeStart),
            visibleRangeEnd: Math.min(chunkStart + chunkSize, visibleRangeEnd),
            columnIndex: columnIndex,
            renderItem: renderItem,
            items: items,
            specialItems: specialItems
          });
        })
      );
    }
  }]);
  return VirtualListInner;
}(_react.PureComponent);

VirtualListInner.propTypes = {
  itemHeight: _react.PropTypes.number.isRequired,
  className: _react.PropTypes.string,
  renderItem: _react.PropTypes.func.isRequired,
  items: _react.PropTypes.array.isRequired,
  specialItems: _react.PropTypes.array.isRequired,
  visibleRangeStart: _react.PropTypes.number.isRequired,
  visibleRangeEnd: _react.PropTypes.number.isRequired,
  columnIndex: _react.PropTypes.number.isRequired
};

var VirtualList = function (_PureComponent4) {
  (0, _inherits3.default)(VirtualList, _PureComponent4);

  function VirtualList(props) {
    (0, _classCallCheck3.default)(this, VirtualList);

    var _this4 = (0, _possibleConstructorReturn3.default)(this, (VirtualList.__proto__ || Object.getPrototypeOf(VirtualList)).call(this, props));

    _this4._onScroll = _this4._onScroll.bind(_this4);
    _this4._onCopy = _this4._onCopy.bind(_this4);
    _this4._geometry = undefined;
    _this4._containerCreated = function (elem) {
      _this4._container = elem;
    };
    _this4._innerCreated = function (elem) {
      _this4._inner = elem;
    };
    return _this4;
  }

  (0, _createClass3.default)(VirtualList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('copy', this._onCopy, false);
      this._container.addEventListener('scroll', this._onScroll);
      this._onScroll(); // for initial size
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('copy', this._onCopy, false);
      this._container.removeEventListener('scroll', this._onScroll);
    }
  }, {
    key: '_onScroll',
    value: function _onScroll() {
      this._geometry = this._queryGeometry();
      this.forceUpdate();
    }
  }, {
    key: '_onCopy',
    value: function _onCopy(event) {
      if (document.activeElement === this._container) {
        this.props.onCopy(event);
      }
    }
  }, {
    key: '_queryGeometry',
    value: function _queryGeometry() {
      if (!this._container) {
        return undefined;
      }
      var outerRect = this._container.getBoundingClientRect();
      var innerRectY = this._inner.getBoundingClientRect().top;
      return { outerRect: outerRect, innerRectY: innerRectY };
    }
  }, {
    key: 'computeVisibleRange',
    value: function computeVisibleRange() {
      var _props4 = this.props,
          itemHeight = _props4.itemHeight,
          disableOverscan = _props4.disableOverscan;

      if (!this._geometry) {
        return { visibleRangeStart: 0, visibleRangeEnd: 100 };
      }
      var _geometry = this._geometry,
          outerRect = _geometry.outerRect,
          innerRectY = _geometry.innerRectY;

      var overscan = disableOverscan ? 0 : 25;
      var chunkSize = 16;
      var visibleRangeStart = Math.floor((outerRect.top - innerRectY) / itemHeight) - overscan;
      var visibleRangeEnd = Math.ceil((outerRect.bottom - innerRectY) / itemHeight) + overscan;
      if (!disableOverscan) {
        visibleRangeStart = Math.floor(visibleRangeStart / chunkSize) * chunkSize;
        visibleRangeEnd = Math.ceil(visibleRangeEnd / chunkSize) * chunkSize;
      }
      return { visibleRangeStart: visibleRangeStart, visibleRangeEnd: visibleRangeEnd };
    }
  }, {
    key: 'scrollItemIntoView',
    value: function scrollItemIntoView(itemIndex, offsetX) {
      if (!this._container) {
        return;
      }
      var itemTop = itemIndex * this.props.itemHeight;
      var itemBottom = itemTop + this.props.itemHeight;
      var container = this._container;

      if (container.scrollTop > itemTop) {
        container.scrollTop = itemTop;
      } else if (container.scrollTop + container.clientHeight < itemBottom) {
        container.scrollTop = Math.min(itemTop, itemBottom - container.clientHeight);
      }

      var interestingWidth = 400;
      var itemLeft = offsetX;
      var itemRight = itemLeft + interestingWidth;

      if (container.scrollLeft > itemLeft) {
        container.scrollLeft = itemLeft;
      } else if (container.scrollLeft + container.clientWidth < itemRight) {
        container.scrollLeft = Math.min(itemLeft, itemRight - container.clientWidth);
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this._container.focus();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props5 = this.props,
          itemHeight = _props5.itemHeight,
          className = _props5.className,
          renderItem = _props5.renderItem,
          items = _props5.items,
          focusable = _props5.focusable,
          specialItems = _props5.specialItems,
          onKeyDown = _props5.onKeyDown;

      var columnCount = this.props.columnCount || 1;

      var _computeVisibleRange = this.computeVisibleRange(),
          visibleRangeStart = _computeVisibleRange.visibleRangeStart,
          visibleRangeEnd = _computeVisibleRange.visibleRangeEnd;

      return _react2.default.createElement(
        'div',
        {
          className: className,
          ref: this._containerCreated,
          tabIndex: focusable ? 0 : -1,
          onKeyDown: onKeyDown
        },
        _react2.default.createElement(
          'div',
          { className: className + 'InnerWrapper' },
          (0, _arrayRange2.default)(columnCount).map(function (columnIndex) {
            return _react2.default.createElement(VirtualListInner, {
              className: (0, _classnames2.default)(className + 'Inner', className + 'Inner' + columnIndex),
              visibleRangeStart: Math.max(0, visibleRangeStart),
              visibleRangeEnd: Math.min(items.length, visibleRangeEnd),
              itemHeight: itemHeight,
              renderItem: renderItem,
              items: items,
              specialItems: specialItems,
              columnIndex: columnIndex,
              key: columnIndex,
              ref: columnIndex === 0 ? _this5._innerCreated : undefined
            });
          })
        )
      );
    }
  }]);
  return VirtualList;
}(_react.PureComponent);

VirtualList.propTypes = {
  itemHeight: _react.PropTypes.number.isRequired,
  className: _react.PropTypes.string,
  renderItem: _react.PropTypes.func.isRequired,
  items: _react.PropTypes.array.isRequired,
  focusable: _react.PropTypes.bool.isRequired,
  specialItems: _react.PropTypes.array.isRequired,
  onKeyDown: _react.PropTypes.func.isRequired,
  onCopy: _react.PropTypes.func.isRequired,
  disableOverscan: _react.PropTypes.bool,
  columnCount: _react.PropTypes.number
};

exports.default = VirtualList;

/***/ }),
/* 424 */
/***/ (function(module, exports) {


module.exports = function newArray(start, end) {
    var n0 = typeof start === 'number',
        n1 = typeof end === 'number'

    if (n0 && !n1) {
        end = start
        start = 0
    } else if (!n0 && !n1) {
        start = 0
        end = 0
    }

    start = start|0
    end = end|0
    var len = end-start
    if (len<0)
        throw new Error('array length must be positive')
    
    var a = new Array(len)
    for (var i=0, c=start; i<len; i++, c++)
        a[i] = c
    return a
}

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackgroundImageStyleDef = exports.StyleDef = undefined;

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StyleDef = exports.StyleDef = function (_PureComponent) {
  (0, _inherits3.default)(StyleDef, _PureComponent);

  function StyleDef() {
    (0, _classCallCheck3.default)(this, StyleDef);
    return (0, _possibleConstructorReturn3.default)(this, (StyleDef.__proto__ || Object.getPrototypeOf(StyleDef)).apply(this, arguments));
  }

  (0, _createClass3.default)(StyleDef, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._dom = document.createElement('style');
      this._dom.textContent = this.props.content;
      document.head.appendChild(this._dom);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.content !== this.props.content) {
        this._dom.textContent = this.props.content;
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._dom.remove();
      this._dom = null;
    }
  }, {
    key: 'render',
    value: function render() {
      // The <StyleDef> itself should not appear in the DOM.
      return null;
    }
  }]);
  return StyleDef;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// inspired from https://gist.github.com/jviereck/9a71734afcfe848ddbe2 -- simplified
//
// Because JSX isn't nice with CSS content because of the braces, we use a
// component to make this a lot easier.
// This component is extremely simple: especially there is no deduplication like
// the initial code tried to do. We think it's better to include it only when
// needed with some simple logic than having a complex code to detect
// duplication.

StyleDef.propTypes = {
  content: _react.PropTypes.string.isRequired
};

var BackgroundImageStyleDef = exports.BackgroundImageStyleDef = function (_StyleDef) {
  (0, _inherits3.default)(BackgroundImageStyleDef, _StyleDef);

  function BackgroundImageStyleDef() {
    (0, _classCallCheck3.default)(this, BackgroundImageStyleDef);
    return (0, _possibleConstructorReturn3.default)(this, (BackgroundImageStyleDef.__proto__ || Object.getPrototypeOf(BackgroundImageStyleDef)).apply(this, arguments));
  }

  (0, _createClass3.default)(BackgroundImageStyleDef, [{
    key: 'render',
    value: function render() {
      var content = '\n      .' + this.props.className + ' {\n        background-image: url(' + this.props.url + ');\n      }\n    ';
      return _react2.default.createElement(StyleDef, { content: content });
    }
  }]);
  return BackgroundImageStyleDef;
}(StyleDef);

BackgroundImageStyleDef.propTypes = {
  className: _react.PropTypes.string.isRequired,
  url: _react.PropTypes.string.isRequired
};

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(427), __esModule: true };

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(428);
module.exports = __webpack_require__(16).Object.assign;

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(25);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(429)});

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(61)
  , gOPS     = __webpack_require__(113)
  , pIE      = __webpack_require__(78)
  , toObject = __webpack_require__(110)
  , IObject  = __webpack_require__(177)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(51)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _icons = __webpack_require__(132);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var NodeIcon = function (_PureComponent) {
  (0, _inherits3.default)(NodeIcon, _PureComponent);

  function NodeIcon(props) {
    (0, _classCallCheck3.default)(this, NodeIcon);

    var _this = (0, _possibleConstructorReturn3.default)(this, (NodeIcon.__proto__ || Object.getPrototypeOf(NodeIcon)).call(this, props));

    if (props.icon) {
      props.iconStartLoading(props.icon);
    }
    return _this;
  }

  (0, _createClass3.default)(NodeIcon, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.icon) {
        nextProps.iconStartLoading(nextProps.icon);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { className: 'treeRowIcon ' + (this.props.className || '') });
    }
  }]);
  return NodeIcon;
}(_react.PureComponent);

NodeIcon.propTypes = {
  className: _react.PropTypes.string,
  icon: _react.PropTypes.string,
  iconStartLoading: _react.PropTypes.func.isRequired
};

exports.default = (0, _reactRedux.connect)(function (state, _ref) {
  var node = _ref.node;
  return {
    className: (0, _icons.getIconClassNameForNode)(state, node),
    icon: node.icon
  };
}, _actions2.default)(NodeIcon);

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(23);

var _urlState = __webpack_require__(15);

var _IdleSearchField = __webpack_require__(133);

var _IdleSearchField2 = _interopRequireDefault(_IdleSearchField);

var _profileData = __webpack_require__(19);

__webpack_require__(436);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProfileCallTreeSettings = function (_PureComponent) {
  (0, _inherits3.default)(ProfileCallTreeSettings, _PureComponent);

  function ProfileCallTreeSettings(props) {
    (0, _classCallCheck3.default)(this, ProfileCallTreeSettings);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileCallTreeSettings.__proto__ || Object.getPrototypeOf(ProfileCallTreeSettings)).call(this, props));

    _this._onImplementationFilterChange = _this._onImplementationFilterChange.bind(_this);
    _this._onInvertCallstackClick = _this._onInvertCallstackClick.bind(_this);
    _this._onSearchFieldIdleAfterChange = _this._onSearchFieldIdleAfterChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ProfileCallTreeSettings, [{
    key: '_onImplementationFilterChange',
    value: function _onImplementationFilterChange(e) {
      this.props.changeImplementationFilter(
      // This function is here to satisfy Flow that we are getting a valid
      // implementation filter.
      (0, _profileData.toValidImplementationFilter)(e.target.value));
    }
  }, {
    key: '_onInvertCallstackClick',
    value: function _onInvertCallstackClick(e) {
      this.props.changeInvertCallstack(e.target.checked);
    }
  }, {
    key: '_onSearchFieldIdleAfterChange',
    value: function _onSearchFieldIdleAfterChange(value) {
      this.props.changeCallTreeSearchString(value);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          implementationFilter = _props.implementationFilter,
          invertCallstack = _props.invertCallstack,
          searchString = _props.searchString;

      return _react2.default.createElement(
        'div',
        { className: 'profileCallTreeSettings' },
        _react2.default.createElement(
          'ul',
          { className: 'profileCallTreeSettingsList' },
          _react2.default.createElement(
            'li',
            { className: 'profileCallTreeSettingsListItem' },
            _react2.default.createElement(
              'label',
              { className: 'profileCallTreeSettingsLabel' },
              'Filter:',
              _react2.default.createElement(
                'select',
                {
                  className: 'profileCallTreeSettingsSelect',
                  onChange: this._onImplementationFilterChange,
                  value: implementationFilter
                },
                _react2.default.createElement(
                  'option',
                  { value: 'combined' },
                  'Combined stacks'
                ),
                _react2.default.createElement(
                  'option',
                  { value: 'js' },
                  'JS only'
                ),
                _react2.default.createElement(
                  'option',
                  { value: 'cpp' },
                  'C++ only'
                )
              )
            )
          ),
          _react2.default.createElement(
            'li',
            { className: 'profileCallTreeSettingsListItem' },
            _react2.default.createElement(
              'label',
              { className: 'profileCallTreeSettingsLabel' },
              _react2.default.createElement('input', {
                type: 'checkbox',
                className: 'profileCallTreeSettingsCheckbox',
                onChange: this._onInvertCallstackClick,
                checked: invertCallstack
              }),
              ' Invert call stack'
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'profileCallTreeSettingsSearchbar' },
          _react2.default.createElement(
            'label',
            { className: 'profileCallTreeSettingsSearchbarLabel' },
            'Filter stacks: ',
            _react2.default.createElement(_IdleSearchField2.default, {
              className: 'profileCallTreeSettingsSearchField',
              title: 'Only display stacks which contain a function whose name matches this substring',
              idlePeriod: 200,
              defaultValue: searchString,
              onIdleAfterChange: this._onSearchFieldIdleAfterChange
            })
          )
        )
      );
    }
  }]);
  return ProfileCallTreeSettings;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    invertCallstack: (0, _urlState.getInvertCallstack)(state),
    implementationFilter: (0, _urlState.getImplementationFilter)(state),
    searchString: (0, _urlState.getSearchString)(state)
  };
}, {
  changeImplementationFilter: _profileView.changeImplementationFilter,
  changeInvertCallstack: _profileView.changeInvertCallstack,
  changeCallTreeSearchString: _profileView.changeCallTreeSearchString
})(ProfileCallTreeSettings);

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(433);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./IdleSearchField.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./IdleSearchField.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".idleSearchField{display:inline-flex;flex-flow:row nowrap;align-items:center}.idleSearchFieldInput{flex:1;height:19px;position:relative;-moz-appearance:none;border:.5px solid #aaa;margin:0;padding:0 2px 0 17px;border-radius:2px;box-shadow:inset 0 0 .5px rgba(0,0,0,.15),0 0 .5px rgba(0,0,0,.1);background:url(" + __webpack_require__(434) + ") 3px no-repeat #fff;background-size:11px 11px}@media(-moz-mac-yosemite-theme){.idleSearchFieldInput:focus{box-shadow:0 0 0 3px -moz-mac-focusring,inset 0 0 .5px rgba(0,0,0,.15),0 0 .5px rgba(0,0,0,.1)}}.idleSearchFieldButton{width:11px;height:11px;overflow:hidden;background:url(" + __webpack_require__(435) + ") 0 0 no-repeat;background-size:contain;border:0;padding:0;vertical-align:middle;color:transparent;position:relative;margin-left:-16px;-moz-user-focus:ignore}.idleSearchFieldInput:invalid+.idleSearchFieldButton{visibility:hidden}", ""]);

// exports


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "2be661507b98ad274b933e2b068b575e.svg";

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e12705ff0e5fd58447cd825c96fe09d4.svg";

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(437);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./ProfileCallTreeSettings.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./ProfileCallTreeSettings.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".profileCallTreeSettings{height:25px;padding:0;line-height:25px;display:flex;flex-flow:row nowrap;color:var(--ink-70)}.profileCallTreeSettingsList{display:block;flex:1;list-style:none;margin:0;padding:0;display:flex;align-items:flex-start}.profileCallTreeSettingsListItem{margin:0 5px;padding:0}.profileCallTreeSettingsLabel{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:inline-flex;flex-flow:row nowrap;align-items:center;height:25px}.profileCallTreeSettingsSelect{margin:0 5px;font-size:11px}.profileCallTreeSettingsCheckbox{margin:0 5px}.profileCallTreeSettingsSearchbar{padding:0 10px}.profileCallTreeSettingsSearchField{width:250px}", ""]);

// exports


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _FilterNavigatorBar = __webpack_require__(201);

var _FilterNavigatorBar2 = _interopRequireDefault(_FilterNavigatorBar);

var _profileView2 = __webpack_require__(23);

__webpack_require__(450);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = (0, _reactRedux.connect)(function (state) {
  var items = _profileView.selectedThreadSelectors.getTransformLabels(state);
  return {
    className: 'calltreeTransformNavigator',
    items: items,
    selectedItem: items.length - 1,
    threadIndex: (0, _urlState.getSelectedThreadIndex)(state)
  };
}, { popTransformsFromStack: _profileView2.popTransformsFromStack }, function (stateProps, dispatchProps) {
  return {
    className: stateProps.className,
    items: stateProps.items,
    selectedItem: stateProps.selectedItem,
    onPop: function onPop(i) {
      return dispatchProps.popTransformsFromStack(stateProps.threadIndex, i);
    }
  };
})(_FilterNavigatorBar2.default);

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = __webpack_require__(81);

var PropTypes = _interopRequireWildcard(_propTypes);

var _addClass = __webpack_require__(442);

var _addClass2 = _interopRequireDefault(_addClass);

var _removeClass = __webpack_require__(444);

var _removeClass2 = _interopRequireDefault(_removeClass);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _Transition = __webpack_require__(207);

var _Transition2 = _interopRequireDefault(_Transition);

var _PropTypes = __webpack_require__(208);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var addClass = function addClass(node, classes) {
  return classes && classes.split(' ').forEach(function (c) {
    return (0, _addClass2.default)(node, c);
  });
};
var removeClass = function removeClass(node, classes) {
  return classes && classes.split(' ').forEach(function (c) {
    return (0, _removeClass2.default)(node, c);
  });
};

var propTypes = _extends({}, _Transition2.default.propTypes, {

  /**
   * The animation classNames applied to the component as it enters or exits.
   * A single name can be provided and it will be suffixed for each stage: e.g.
   *
   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
   * `fade-exit`, `fade-exit-active`, `fade-appear`, and `fade-appear-active`.
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   * }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  exit?: string,
   *  exitActive?: string,
   * }}
   */
  classNames: _PropTypes.classNamesShape,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** from the DOM node.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExit: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * @type Function(node: HtmlElement
   */
  onExiting: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** from the DOM node.
   *
   * @type Function(node: HtmlElement)
   */
  onExited: PropTypes.func
});

/**
 * A `Transition` component using CSS transitions and animations.
 * It's inspired by the excellent [ng-animate](http://www.nganimate.org/) library.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` stages of the transition. The first class is applied and then a
 * second "active" class in order to activate the css animation.
 *
 * When the `in` prop is toggled to `true` the Component will get
 * the `example-enter` CSS class and the `example-enter-active` CSS class
 * added in the next tick. This is a convention based on the `classNames` prop.
 *
 * ```js
 * import CSSTransition from 'react-transition-group/CSSTransition';
 *
 * const Fade = ({ children, ...props }) => (
 *  <CSSTransition
 *    {...props}
 *    timeout={500}
 *    classNames="fade"
 *  >
 *   {children}
 *  </CSSTransition>
 * );
 *
 * class FadeInAndOut extends React.Component {
 *   constructor(...args) {
 *     super(...args);
 *     this.state= { show: false }
 *
 *     setInterval(() => {
 *       this.setState({ show: !this.state.show })
 *     }, 5000)
 *   }
 *   render() {
 *     return (
 *       <Fade in={this.state.show}>
 *         <div>Hello world</div>
 *       </Fade>
 *     )
 *   }
 * }
 * ```
 *
 * And the coorresponding CSS for the `<Fade>` component:
 *
 * ```css
 * .fade-enter {
 *   opacity: 0.01;
 * }
 *
 * .fade-enter.fade-enter-active {
 *   opacity: 1;
 *   transition: opacity 500ms ease-in;
 * }
 *
 * .fade-exit {
 *   opacity: 1;
 * }
 *
 * .fade-exit.fade-exit-active {
 *   opacity: 0.01;
 *   transition: opacity 300ms ease-in;
 * }
 * ```
 */

var CSSTransition = function (_React$Component) {
  _inherits(CSSTransition, _React$Component);

  function CSSTransition() {
    var _temp, _this, _ret;

    _classCallCheck(this, CSSTransition);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onEnter = function (node, appearing) {
      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
          className = _this$getClassNames.className;

      _this.removeClasses(node, 'exit');
      addClass(node, className);

      if (_this.props.onEnter) {
        _this.props.onEnter(node);
      }
    }, _this.onEntering = function (node, appearing) {
      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
          activeClassName = _this$getClassNames2.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onEntering) {
        _this.props.onEntering(node);
      }
    }, _this.onEntered = function (node, appearing) {
      _this.removeClasses(node, appearing ? 'appear' : 'enter');

      if (_this.props.onEntered) {
        _this.props.onEntered(node);
      }
    }, _this.onExit = function (node) {
      var _this$getClassNames3 = _this.getClassNames('exit'),
          className = _this$getClassNames3.className;

      _this.removeClasses(node, 'appear');
      _this.removeClasses(node, 'enter');
      addClass(node, className);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    }, _this.onExiting = function (node) {
      var _this$getClassNames4 = _this.getClassNames('exit'),
          activeClassName = _this$getClassNames4.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    }, _this.onExited = function (node) {
      _this.removeClasses(node, 'exit');

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    }, _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;


      var className = typeof classNames !== 'string' ? classNames[type] : classNames + '-' + type;

      var activeClassName = typeof classNames !== 'string' ? classNames[type + 'Active'] : className + '-active';

      return { className: className, activeClassName: activeClassName };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  CSSTransition.prototype.removeClasses = function removeClasses(node, type) {
    var _getClassNames = this.getClassNames(type),
        className = _getClassNames.className,
        activeClassName = _getClassNames.activeClassName;

    className && removeClass(node, className);
    activeClassName && removeClass(node, activeClassName);
  };

  CSSTransition.prototype.reflowAndAddClass = function reflowAndAddClass(node, className) {
    // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.
    /* eslint-disable no-unused-expressions */
    node.scrollTop;
    /* eslint-enable no-unused-expressions */
    addClass(node, className);
  };

  CSSTransition.prototype.render = function render() {
    var props = _extends({}, this.props);

    delete props.classNames;

    return _react2.default.createElement(_Transition2.default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(_react2.default.Component);

CSSTransition.propTypes =  true ? propTypes : {};

exports.default = CSSTransition;
module.exports = exports['default'];

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var emptyFunction = __webpack_require__(203);
var invariant = __webpack_require__(204);
var warning = __webpack_require__(205);
var assign = __webpack_require__(8);

var ReactPropTypesSecret = __webpack_require__(206);
var checkPropTypes = __webpack_require__(441);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
       true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  var invariant = __webpack_require__(204);
  var warning = __webpack_require__(205);
  var ReactPropTypesSecret = __webpack_require__(206);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addClass;

var _hasClass = __webpack_require__(443);

var _hasClass2 = _interopRequireDefault(_hasClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass2.default)(element)) element.className = element.className + ' ' + className;
}
module.exports = exports['default'];

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hasClass;
function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + element.className + " ").indexOf(" " + className + " ") !== -1;
}
module.exports = exports["default"];

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
};

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = __webpack_require__(81);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _ChildMapping = __webpack_require__(446);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var propTypes = {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   */
  component: _propTypes2.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   */
  children: _propTypes2.default.node,

  /**
   * A convenience prop that enables or disabled appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: _propTypes2.default.bool,
  /**
   * A convenience prop that enables or disabled enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: _propTypes2.default.bool,
  /**
    * A convenience prop that enables or disabled exit animations
    * for all children. Note that specifying this will override any defaults set
    * on individual children Transitions.
    */
  exit: _propTypes2.default.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: _propTypes2.default.func
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
};

/**
 * The `<TransitionGroup>` component manages a set of `<Transition>` components
 * in a list. Like with the `<Transition>` component, `<TransitionGroup>`, is a
 * state machine for managing the mounting and unmounting of components over
 * time.
 *
 * Consider the example below using the `Fade` CSS transition from before.
 * As items are removed or added to the TodoList the `in` prop is toggled
 * automatically by the `<TransitionGroup>`. You can use _any_ `<Transition>`
 * component in a `<TransitionGroup>`, not just css.
 *
 * ```jsx
 * import TransitionGroup from 'react-transition-group/TransitionGroup';
 *
 * class TodoList extends React.Component {
 *   constructor(props) {
 *     super(props)
 *     this.state = {items: ['hello', 'world', 'click', 'me']}
 *   }
 *   handleAdd() {
 *     const newItems = this.state.items.concat([
 *       prompt('Enter some text')
 *     ]);
 *     this.setState({ items: newItems });
 *   }
 *   handleRemove(i) {
 *     let newItems = this.state.items.slice();
 *     newItems.splice(i, 1);
 *     this.setState({items: newItems});
 *   }
 *   render() {
 *     return (
 *       <div>
 *         <button onClick={() => this.handleAdd()}>Add Item</button>
 *         <TransitionGroup>
 *           {this.state.items.map((item, i) => (
 *             <FadeTransition key={item}>
 *               <div>
 *                 {item}{' '}
 *                 <button onClick={() => this.handleRemove(i)}>
 *                   remove
 *                 </button>
 *               </div>
 *             </FadeTransition>
 *           ))}
 *         </TransitionGroup>
 *       </div>
 *     );
 *   }
 * }
 * ```
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual `<Transition>`
 * components. This means you can mix and match animations across different
 * list items.
 */

var TransitionGroup = function (_React$Component) {
  _inherits(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    _classCallCheck(this, TransitionGroup);

    // Initial children should all be entering, dependent on appear
    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

    _this.handleExited = function (key, node, originalHandler) {
      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

      if (key in currentChildMapping) return;

      if (originalHandler) originalHandler(node);

      _this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[key];
        return { children: children };
      });
    };

    _this.state = {
      children: (0, _ChildMapping.getChildMapping)(props.children, function (child) {
        var onExited = function onExited(node) {
          _this.handleExited(child.key, node, child.props.onExited);
        };

        return (0, _react.cloneElement)(child, {
          onExited: onExited,
          in: true,
          appear: _this.getProp(child, 'appear'),
          enter: _this.getProp(child, 'enter'),
          exit: _this.getProp(child, 'exit')
        });
      })
    };
    return _this;
  }

  TransitionGroup.prototype.getChildContext = function getChildContext() {
    return {
      transitionGroup: { isMounting: !this.appeared }
    };
  };
  // use child config unless explictly set by the Group


  TransitionGroup.prototype.getProp = function getProp(child, prop) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props;

    return props[prop] != null ? props[prop] : child.props[prop];
  };

  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };

  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var prevChildMapping = this.state.children;
    var nextChildMapping = (0, _ChildMapping.getChildMapping)(nextProps.children);

    var children = (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping);

    Object.keys(children).forEach(function (key) {
      var child = children[key];

      if (!(0, _react.isValidElement)(child)) return;

      var onExited = function onExited(node) {
        _this2.handleExited(child.key, node, child.props.onExited);
      };

      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;

      var prevChild = prevChildMapping[key];
      var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in;

      // item is new (entering)
      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = (0, _react.cloneElement)(child, {
          onExited: onExited,
          in: true,
          exit: _this2.getProp(child, 'exit', nextProps),
          enter: _this2.getProp(child, 'enter', nextProps)
        });
      }
      // item is old (exiting)
      else if (!hasNext && hasPrev && !isLeaving) {
          // console.log('leaving', key)
          children[key] = (0, _react.cloneElement)(child, { in: false });
        }
        // item hasn't changed transition states
        // copy over the last transition props;
        else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
            // console.log('unchanged', key)
            children[key] = (0, _react.cloneElement)(child, {
              onExited: onExited,
              in: prevChild.props.in,
              exit: _this2.getProp(child, 'exit', nextProps),
              enter: _this2.getProp(child, 'enter', nextProps)
            });
          }
    });

    this.setState({ children: children });
  };

  TransitionGroup.prototype.render = function render() {
    var _props = this.props,
        Component = _props.component,
        childFactory = _props.childFactory,
        props = _objectWithoutProperties(_props, ['component', 'childFactory']);

    var children = this.state.children;


    delete props.appear;
    delete props.enter;
    delete props.exit;

    return _react2.default.createElement(
      Component,
      props,
      values(children).map(childFactory)
    );
  };

  return TransitionGroup;
}(_react2.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes2.default.object.isRequired
};


TransitionGroup.propTypes =  true ? propTypes : {};
TransitionGroup.defaultProps = defaultProps;

exports.default = TransitionGroup;
module.exports = exports['default'];

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;

var _react = __webpack_require__(0);

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }

  // For each key of `next`, the list of keys to insert before that key in
  // the combined list
  var nextKeysPending = Object.create(null);

  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i = void 0;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }

  // Finally, add the keys which didn't appear before any key in `next`
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(448);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./FilterNavigatorBar.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./FilterNavigatorBar.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".filterNavigatorBar{--internal-selected-color:var(--selected-color,var(--blue-60));margin:0;padding:0;flex-shrink:0;-moz-user-select:none;cursor:default;overflow:hidden}.filterNavigatorBar,.filterNavigatorBarItem{height:24px;display:flex;flex-flow:row nowrap}.filterNavigatorBarItem{min-width:0;position:relative;line-height:24px;border:solid transparent;border-width:0 8px 0 6px;border-right-color:transparent!important;padding:0 6px 0 8px;background-clip:padding-box;max-width:20%}.filterNavigatorBarRootItem{margin-left:-8px;flex-shrink:0}.filterNavigatorBarItemContent{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.filterNavigatorBarLeafItem{padding-right:8px;margin-right:-8px}.filterNavigatorBarItem:after,.filterNavigatorBarItem:before{content:\"\";display:block;position:absolute;top:0;bottom:0;width:0;border:12px solid transparent;border-right-width:2px;pointer-events:none}.filterNavigatorBarItem:before{left:-14px;border-left-color:transparent!important}.filterNavigatorBarItem:after{right:-14px;border-top-color:transparent!important;border-right-color:transparent!important;border-bottom-color:transparent!important}.filterNavigatorBarItem:not(.filterNavigatorBarLeafItem):after{background-image:url(" + __webpack_require__(449) + ");background-repeat:no-repeat;background-position:-18px -12px;background-size:24px 24px}.filterNavigatorBarSelectedItem{color:var(--internal-selected-color)}.filterNavigatorBarItem:not(.filterNavigatorBarLeafItem):hover{background-color:rgba(0,0,0,.1)}.filterNavigatorBarItem.filterNavigatorBarRootItem:hover,.filterNavigatorBarItem:not(.filterNavigatorBarLeafItem):hover:after,.filterNavigatorBarItem:not(.filterNavigatorBarRootItem):not(.filterNavigatorBarLeafItem):hover:before{border-color:rgba(0,0,0,.1)}.filterNavigatorBarItem:not(.filterNavigatorBarLeafItem):active:hover{background-color:rgba(0,0,0,.2)}.filterNavigatorBarItem.filterNavigatorBarRootItem:active:hover,.filterNavigatorBarItem:not(.filterNavigatorBarLeafItem):active:hover:after,.filterNavigatorBarItem:not(.filterNavigatorBarRootItem):not(.filterNavigatorBarLeafItem):active:hover:before{border-color:rgba(0,0,0,.2)}.filterNavigatorBarTransition-enter{opacity:.1;transform:translateX(-100%);z-index:0}.filterNavigatorBarTransition-enter.filterNavigatorBarTransition-enter-active{opacity:1;transform:translateX(0);transition:opacity .3s ease-out,transform .3s ease-out}.filterNavigatorBarTransition-exit{opacity:1;transform:translateX(0)}.filterNavigatorBarTransition-exit.filterNavigatorBarTransition-exit-active{opacity:.01;transform:translateX(100%);transition:opacity .3s,transform .3s}", ""]);

// exports


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "39892ceaa6d9febd504ec0a7b2aaca33.svg";

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(451);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./TransformNavigator.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./TransformNavigator.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".calltreeTransformNavigator{border-top:1px solid var(--grey-30);background:var(--grey-10);color:var(--ink-70)}", ""]);

// exports


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _TreeView = __webpack_require__(199);

var _TreeView2 = _interopRequireDefault(_TreeView);

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _formatNumbers = __webpack_require__(134);

var _Settings = __webpack_require__(453);

var _Settings2 = _interopRequireDefault(_Settings);

__webpack_require__(456);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MarkerTree = function () {
  function MarkerTree(thread, markers, zeroAt) {
    (0, _classCallCheck3.default)(this, MarkerTree);

    this._markers = markers;
    this._thread = thread;
    this._zeroAt = zeroAt;
    this._nodes = new Map();
  }

  (0, _createClass3.default)(MarkerTree, [{
    key: 'getRoots',
    value: function getRoots() {
      var markerIndices = [];
      for (var i = 0; i < this._markers.length; i++) {
        markerIndices.push(i);
      }
      return markerIndices;
    }
  }, {
    key: 'getChildren',
    value: function getChildren(markerIndex) {
      return markerIndex === -1 ? this.getRoots() : [];
    }
  }, {
    key: 'hasChildren',
    value: function hasChildren(markerIndex) {
      return this._markers.data[markerIndex] !== null && 'stack' in this._markers.data[markerIndex];
    }
  }, {
    key: 'getParent',
    value: function getParent() {
      return null;
    }
  }, {
    key: 'getDepth',
    value: function getDepth() {
      return 0;
    }
  }, {
    key: 'hasSameNodeIds',
    value: function hasSameNodeIds(tree) {
      return this._markers === tree._markers;
    }

    /**
     * Return an object with information about the node with index markerIndex.
     * @param  {[type]} markerIndex [description]
     * @return {[type]}             [description]
     */

  }, {
    key: 'getNode',
    value: function getNode(markerIndex) {
      var node = this._nodes.get(markerIndex);
      if (node === undefined) {
        var markers = this._markers;
        var stringTable = this._thread.stringTable;

        var category = 'unknown';
        var name = stringTable.getString(markers.name[markerIndex]);
        if (markers.data[markerIndex]) {
          var data = markers.data[markerIndex];

          if ('category' in data) {
            category = data.category;
          }

          switch (data.type) {
            case 'tracing':
              if (category === 'log') {
                // name is actually the whole message that was sent to fprintf_stderr. Would you consider that.
                if (name.length > 100) {
                  name = name.substring(0, 100) + '...';
                }
              } else {
                name = '[' + data.interval + '] ' + name;
              }
              break;

            case 'UserTiming':
              name = name + ' [' + data.name + ']';
              break;

            case 'DOMEvent':
              {
                category = 'DOMEvent';
                var duration = data.endTime - data.startTime;
                name = '[' + (0, _formatNumbers.formatNumber)(duration) + 'ms] ' + data.eventType;
                break;
              }

            default:
          }
        }

        node = {
          timestamp: ((markers.time[markerIndex] - this._zeroAt) / 1000).toFixed(3) + 's',
          name: name,
          category: category
        };
        this._nodes.set(markerIndex, node);
      }
      return node;
    }
  }]);
  return MarkerTree;
}(); /* This Source Code Form is subject to the terms of the Mozilla Public
      * License, v. 2.0. If a copy of the MPL was not distributed with this
      * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var MarkerTable = function (_PureComponent) {
  (0, _inherits3.default)(MarkerTable, _PureComponent);

  function MarkerTable(props) {
    (0, _classCallCheck3.default)(this, MarkerTable);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MarkerTable.__proto__ || Object.getPrototypeOf(MarkerTable)).call(this, props));

    _this._fixedColumns = [{ propName: 'timestamp', title: 'Time Stamp' }, { propName: 'category', title: 'Category' }];
    _this._mainColumn = { propName: 'name', title: '' };
    _this._expandedNodeIds = [];
    _this._onExpandedNodeIdsChange = function () {};
    _this._onSelectionChange = _this._onSelectionChange.bind(_this);
    _this._treeView = null;
    return _this;
  }

  (0, _createClass3.default)(MarkerTable, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.focus();
    }
  }, {
    key: 'focus',
    value: function focus() {
      this._treeView.focus();
    }
  }, {
    key: '_onSelectionChange',
    value: function _onSelectionChange(selectedMarker) {
      var _props = this.props,
          threadIndex = _props.threadIndex,
          changeSelectedMarker = _props.changeSelectedMarker;

      changeSelectedMarker(threadIndex, selectedMarker);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          thread = _props2.thread,
          markers = _props2.markers,
          zeroAt = _props2.zeroAt,
          selectedMarker = _props2.selectedMarker;

      var tree = new MarkerTree(thread, markers, zeroAt);
      return _react2.default.createElement(
        'div',
        { className: 'markerTable' },
        _react2.default.createElement(_Settings2.default, null),
        _react2.default.createElement(_TreeView2.default, {
          tree: tree,
          fixedColumns: this._fixedColumns,
          mainColumn: this._mainColumn,
          onSelectionChange: this._onSelectionChange,
          onExpandedNodesChange: this._onExpandedNodeIdsChange,
          selectedNodeId: selectedMarker,
          expandedNodeIds: this._expandedNodeIds,
          ref: function ref(_ref) {
            return _this2._treeView = _ref;
          },
          contextMenuId: 'MarkersContextMenu'
        })
      );
    }
  }]);
  return MarkerTable;
}(_react.PureComponent);

MarkerTable.propTypes = {
  thread: _react.PropTypes.object.isRequired,
  markers: _react.PropTypes.object.isRequired,
  threadIndex: _react.PropTypes.number.isRequired,
  selectedMarker: _react.PropTypes.number.isRequired,
  zeroAt: _react.PropTypes.number.isRequired,
  changeSelectedMarker: _react.PropTypes.func.isRequired
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    threadIndex: (0, _urlState.getSelectedThreadIndex)(state),
    thread: _profileView.selectedThreadSelectors.getRangeSelectionFilteredThread(state),
    markers: _profileView.selectedThreadSelectors.getSearchFilteredMarkers(state),
    selectedMarker: _profileView.selectedThreadSelectors.getViewOptions(state).selectedMarker,
    zeroAt: (0, _profileView.getZeroAt)(state)
  };
}, _actions2.default)(MarkerTable);

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(23);

var _urlState = __webpack_require__(15);

var _IdleSearchField = __webpack_require__(133);

var _IdleSearchField2 = _interopRequireDefault(_IdleSearchField);

__webpack_require__(454);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var Settings = function (_PureComponent) {
  (0, _inherits3.default)(Settings, _PureComponent);

  function Settings(props) {
    (0, _classCallCheck3.default)(this, Settings);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Settings.__proto__ || Object.getPrototypeOf(Settings)).call(this, props));

    _this._onSearchFieldIdleAfterChange = _this._onSearchFieldIdleAfterChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Settings, [{
    key: '_onSearchFieldIdleAfterChange',
    value: function _onSearchFieldIdleAfterChange(value) {
      this.props.changeMarkersSearchString(value);
    }
  }, {
    key: 'render',
    value: function render() {
      var searchString = this.props.searchString;

      return _react2.default.createElement(
        'div',
        { className: 'markerTableSettings' },
        _react2.default.createElement('div', { className: 'markerTableSettingsSpacer' }),
        _react2.default.createElement(
          'div',
          { className: 'markerTableSettingsSearchbar' },
          _react2.default.createElement(
            'label',
            { className: 'markerTableSettingsSearchbarLabel' },
            'Filter Markers: ',
            _react2.default.createElement(_IdleSearchField2.default, {
              className: 'markerTableSettingsSearchField',
              title: 'Only display markers that match a certain name',
              idlePeriod: 200,
              defaultValue: searchString,
              onIdleAfterChange: this._onSearchFieldIdleAfterChange
            })
          )
        )
      );
    }
  }]);
  return Settings;
}(_react.PureComponent);

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    searchString: (0, _urlState.getMarkersSearchString)(state)
  };
}, { changeMarkersSearchString: _profileView.changeMarkersSearchString })(Settings);

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(455);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./Settings.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./Settings.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".markerTableSettings{height:25px;padding:0;line-height:25px;display:flex;flex-flow:row nowrap}.markerTableSettingsSpacer{flex:1}.markerTableSettingsLabel{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:inline-flex;flex-flow:row nowrap;align-items:center;height:25px}.markerTableSettingsSearchbar{padding:0 10px}.markerTableSettingsSearchField{width:250px}", ""]);

// exports


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(457);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./index.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./index.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".markerTable{display:flex;flex-flow:column nowrap;flex:1;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}", ""]);

// exports


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _profileView = __webpack_require__(14);

var _WithSize = __webpack_require__(135);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ThreadTaskTracerTracksImpl = function (_PureComponent) {
  (0, _inherits3.default)(ThreadTaskTracerTracksImpl, _PureComponent);

  function ThreadTaskTracerTracksImpl() {
    (0, _classCallCheck3.default)(this, ThreadTaskTracerTracksImpl);
    return (0, _possibleConstructorReturn3.default)(this, (ThreadTaskTracerTracksImpl.__proto__ || Object.getPrototypeOf(ThreadTaskTracerTracksImpl)).apply(this, arguments));
  }

  (0, _createClass3.default)(ThreadTaskTracerTracksImpl, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          tasks = _props.tasks,
          tasktracer = _props.tasktracer,
          rangeStart = _props.rangeStart,
          rangeEnd = _props.rangeEnd,
          width = _props.width;
      var taskTable = tasktracer.taskTable,
          stringTable = tasktracer.stringTable,
          addressTable = tasktracer.addressTable;

      var tracks = [];

      var _loop = function _loop(taskIndex) {
        var dispatchTime = taskTable.dispatchTime[taskIndex];
        if (dispatchTime >= rangeEnd) {
          return 'continue';
        }
        var endTime = taskTable.endTime[taskIndex];
        if (endTime !== undefined && endTime <= rangeStart) {
          return 'continue';
        }
        var track = tracks.find(function (track) {
          return track.fullUpTo <= taskTable.dispatchTime[taskIndex];
        });
        if (track === undefined) {
          track = {
            tasks: [],
            fullUpTo: 0
          };
          tracks.push(track);
        }
        track.tasks.push(taskIndex);
        track.fullUpTo = taskTable.endTime[taskIndex] || rangeEnd;
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = tasks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var taskIndex = _step.value;

          var _ret = _loop(taskIndex);

          if (_ret === 'continue') continue;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _react2.default.createElement(
        'div',
        { className: 'taskTracerThreadViewTracks' },
        tracks.map(function (track, trackIndex) {
          return _react2.default.createElement(
            'ol',
            { className: 'taskTracerThreadViewTrack', key: trackIndex },
            track.tasks.map(function (taskIndex, i) {
              var dispatchTime = taskTable.dispatchTime[taskIndex];
              var beginTime = taskTable.beginTime[taskIndex] || rangeEnd;
              var endTime = taskTable.endTime[taskIndex] || rangeEnd;
              var pos = (beginTime - rangeStart) / (rangeEnd - rangeStart) * width;

              var execWidth = (endTime - beginTime) / (rangeEnd - rangeStart) * width;
              var beginDelayWidth = (beginTime - dispatchTime) / (rangeEnd - rangeStart) * width;

              var addressIndex = taskTable.address[taskIndex];
              var classNameStringIndex = taskTable.ipdlMsg[taskIndex] !== undefined ? taskTable.ipdlMsg[taskIndex] : addressTable.className[addressIndex];
              var labelStringIndices = taskTable.label[taskIndex];
              var title = classNameStringIndex !== undefined ? stringTable.getString(classNameStringIndex) : 'undefined';
              if (labelStringIndices !== undefined) {
                title += '\n' + labelStringIndices.map(function (index) {
                  return ' - ' + stringTable.getString(index);
                }).join('\n');
              }
              return _react2.default.createElement(
                'li',
                {
                  key: i,
                  className: 'taskTracerThreadViewTrackTask',
                  title: title,
                  style: { left: pos + 'px', width: execWidth + 'px' }
                },
                _react2.default.createElement('span', {
                  className: 'taskTracerThreadViewTrackTaskBeginDelay',
                  style: {
                    left: '-' + beginDelayWidth + 'px',
                    width: beginDelayWidth + 'px'
                  }
                })
              );
            })
          );
        })
      );
    }
  }]);
  return ThreadTaskTracerTracksImpl;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

ThreadTaskTracerTracksImpl.propTypes = {
  tasks: _react.PropTypes.arrayOf(_react.PropTypes.number).isRequired,
  tasktracer: _react.PropTypes.object.isRequired,
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired,
  width: _react.PropTypes.number.isRequired
};

var ThreadTaskTracerTracks = (0, _WithSize.withSize)(ThreadTaskTracerTracksImpl);

var ThreadTaskTracerView = function (_PureComponent2) {
  (0, _inherits3.default)(ThreadTaskTracerView, _PureComponent2);

  function ThreadTaskTracerView() {
    (0, _classCallCheck3.default)(this, ThreadTaskTracerView);
    return (0, _possibleConstructorReturn3.default)(this, (ThreadTaskTracerView.__proto__ || Object.getPrototypeOf(ThreadTaskTracerView)).apply(this, arguments));
  }

  (0, _createClass3.default)(ThreadTaskTracerView, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          name = _props2.name,
          tasks = _props2.tasks,
          tasktracer = _props2.tasktracer,
          rangeStart = _props2.rangeStart,
          rangeEnd = _props2.rangeEnd;

      if (tasks.length === 0) {
        return _react2.default.createElement('li', { className: 'taskTracerThreadView taskTracerThreadViewEmpty' });
      }
      return _react2.default.createElement(
        'li',
        { className: 'taskTracerThreadView' },
        _react2.default.createElement(
          'h1',
          { className: 'taskTracerThreadViewThreadName', title: name },
          name
        ),
        _react2.default.createElement(ThreadTaskTracerTracks, {
          tasks: tasks,
          tasktracer: tasktracer,
          rangeStart: rangeStart,
          rangeEnd: rangeEnd
        })
      );
    }
  }]);
  return ThreadTaskTracerView;
}(_react.PureComponent);

ThreadTaskTracerView.propTypes = {
  name: _react.PropTypes.string.isRequired,
  tasks: _react.PropTypes.arrayOf(_react.PropTypes.number).isRequired,
  tasktracer: _react.PropTypes.object.isRequired,
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired
};

var ProfileTaskTracerView = function (_PureComponent3) {
  (0, _inherits3.default)(ProfileTaskTracerView, _PureComponent3);

  function ProfileTaskTracerView() {
    (0, _classCallCheck3.default)(this, ProfileTaskTracerView);
    return (0, _possibleConstructorReturn3.default)(this, (ProfileTaskTracerView.__proto__ || Object.getPrototypeOf(ProfileTaskTracerView)).apply(this, arguments));
  }

  (0, _createClass3.default)(ProfileTaskTracerView, [{
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          tasktracer = _props3.tasktracer,
          tasksByThread = _props3.tasksByThread,
          rangeStart = _props3.rangeStart,
          rangeEnd = _props3.rangeEnd;
      var threadTable = tasktracer.threadTable,
          stringTable = tasktracer.stringTable;

      return _react2.default.createElement(
        'div',
        { className: 'taskTracerViewWrapper' },
        _react2.default.createElement(
          'ol',
          { className: 'taskTracerView' },
          Array.from(tasksByThread).map(function (_ref) {
            var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
                threadIndex = _ref2[0],
                tasks = _ref2[1];

            return _react2.default.createElement(ThreadTaskTracerView, {
              key: threadIndex,
              name: stringTable.getString(threadTable.name[threadIndex]),
              tasks: tasks,
              tasktracer: tasktracer,
              rangeStart: rangeStart,
              rangeEnd: rangeEnd
            });
          })
        )
      );
    }
  }]);
  return ProfileTaskTracerView;
}(_react.PureComponent);

ProfileTaskTracerView.propTypes = {
  tasktracer: _react.PropTypes.object.isRequired,
  tasksByThread: _react.PropTypes.object.isRequired,
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    tasktracer: (0, _profileView.getProfileTaskTracerData)(state),
    tasksByThread: (0, _profileView.getTasksByThread)(state)
  };
}, _actions2.default)(ProfileTaskTracerView);

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__(9);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _urlState = __webpack_require__(15);

var _FilterNavigatorBar = __webpack_require__(201);

var _FilterNavigatorBar2 = _interopRequireDefault(_FilterNavigatorBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = (0, _reactRedux.connect)(function (state) {
  var items = (0, _urlState.getRangeFilterLabels)(state);
  return {
    className: 'profileFilterNavigator',
    items: items,
    selectedItem: items.length - 1
  };
}, {
  onPop: _actions2.default.popRangeFiltersAndUnsetSelection
})(_FilterNavigatorBar2.default);

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = __webpack_require__(26);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _gz = __webpack_require__(194);

var _profileStore = __webpack_require__(461);

var _ArrowPanel = __webpack_require__(462);

var _ArrowPanel2 = _interopRequireDefault(_ArrowPanel);

var _ButtonWithPanel = __webpack_require__(466);

var _ButtonWithPanel2 = _interopRequireDefault(_ButtonWithPanel);

var _shortenUrl = __webpack_require__(469);

var _shortenUrl2 = _interopRequireDefault(_shortenUrl);

var _processProfile = __webpack_require__(193);

var _prettyBytes = __webpack_require__(476);

var _prettyBytes2 = _interopRequireDefault(_prettyBytes);

var _sha = __webpack_require__(477);

var _sha2 = _interopRequireDefault(_sha);

var _url = __webpack_require__(209);

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(478); /* This Source Code Form is subject to the terms of the Mozilla Public
                                  * License, v. 2.0. If a copy of the MPL was not distributed with this
                                  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var PrivacyNotice = function PrivacyNotice() {
  return _react2.default.createElement(
    'section',
    { className: 'privacyNotice' },
    _react2.default.createElement(
      'p',
      null,
      'You\u2019re about to upload your profile publicly where anyone will be able to access it.\n      To better diagnose performance problems profiles include the following information:'
    ),
    _react2.default.createElement(
      'ul',
      null,
      _react2.default.createElement(
        'li',
        null,
        'The URLs and scripts of the tabs that were executing.'
      ),
      _react2.default.createElement(
        'li',
        null,
        'The metadata of all your add-ons to identify slow add-ons.'
      ),
      _react2.default.createElement(
        'li',
        null,
        'Firefox build and runtime configuration.'
      )
    ),
    _react2.default.createElement(
      'p',
      null,
      'To view all the information you can download the full profile to a file and open the\n      json structure with a text editor.'
    )
  );
};

var UploadingStatus = function UploadingStatus(_ref) {
  var progress = _ref.progress;
  return _react2.default.createElement(
    'div',
    { className: 'profileSharingUploadingButton' },
    _react2.default.createElement(
      'div',
      { className: 'profileSharingUploadingButtonInner' },
      _react2.default.createElement('progress', {
        className: 'profileSharingUploadingButtonProgress',
        value: progress
      }),
      _react2.default.createElement(
        'div',
        { className: 'profileSharingUploadingButtonLabel' },
        'Uploading...'
      )
    )
  );
};

var ProfileSharingCompositeButton = function (_PureComponent) {
  (0, _inherits3.default)(ProfileSharingCompositeButton, _PureComponent);

  function ProfileSharingCompositeButton(props) {
    (0, _classCallCheck3.default)(this, ProfileSharingCompositeButton);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileSharingCompositeButton.__proto__ || Object.getPrototypeOf(ProfileSharingCompositeButton)).call(this, props));

    var dataSource = props.dataSource,
        hash = props.hash;

    _this.state = {
      state: dataSource === 'public' ? 'public' : 'local', // local -> uploading (<-> error) -> public
      uploadProgress: 0,
      hash: hash,
      error: null,
      fullUrl: window.location.href,
      shortUrl: window.location.href
    };

    _this._attemptToShare = _this._attemptToShare.bind(_this);
    _this._onPermalinkPanelOpen = _this._onPermalinkPanelOpen.bind(_this);
    _this._onPermalinkPanelClose = _this._onPermalinkPanelClose.bind(_this);
    _this._permalinkButtonCreated = function (elem) {
      _this._permalinkButton = elem;
    };
    _this._uploadErrorButtonCreated = function (elem) {
      _this._uploadErrorButton = elem;
    };
    _this._permalinkTextFieldCreated = function (elem) {
      _this._permalinkTextField = elem;
    };
    return _this;
  }

  (0, _createClass3.default)(ProfileSharingCompositeButton, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref2) {
      var dataSource = _ref2.dataSource,
          hash = _ref2.hash;

      if (dataSource === 'public' && this.state.state !== 'public') {
        this.setState({ state: 'public', hash: hash });
      }
      if (window.location.href !== this.state.fullUrl) {
        this.setState({
          fullUrl: window.location.href,
          shortUrl: window.location.href
        });
      }
    }
  }, {
    key: '_onPermalinkPanelOpen',
    value: function _onPermalinkPanelOpen() {
      this._shortenUrlAndFocusTextFieldOnCompletion();
    }
  }, {
    key: '_shortenUrlAndFocusTextFieldOnCompletion',
    value: function _shortenUrlAndFocusTextFieldOnCompletion() {
      var _this2 = this;

      return (0, _shortenUrl2.default)(this.state.fullUrl).then(function (shortUrl) {
        _this2.setState({ shortUrl: shortUrl });
        if (_this2._permalinkTextField) {
          _this2._permalinkTextField.focus();
          _this2._permalinkTextField.select();
        }
      }).catch(function () {});
    }
  }, {
    key: '_onPermalinkPanelClose',
    value: function _onPermalinkPanelClose() {
      if (this._permalinkTextField) {
        this._permalinkTextField.blur();
      }
    }
  }, {
    key: '_attemptToShare',
    value: function _attemptToShare() {
      var _this3 = this;

      if (this.state.state !== 'local' && this.state.state !== 'error') {
        return;
      }

      var _props = this.props,
          profile = _props.profile,
          predictUrl = _props.predictUrl;


      new Promise(function (resolve) {
        if (!profile) {
          throw new Error('profile is null');
        }
        var jsonString = (0, _processProfile.serializeProfile)(profile);
        if (!jsonString) {
          throw new Error('profile serialization failed');
        }

        _this3.setState({ state: 'uploading', uploadProgress: 0 });
        resolve(jsonString);
      }).then(function (s) {
        return new TextEncoder().encode(s);
      }).then(function (typedArray) {
        return Promise.all([(0, _gz.compress)(typedArray.slice(0)), (0, _sha2.default)(typedArray)]);
      }).then(function (_ref3) {
        var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
            gzipData = _ref4[0],
            hash = _ref4[1];

        var predictedUrl = _url2.default.resolve(window.location.href, predictUrl(_actions2.default.profilePublished(hash)));
        _this3.setState({
          hash: hash,
          fullUrl: predictedUrl,
          shortUrl: predictedUrl
        });
        var uploadPromise = (0, _profileStore.uploadBinaryProfileData)(gzipData, function (uploadProgress) {
          _this3.setState({ uploadProgress: uploadProgress });
        }).then(function (hash) {
          var onProfilePublished = _this3.props.onProfilePublished;

          onProfilePublished(hash);
          var newShortUrl = _this3.state.fullUrl === window.location.href ? _this3.state.shortUrl : window.location.href;
          _this3.setState({
            state: 'public',
            hash: hash,
            fullUrl: window.location.href,
            shortUrl: newShortUrl
          });
        });
        var shortenUrlPromise = _this3._shortenUrlAndFocusTextFieldOnCompletion();
        Promise.race([uploadPromise, shortenUrlPromise]).then(function () {
          if (_this3._permalinkButton) {
            _this3._permalinkButton.openPanel();
          }
        });
        return Promise.all([uploadPromise, shortenUrlPromise]);
      }).catch(function (error) {
        _this3.setState({
          state: 'error',
          error: error
        });
        if (_this3._uploadErrorButton) {
          _this3._uploadErrorButton.openPanel();
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          state = _state.state,
          uploadProgress = _state.uploadProgress,
          error = _state.error,
          shortUrl = _state.shortUrl;
      var symbolicationStatus = this.props.symbolicationStatus;

      var shareLabel = symbolicationStatus === 'DONE' ? 'Share...' : 'Sharing will be enabled once symbolication is complete';
      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)('profileSharingCompositeButtonContainer', {
            currentButtonIsShareButton: state === 'local',
            currentButtonIsUploadingButton: state === 'uploading',
            currentButtonIsPermalinkButton: state === 'public',
            currentButtonIsUploadErrorButton: state === 'error'
          })
        },
        _react2.default.createElement(_ButtonWithPanel2.default, {
          className: 'profileSharingShareButton',
          label: shareLabel,
          disabled: symbolicationStatus !== 'DONE',
          panel: _react2.default.createElement(
            _ArrowPanel2.default,
            {
              className: 'profileSharingPrivacyPanel',
              title: 'Upload Profile – Privacy Notice',
              okButtonText: 'Share',
              cancelButtonText: 'Cancel',
              onOkButtonClick: this._attemptToShare
            },
            _react2.default.createElement(PrivacyNotice, null)
          )
        }),
        _react2.default.createElement(UploadingStatus, { progress: uploadProgress }),
        _react2.default.createElement(_ButtonWithPanel2.default, {
          className: 'profileSharingPermalinkButton',
          ref: this._permalinkButtonCreated,
          label: 'Permalink',
          panel: _react2.default.createElement(
            _ArrowPanel2.default,
            {
              className: 'profileSharingPermalinkPanel',
              onOpen: this._onPermalinkPanelOpen,
              onClose: this._onPermalinkPanelClose
            },
            _react2.default.createElement('input', {
              type: 'text',
              className: 'profileSharingPermalinkTextField',
              value: shortUrl,
              readOnly: 'readOnly',
              ref: this._permalinkTextFieldCreated
            })
          )
        }),
        _react2.default.createElement(_ButtonWithPanel2.default, {
          className: 'profileSharingUploadErrorButton',
          ref: this._uploadErrorButtonCreated,
          label: 'Upload Error',
          panel: _react2.default.createElement(
            _ArrowPanel2.default,
            {
              className: 'profileSharingUploadErrorPanel',
              title: 'Upload Error',
              okButtonText: 'Try Again',
              cancelButtonText: 'Cancel',
              onOkButtonClick: this._attemptToShare
            },
            _react2.default.createElement(
              'p',
              null,
              'An error occurred during upload:'
            ),
            _react2.default.createElement(
              'pre',
              null,
              error && error.toString()
            )
          )
        })
      );
    }
  }]);
  return ProfileSharingCompositeButton;
}(_react.PureComponent);

function filenameDateString(d) {
  var pad = function pad(x) {
    return x < 10 ? '0' + x : '' + x;
  };
  return pad(d.getFullYear()) + '-' + pad(d.getMonth() + 1) + '-' + pad(d.getDate()) + ' ' + pad(d.getHours()) + '.' + pad(d.getMinutes());
}

var ProfileDownloadButton = function (_PureComponent2) {
  (0, _inherits3.default)(ProfileDownloadButton, _PureComponent2);

  function ProfileDownloadButton(props) {
    (0, _classCallCheck3.default)(this, ProfileDownloadButton);

    var _this4 = (0, _possibleConstructorReturn3.default)(this, (ProfileDownloadButton.__proto__ || Object.getPrototypeOf(ProfileDownloadButton)).call(this, props));

    _this4.state = {
      uncompressedBlobUrl: '',
      compressedBlobUrl: '',
      uncompressedSize: 0,
      compressedSize: 0,
      filename: ''
    };
    _this4._onPanelOpen = _this4._onPanelOpen.bind(_this4);
    return _this4;
  }

  (0, _createClass3.default)(ProfileDownloadButton, [{
    key: '_onPanelOpen',
    value: function _onPanelOpen() {
      var _this5 = this;

      var _props2 = this.props,
          profile = _props2.profile,
          rootRange = _props2.rootRange;

      var profileDate = new Date(profile.meta.startTime + rootRange.start);
      var serializedProfile = (0, _processProfile.serializeProfile)(profile);
      var blob = new Blob([serializedProfile], {
        type: 'application/octet-binary'
      });
      var blobUrl = URL.createObjectURL(blob);
      this.setState({
        filename: profile.meta.product + ' ' + filenameDateString(profileDate) + ' profile.sps.json',
        uncompressedBlobUrl: blobUrl,
        uncompressedSize: blob.size
      });
      (0, _gz.compress)(serializedProfile).then(function (data) {
        var blob = new Blob([data], { type: 'application/octet-binary' });
        var blobUrl = URL.createObjectURL(blob);
        _this5.setState({
          compressedBlobUrl: blobUrl,
          compressedSize: blob.size
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state2 = this.state,
          filename = _state2.filename,
          uncompressedBlobUrl = _state2.uncompressedBlobUrl,
          compressedBlobUrl = _state2.compressedBlobUrl,
          uncompressedSize = _state2.uncompressedSize,
          compressedSize = _state2.compressedSize;

      return _react2.default.createElement(_ButtonWithPanel2.default, {
        className: 'profileSharingProfileDownloadButton',
        label: 'Save as file...',
        panel: _react2.default.createElement(
          _ArrowPanel2.default,
          {
            className: 'profileSharingProfileDownloadPanel',
            title: 'Save Profile to a Local File',
            onOpen: this._onPanelOpen
          },
          _react2.default.createElement(
            'section',
            null,
            uncompressedBlobUrl ? _react2.default.createElement(
              'p',
              null,
              _react2.default.createElement(
                'a',
                {
                  className: 'profileSharingDownloadLink',
                  href: uncompressedBlobUrl,
                  download: filename
                },
                filename + ' (' + (0, _prettyBytes2.default)(uncompressedSize) + ')'
              )
            ) : null,
            compressedBlobUrl ? _react2.default.createElement(
              'p',
              null,
              _react2.default.createElement(
                'a',
                {
                  className: 'profileSharingDownloadLink',
                  href: compressedBlobUrl,
                  download: filename + '.gz'
                },
                filename + '.gz (' + (0, _prettyBytes2.default)(compressedSize) + ')'
              )
            ) : null
          )
        )
      });
    }
  }]);
  return ProfileDownloadButton;
}(_react.PureComponent);

var ProfileSharing = function ProfileSharing(_ref5) {
  var profile = _ref5.profile,
      rootRange = _ref5.rootRange,
      dataSource = _ref5.dataSource,
      hash = _ref5.hash,
      symbolicationStatus = _ref5.symbolicationStatus,
      profilePublished = _ref5.profilePublished,
      predictUrl = _ref5.predictUrl;
  return _react2.default.createElement(
    'div',
    { className: 'profileSharing' },
    _react2.default.createElement(ProfileSharingCompositeButton, {
      profile: profile,
      dataSource: dataSource,
      hash: hash,
      symbolicationStatus: symbolicationStatus,
      onProfilePublished: profilePublished,
      predictUrl: predictUrl
    }),
    _react2.default.createElement(ProfileDownloadButton, { profile: profile, rootRange: rootRange })
  );
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    profile: (0, _profileView.getProfile)(state),
    rootRange: (0, _profileView.getProfileRootRange)(state),
    dataSource: (0, _urlState.getDataSource)(state),
    hash: (0, _urlState.getHash)(state),
    symbolicationStatus: (0, _profileView.getProfileViewOptions)(state).symbolicationStatus,
    predictUrl: (0, _urlState.getUrlPredictor)(state)
  };
}, { profilePublished: _actions2.default.profilePublished })(ProfileSharing);

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadBinaryProfileData = uploadBinaryProfileData;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function uploadBinaryProfileData(data) {
  var progressChangeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();

    xhr.onload = function () {
      if (xhr.status === 200) {
        resolve(xhr.responseText);
      } else {
        reject(new Error('xhr onload with status != 200, xhr.statusText: ' + xhr.statusText));
      }
    };

    xhr.onerror = function () {
      reject(new Error('xhr onerror was called, xhr.statusText: ' + xhr.statusText));
    };

    xhr.upload.onprogress = function (e) {
      if (progressChangeCallback && e.lengthComputable) {
        progressChangeCallback(e.loaded / e.total);
      }
    };

    xhr.open('POST', 'https://profile-store.appspot.com/compressed-store');
    xhr.send(data);
  });
}

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

__webpack_require__(463);

var ArrowPanel = function (_PureComponent) {
  (0, _inherits3.default)(ArrowPanel, _PureComponent);

  function ArrowPanel(props) {
    (0, _classCallCheck3.default)(this, ArrowPanel);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ArrowPanel.__proto__ || Object.getPrototypeOf(ArrowPanel)).call(this, props));

    _this.state = { open: false };
    _this._windowMouseDownListener = _this._windowMouseDownListener.bind(_this);
    _this._panelElementCreated = function (elem) {
      _this._panelElement = elem;
    };
    _this._onOkButtonClick = _this._onOkButtonClick.bind(_this);
    _this._onCancelButtonClick = _this._onCancelButtonClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ArrowPanel, [{
    key: 'open',
    value: function open() {
      if (this.state.open) {
        return;
      }

      this.setState({ open: true });
      if (this.props.onOpen) {
        this.props.onOpen();
      }
      window.addEventListener('mousedown', this._windowMouseDownListener, true);
    }
  }, {
    key: 'close',
    value: function close() {
      if (!this.state.open) {
        return;
      }

      this.setState({ open: false });
      if (this.props.onClose) {
        this.props.onClose();
      }
      window.removeEventListener('mousedown', this._windowMouseDownListener, true);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('mousedown', this._windowMouseDownListener, true);
    }
  }, {
    key: '_windowMouseDownListener',
    value: function _windowMouseDownListener(e) {
      var target = e.target; // make flow happy
      if (this.state.open && this._panelElement && !this._panelElement.contains(target)) {
        this.close();
      }
    }
  }, {
    key: '_onOkButtonClick',
    value: function _onOkButtonClick() {
      this.close();
      if (this.props.onOkButtonClick) {
        this.props.onOkButtonClick();
      }
    }
  }, {
    key: '_onCancelButtonClick',
    value: function _onCancelButtonClick() {
      this.close();
      if (this.props.onCancelButtonClick) {
        this.props.onCancelButtonClick();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          children = _props.children,
          title = _props.title,
          okButtonText = _props.okButtonText,
          cancelButtonText = _props.cancelButtonText;

      var hasTitle = title !== undefined;
      var hasButtons = okButtonText || cancelButtonText;
      var open = this.state.open;

      return _react2.default.createElement(
        'div',
        { className: 'arrowPanelAnchor' },
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('arrowPanel', { open: open, hasTitle: hasTitle, hasButtons: hasButtons }, className),
            ref: this._panelElementCreated
          },
          _react2.default.createElement('div', { className: 'arrowPanelArrow' }),
          hasTitle ? _react2.default.createElement(
            'h1',
            { className: 'arrowPanelTitle' },
            title
          ) : null,
          _react2.default.createElement(
            'div',
            { className: 'arrowPanelContent' },
            children
          ),
          hasButtons ? _react2.default.createElement(
            'div',
            { className: 'arrowPanelButtons' },
            _react2.default.createElement('input', {
              type: 'button',
              className: 'arrowPanelCancelButton',
              value: cancelButtonText,
              onClick: this._onCancelButtonClick
            }),
            _react2.default.createElement('input', {
              type: 'button',
              className: 'arrowPanelOkButton',
              value: okButtonText,
              onClick: this._onOkButtonClick
            })
          ) : null
        )
      );
    }
  }]);
  return ArrowPanel;
}(_react.PureComponent);

exports.default = ArrowPanel;

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(464);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./ArrowPanel.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./ArrowPanel.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".arrowPanelAnchor{position:absolute;z-index:10;left:50%;top:75%}.arrowPanel{--internal-offset-from-right:var(--offset-from-right,60px);--internal-offset-from-top:15px;--internal-width:var(--width,auto);--internal-button-height:30px;--internal-ok-button-background:var(--ok-button-background,#7990c8);--internal-ok-button-color:var(--ok-button-color,#fff);position:absolute;top:var(--internal-offset-from-top);right:calc(0px - var(--internal-offset-from-right));min-width:var(--internal-width);filter:drop-shadow(0 0 .5px rgba(0,0,0,.4)) drop-shadow(0 4px 5px rgba(0,0,0,.4));filter:url(" + __webpack_require__(465) + "#menushadow);color:#000;text-align:left;line-height:1.3;background:hsla(0,0%,97%,.95);border-radius:5px;transform-origin:calc(100% - var(--internal-offset-from-right)) calc(0px - var(--internal-offset-from-top))}.arrowPanel:not(.open){pointer-events:none;transition:opacity .2s ease-out;opacity:0}.arrowPanel.open{transition:none;animation:arrowPanelAppear .4s;opacity:1}@keyframes arrowPanelAppear{0%{opacity:0;transform:scale(0);animation-timing-function:ease-out}40%{opacity:.6;transform:scale(1);animation-timing-function:ease-in-out}60%{opacity:.9;transform:scale(.96);animation-timing-function:cubic-bezier(.3,0,.3,1)}}.arrowPanelArrow{position:absolute;left:0;right:0;top:calc(0px - var(--internal-offset-from-top));height:var(--internal-offset-from-top);overflow:hidden}.arrowPanelArrow:before{content:\"\";display:block;position:absolute;top:0;left:calc(100% - var(--internal-offset-from-right));width:calc(1.42 * var(--internal-offset-from-top));height:calc(1.42 * var(--internal-offset-from-top));background:hsla(0,0%,97%,.95);transform:rotate(45deg);transform-origin:top left;z-index:-1}.arrowPanelTitle{font-size:1.2em;padding:10px;margin:0}.arrowPanelContent{padding:0 10px;overflow:auto;--internal-approx-distance-from-top:60px;--internal-approx-distance-to-bottom:100px;max-height:calc(100vh - var(--internal-approx-distance-from-top) - var(--internal-button-height) - var(--internal-approx-distance-to-top))}.arrowPanel.hasTitle>.arrowPanelContent{border-top:1px solid rgba(0,0,0,.05)}.arrowPanel.hasButtons>.arrowPanelContent{border-bottom:1px solid rgba(0,0,0,.05)}.arrowPanel ul{padding-left:2em}.arrowPanelButtons{height:35px;line-height:35px;display:flex;flex-flow:row nowrap;align-items:stretch}.arrowPanelCancelButton,.arrowPanelOkButton{border:0;background:none;padding:0;margin:0;flex:1;text-align:center;font-size:1.2em}.arrowPanelOkButton{border-bottom-right-radius:5px;background:var(--internal-ok-button-background);color:var(--internal-ok-button-color)}.arrowPanelCancelButton{border-bottom-left-radius:5px}.arrowPanelCancelButton:hover,.arrowPanelOkButton:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.arrowPanelCancelButton:hover:active,.arrowPanelOkButton:hover:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}", ""]);

// exports


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "91c82be8ce8ec6b298a308d33f81fcfd.svg";

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

__webpack_require__(467);

var ButtonWithPanel = function (_PureComponent) {
  (0, _inherits3.default)(ButtonWithPanel, _PureComponent);

  function ButtonWithPanel(props) {
    (0, _classCallCheck3.default)(this, ButtonWithPanel);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ButtonWithPanel.__proto__ || Object.getPrototypeOf(ButtonWithPanel)).call(this, props));

    _this.state = { open: !!props.open };
    _this._onPanelOpen = function () {
      _this.setState({ open: true });
      if (_this.props.panel.props.onOpen) {
        _this.props.panel.props.onOpen();
      }
    };
    _this._onPanelClose = function () {
      _this.setState({ open: false });
      if (_this.props.panel.props.onClose) {
        _this.props.panel.props.onClose();
      }
    };
    _this._onButtonClick = _this._onButtonClick.bind(_this);
    _this._panelCreated = function (panel) {
      _this._panel = panel;
    };
    return _this;
  }

  (0, _createClass3.default)(ButtonWithPanel, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.open !== this.props.open) {
        this.setState({ open: !!props.open });
      }
    }
  }, {
    key: 'openPanel',
    value: function openPanel() {
      if (this._panel) {
        this._panel.open();
      }
    }
  }, {
    key: '_onButtonClick',
    value: function _onButtonClick() {
      this.openPanel();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          label = _props.label,
          panel = _props.panel,
          disabled = _props.disabled;
      var open = this.state.open;

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('buttonWithPanel', className, { open: open }) },
        _react2.default.createElement(
          'div',
          { className: 'buttonWithPanelButtonWrapper' },
          _react2.default.createElement('input', {
            type: 'button',
            className: (0, _classnames2.default)('buttonWithPanelButton', className + 'Button'),
            disabled: !!disabled,
            value: label,
            onClick: this._onButtonClick
          })
        ),
        _react2.default.cloneElement(panel, {
          ref: this._panelCreated,
          onOpen: this._onPanelOpen,
          onClose: this._onPanelClose
        })
      );
    }
  }]);
  return ButtonWithPanel;
}(_react.PureComponent);

exports.default = ButtonWithPanel;

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(468);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./ButtonWithPanel.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./ButtonWithPanel.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".buttonWithPanel{position:relative}.buttonWithPanel,.buttonWithPanelButtonWrapper{display:flex;flex-flow:column nowrap;align-items:stretch}.buttonWithPanelButtonWrapper{height:100%;overflow:hidden}.buttonWithPanelButton{border:0;margin:0;padding:0 10px;background:none;height:100%;font-size:100%}.buttonWithPanelButton:not([disabled]):hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.buttonWithPanel.open>*>.buttonWithPanelButton,.buttonWithPanelButton:not([disabled]):hover:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}", ""]);

// exports


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shortenUrl;

var _fetchJsonp = __webpack_require__(470);

var _fetchJsonp2 = _interopRequireDefault(_fetchJsonp);

var _queryString = __webpack_require__(192);

var _queryString2 = _interopRequireDefault(_queryString);

var _url = __webpack_require__(209);

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function shortenUrl(urlToShorten) {
  var longUrl = urlToShorten;
  if (!longUrl.startsWith('https://perf-html.io/')) {
    var parsedUrl = _url2.default.parse(longUrl);
    var parsedUrlOnCanonicalHost = Object.assign({}, parsedUrl, {
      protocol: 'https:',
      host: 'perf-html.io'
    });
    longUrl = _url2.default.format(parsedUrlOnCanonicalHost);
  }

  var bitlyQueryUrl = 'https://api-ssl.bitly.com/v3/shorten?' + _queryString2.default.stringify({
    longUrl: longUrl,
    domain: 'perfht.ml',
    format: 'json',
    access_token: 'b177b00a130faf3ecda6960e8b59fde73e902422'
  });
  return (0, _fetchJsonp2.default)(bitlyQueryUrl).then(function (response) {
    return response.json();
  }).then(function (json) {
    return json.data.url;
  });
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
    factory(exports, module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, mod);
    global.fetchJsonp = mod.exports;
  }
})(this, function (exports, module) {
  'use strict';

  var defaultOptions = {
    timeout: 5000,
    jsonpCallback: 'callback',
    jsonpCallbackFunction: null
  };

  function generateCallbackFunction() {
    return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);
  }

  function clearFunction(functionName) {
    // IE8 throws an exception when you try to delete a property on window
    // http://stackoverflow.com/a/1824228/751089
    try {
      delete window[functionName];
    } catch (e) {
      window[functionName] = undefined;
    }
  }

  function removeScript(scriptId) {
    var script = document.getElementById(scriptId);
    if (script) {
      document.getElementsByTagName('head')[0].removeChild(script);
    }
  }

  function fetchJsonp(_url) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    // to avoid param reassign
    var url = _url;
    var timeout = options.timeout || defaultOptions.timeout;
    var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;

    var timeoutId = undefined;

    return new Promise(function (resolve, reject) {
      var callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();
      var scriptId = jsonpCallback + '_' + callbackFunction;

      window[callbackFunction] = function (response) {
        resolve({
          ok: true,
          // keep consistent with fetch API
          json: function json() {
            return Promise.resolve(response);
          }
        });

        if (timeoutId) clearTimeout(timeoutId);

        removeScript(scriptId);

        clearFunction(callbackFunction);
      };

      // Check if the user set their own params, and if not add a ? to start a list of params
      url += url.indexOf('?') === -1 ? '?' : '&';

      var jsonpScript = document.createElement('script');
      jsonpScript.setAttribute('src', '' + url + jsonpCallback + '=' + callbackFunction);
      if (options.charset) {
        jsonpScript.setAttribute('charset', options.charset);
      }
      jsonpScript.id = scriptId;
      document.getElementsByTagName('head')[0].appendChild(jsonpScript);

      timeoutId = setTimeout(function () {
        reject(new Error('JSONP request to ' + _url + ' timed out'));

        clearFunction(callbackFunction);
        removeScript(scriptId);
        window[callbackFunction] = function () {
          clearFunction(callbackFunction);
        };
      }, timeout);

      // Caught if got 404/500
      jsonpScript.onerror = function () {
        reject(new Error('JSONP request to ' + _url + ' failed'));

        clearFunction(callbackFunction);
        removeScript(scriptId);
        if (timeoutId) clearTimeout(timeoutId);
      };
    });
  }

  // export as global function
  /*
  let local;
  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }
  local.fetchJsonp = fetchJsonp;
  */

  module.exports = fetchJsonp;
});

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(183)(module), __webpack_require__(63)))

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(474);
exports.encode = exports.stringify = __webpack_require__(475);


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(35);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

module.exports = function (num) {
	if (!Number.isFinite(num)) {
		throw new TypeError('Expected a finite number, got ' + (typeof num === 'undefined' ? 'undefined' : (0, _typeof3.default)(num)) + ': ' + num);
	}

	var neg = num < 0;

	if (neg) {
		num = -num;
	}

	if (num < 1) {
		return (neg ? '-' : '') + num + ' B';
	}

	var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1000)), UNITS.length - 1);
	var numStr = Number((num / Math.pow(1000, exponent)).toPrecision(3));
	var unit = UNITS[exponent];

	return (neg ? '-' : '') + numStr + ' ' + unit;
};

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sha1;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// Copied and adapted from https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest

function hex(buffer) {
  var hexCodes = [];
  var view = new DataView(buffer);
  for (var i = 0; i < view.byteLength; i += 4) {
    // Using getUint32 reduces the number of iterations needed (we process 4 bytes each time).
    var value = view.getUint32(i);
    // toString(16) will give the hex representation of the number without padding
    var stringValue = value.toString(16);
    // We use concatenation and slice for padding
    var padding = '00000000';
    var paddedValue = (padding + stringValue).slice(-padding.length);
    hexCodes.push(paddedValue);
  }

  // Join all the hex strings into one.
  return hexCodes.join('');
}

function sha1(data) {
  var arrayData = typeof data === 'string' ? new TextEncoder().encode(data) : data;
  return window.crypto.subtle.digest('SHA-1', arrayData).then(hex);
}

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(479);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./ProfileSharing.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./ProfileSharing.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".profileSharing{--internal-share-button-background-color:var(--share-button-background-color,#15cb49);--internal-uploading-button-background-color:var(--uploading-button-background-color,#38445f);--internal-uploading-progress-fill-color:var(--uploading-progress-fill-color,#7990c8);height:100%;display:flex;flex-flow:row nowrap}.profileSharingCompositeButtonContainer{display:flex;flex-flow:column nowrap;border-left:1px solid var(--grey-30);border-right:1px solid var(--grey-30)}.profileSharingPermalinkButton,.profileSharingShareButton,.profileSharingUploadErrorButton,.profileSharingUploadingButton{height:24px;margin-bottom:-24px}.profileSharingUploadingButton{overflow:hidden}.profileSharingUploadingButtonInner{display:flex;flex-flow:column nowrap;align-items:stretch;height:100%;overflow:hidden}.profileSharingUploadingButtonLabel{padding:0 10px;line-height:24px;text-align:center;color:hsla(0,0%,100%,.7);position:relative;-moz-user-select:none;cursor:default}.profileSharingUploadingButtonProgress{height:24px;margin-bottom:-24px;width:100%;background:var(--internal-uploading-button-background-color);border:0;transform-origin:bottom left}.profileSharingUploadingButtonProgress::-moz-progress-bar{background:var(--internal-uploading-progress-fill-color)}.profileSharingShareButtonButton:not([disabled]){background-color:var(--internal-share-button-background-color);color:#fff}.profileSharingCompositeButtonContainer:not(.currentButtonIsPermalinkButton)>.profileSharingPermalinkButton,.profileSharingCompositeButtonContainer:not(.currentButtonIsShareButton)>.profileSharingShareButton,.profileSharingCompositeButtonContainer:not(.currentButtonIsUploadErrorButton)>.profileSharingUploadErrorButton,.profileSharingCompositeButtonContainer:not(.currentButtonIsUploadingButton)>.profileSharingUploadingButton{pointer-events:none}.profileSharingPermalinkButtonButton,.profileSharingShareButtonButton,.profileSharingUploadErrorButtonButton,.profileSharingUploadingButtonInner{transition:transform .2s ease-in-out}.profileSharingCompositeButtonContainer.currentButtonIsPermalinkButton>.profileSharingUploadingButton>.profileSharingUploadingButtonInner,.profileSharingCompositeButtonContainer.currentButtonIsUploadErrorButton>.profileSharingUploadingButton>.profileSharingUploadingButtonInner,.profileSharingCompositeButtonContainer:not(.currentButtonIsShareButton)>.profileSharingShareButton>.buttonWithPanelButtonWrapper>.profileSharingShareButtonButton{transform:translateY(-24px)}.profileSharingCompositeButtonContainer.currentButtonIsShareButton>.profileSharingUploadingButton>.profileSharingUploadingButtonInner,.profileSharingCompositeButtonContainer:not(.currentButtonIsPermalinkButton)>.profileSharingPermalinkButton>.buttonWithPanelButtonWrapper>.profileSharingPermalinkButtonButton,.profileSharingCompositeButtonContainer:not(.currentButtonIsUploadErrorButton)>.profileSharingUploadErrorButton>.buttonWithPanelButtonWrapper>.profileSharingUploadErrorButtonButton{transform:translateY(24px)}.profileSharingPrivacyPanel,.profileSharingUploadErrorPanel{--width:280px}.profileSharingProfileDownloadPanel{--offset-from-right:25px;--width:30em}.profileSharingDownloadLink{white-space:nowrap}.profileSharingPermalinkTextField{width:14em;margin:5px -5px}", ""]);

// exports


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function englishSgPlLibrary(count) {
  return count === 1 ? 'library' : 'libraries';
} /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function englishListJoin(list) {
  switch (list.length) {
    case 0:
      return '';
    case 1:
      return list[0];
    default:
      {
        var allButLast = list.slice(0, list.length - 1);
        return allButLast.join(', ') + ' and ' + list[list.length - 1];
      }
  }
}

var SymbolicationStatusOverlay = function (_PureComponent) {
  (0, _inherits3.default)(SymbolicationStatusOverlay, _PureComponent);

  function SymbolicationStatusOverlay() {
    (0, _classCallCheck3.default)(this, SymbolicationStatusOverlay);
    return (0, _possibleConstructorReturn3.default)(this, (SymbolicationStatusOverlay.__proto__ || Object.getPrototypeOf(SymbolicationStatusOverlay)).apply(this, arguments));
  }

  (0, _createClass3.default)(SymbolicationStatusOverlay, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          symbolicationStatus = _props.symbolicationStatus,
          waitingForLibs = _props.waitingForLibs;

      if (symbolicationStatus === 'SYMBOLICATING') {
        if (waitingForLibs.size > 0) {
          var libNames = Array.from(waitingForLibs.values()).map(function (lib) {
            return lib.debugName;
          });
          return _react2.default.createElement(
            'div',
            { className: 'symbolicationStatusOverlay' },
            _react2.default.createElement('span', { className: 'symbolicationStatusOverlayThrobber' }),
            'Waiting for symbol tables for ' + englishSgPlLibrary(libNames.length) + ' ' + englishListJoin(libNames) + '...'
          );
        }
        return _react2.default.createElement(
          'div',
          { className: 'symbolicationStatusOverlay' },
          _react2.default.createElement('span', { className: 'symbolicationStatusOverlayThrobber' }),
          'Symbolicating call stacks...'
        );
      }
      return _react2.default.createElement('div', { className: 'symbolicationStatusOverlay hidden' });
    }
  }]);
  return SymbolicationStatusOverlay;
}(_react.PureComponent);

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    symbolicationStatus: (0, _profileView.getProfileViewOptions)(state).symbolicationStatus,
    waitingForLibs: (0, _profileView.getProfileViewOptions)(state).waitingForLibs
  };
})(SymbolicationStatusOverlay);

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _Canvas = __webpack_require__(482);

var _Canvas2 = _interopRequireDefault(_Canvas);

var _profileView = __webpack_require__(14);

var _stackChart = __webpack_require__(127);

var _profileView2 = __webpack_require__(23);

var _Settings = __webpack_require__(491);

var _Settings2 = _interopRequireDefault(_Settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(494); /* This Source Code Form is subject to the terms of the Mozilla Public
                         * License, v. 2.0. If a copy of the MPL was not distributed with this
                         * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var STACK_FRAME_HEIGHT = 16;

var StackChartGraph = function (_PureComponent) {
  (0, _inherits3.default)(StackChartGraph, _PureComponent);

  function StackChartGraph() {
    (0, _classCallCheck3.default)(this, StackChartGraph);
    return (0, _possibleConstructorReturn3.default)(this, (StackChartGraph.__proto__ || Object.getPrototypeOf(StackChartGraph)).apply(this, arguments));
  }

  (0, _createClass3.default)(StackChartGraph, [{
    key: 'getMaximumZoom',


    /**
     * Determine the maximum amount available to zoom in.
     */
    value: function getMaximumZoom() {
      var _props = this.props,
          _props$timeRange = _props.timeRange,
          start = _props$timeRange.start,
          end = _props$timeRange.end,
          interval = _props.interval;

      return interval / (end - start);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          thread = _props2.thread,
          maxStackDepth = _props2.maxStackDepth,
          stackTimingByDepth = _props2.stackTimingByDepth,
          timeRange = _props2.timeRange,
          interval = _props2.interval,
          getCategory = _props2.getCategory,
          getLabel = _props2.getLabel,
          updateProfileSelection = _props2.updateProfileSelection,
          selection = _props2.selection,
          threadName = _props2.threadName,
          processDetails = _props2.processDetails;


      var maxViewportHeight = maxStackDepth * STACK_FRAME_HEIGHT;

      return _react2.default.createElement(
        'div',
        { className: 'stackChart' },
        _react2.default.createElement(_Settings2.default, null),
        _react2.default.createElement(
          'div',
          { className: 'stackChartGraph' },
          _react2.default.createElement(
            'div',
            { title: processDetails, className: 'stackChartLabels grippy' },
            _react2.default.createElement(
              'span',
              null,
              threadName
            )
          ),
          _react2.default.createElement(_Canvas2.default
          // ChartViewport props
          , { timeRange: timeRange,
            maxViewportHeight: maxViewportHeight,
            maximumZoom: this.getMaximumZoom(),
            selection: selection,
            updateProfileSelection: updateProfileSelection,
            viewportNeedsUpdate: viewportNeedsUpdate
            // StackChartCanvas props
            , interval: interval,
            thread: thread,
            rangeStart: timeRange.start,
            rangeEnd: timeRange.end,
            stackTimingByDepth: stackTimingByDepth,
            getCategory: getCategory,
            getLabel: getLabel,
            maxStackDepth: maxStackDepth,
            stackFrameHeight: STACK_FRAME_HEIGHT
          })
        )
      );
    }
  }]);
  return StackChartGraph;
}(_react.PureComponent);

exports.default = (0, _reactRedux.connect)(function (state) {
  var stackTimingByDepth = _profileView.selectedThreadSelectors.getStackTimingByDepthForStackChart(state);

  return {
    thread: _profileView.selectedThreadSelectors.getFilteredThreadForStackChart(state),
    maxStackDepth: _profileView.selectedThreadSelectors.getCallNodeMaxDepthForStackChart(state),
    stackTimingByDepth: stackTimingByDepth,
    timeRange: (0, _profileView.getDisplayRange)(state),
    interval: (0, _profileView.getProfileInterval)(state),
    getCategory: (0, _stackChart.getCategoryColorStrategy)(state),
    getLabel: (0, _stackChart.getLabelingStrategy)(state),
    selection: (0, _profileView.getProfileViewOptions)(state).selection,
    threadName: _profileView.selectedThreadSelectors.getFriendlyThreadName(state),
    processDetails: _profileView.selectedThreadSelectors.getThreadProcessDetails(state)
  };
}, { updateProfileSelection: _profileView2.updateProfileSelection })(StackChartGraph);


function viewportNeedsUpdate(prevProps, newProps) {
  return prevProps.stackTimingByDepth !== newProps.stackTimingByDepth;
}

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _Viewport = __webpack_require__(210);

var _Viewport2 = _interopRequireDefault(_Viewport);

var _Canvas = __webpack_require__(211);

var _Canvas2 = _interopRequireDefault(_Canvas);

var _textMeasurement = __webpack_require__(213);

var _textMeasurement2 = _interopRequireDefault(_textMeasurement);

var _formatNumbers = __webpack_require__(134);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(489); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var ROW_HEIGHT = 16;
var TEXT_OFFSET_START = 3;
var TEXT_OFFSET_TOP = 11;

var StackChartCanvas = function (_PureComponent) {
  (0, _inherits3.default)(StackChartCanvas, _PureComponent);

  function StackChartCanvas(props) {
    (0, _classCallCheck3.default)(this, StackChartCanvas);

    var _this = (0, _possibleConstructorReturn3.default)(this, (StackChartCanvas.__proto__ || Object.getPrototypeOf(StackChartCanvas)).call(this, props));

    _this._onDoubleClickStack = _this._onDoubleClickStack.bind(_this);
    _this._getHoveredStackInfo = _this._getHoveredStackInfo.bind(_this);
    _this._drawCanvas = _this._drawCanvas.bind(_this);
    _this._hitTest = _this._hitTest.bind(_this);
    return _this;
  }

  /**
   * Draw the canvas.
   *
   * Note that most of the units are not absolute values, but unit intervals ranged from
   * 0 - 1. This was done to make the calculations easier for computing various zoomed
   * and translated views independent of any particular scale. See
   * src/components/shared/chart/Viewport.js for a diagram detailing the various
   * components of this set-up.
   */


  (0, _createClass3.default)(StackChartCanvas, [{
    key: '_drawCanvas',
    value: function _drawCanvas(ctx, hoveredItem) {
      var _props = this.props,
          thread = _props.thread,
          rangeStart = _props.rangeStart,
          rangeEnd = _props.rangeEnd,
          containerWidth = _props.containerWidth,
          getLabel = _props.getLabel,
          containerHeight = _props.containerHeight,
          stackTimingByDepth = _props.stackTimingByDepth,
          stackFrameHeight = _props.stackFrameHeight,
          getCategory = _props.getCategory,
          viewportLeft = _props.viewportLeft,
          viewportRight = _props.viewportRight,
          viewportTop = _props.viewportTop,
          viewportBottom = _props.viewportBottom;

      // Ensure the text measurement tool is created, since this is the first time
      // this class has access to a ctx.

      if (!this._textMeasurement) {
        this._textMeasurement = new _textMeasurement2.default(ctx);
      }
      var textMeasurement = this._textMeasurement;

      ctx.clearRect(0, 0, containerWidth, containerHeight);

      var rangeLength = rangeEnd - rangeStart;
      var viewportLength = viewportRight - viewportLeft;

      // Convert CssPixels to Stack Depth
      var startDepth = Math.floor(viewportTop / stackFrameHeight);
      var endDepth = Math.ceil(viewportBottom / stackFrameHeight);

      // Only draw the stack frames that are vertically within view.
      for (var _depth = startDepth; _depth < endDepth; _depth++) {
        // Get the timing information for a row of stack frames.
        var stackTiming = stackTimingByDepth[_depth];

        if (!stackTiming) {
          continue;
        }
        /*
         * TODO - Do an O(log n) binary search to find the only samples in range rather than
         * linear O(n) search for loops. Profile the results to see if this helps at all.
         *
         * const startSampleIndex = binarySearch(stackTiming.start, rangeStart + rangeLength * viewportLeft);
         * const endSampleIndex = binarySearch(stackTiming.end, rangeStart + rangeLength * viewportRight);
         */

        // Decide which samples to actually draw
        var timeAtViewportLeft = rangeStart + rangeLength * viewportLeft;
        var timeAtViewportRight = rangeStart + rangeLength * viewportRight;

        for (var i = 0; i < stackTiming.length; i++) {
          // Only draw samples that are in bounds.
          if (stackTiming.end[i] > timeAtViewportLeft && stackTiming.start[i] < timeAtViewportRight) {
            var startTime = (stackTiming.start[i] - rangeStart) / rangeLength;
            var endTime = (stackTiming.end[i] - rangeStart) / rangeLength;

            var x = (startTime - viewportLeft) * containerWidth / viewportLength;
            var y = _depth * ROW_HEIGHT - viewportTop;
            var w = (endTime - startTime) * containerWidth / viewportLength;
            var h = ROW_HEIGHT - 1;

            if (w < 2) {
              // Skip sending draw calls for sufficiently small boxes.
              continue;
            }

            var stackIndex = stackTiming.stack[i];
            var frameIndex = thread.stackTable.frame[stackIndex];
            var text = getLabel(thread, stackIndex);
            var category = getCategory(thread, frameIndex);
            var isHovered = hoveredItem && _depth === hoveredItem.depth && i === hoveredItem.stackTableIndex;

            ctx.fillStyle = isHovered ? 'Highlight' : category.color;
            ctx.fillRect(x, y, w, h);
            // Ensure spacing between blocks.
            ctx.clearRect(x, y, 1, h);

            // TODO - L10N RTL.
            // Constrain the x coordinate to the leftmost area.
            var x2 = Math.max(x, 0) + TEXT_OFFSET_START;
            var w2 = Math.max(0, w - (x2 - x));

            if (w2 > textMeasurement.minWidth) {
              var fittedText = textMeasurement.getFittedText(text, w2);
              if (fittedText) {
                ctx.fillStyle = isHovered ? 'HighlightText' : '#000000';
                ctx.fillText(fittedText, x2, y + TEXT_OFFSET_TOP);
              }
            }
          }
        }
      }
    }
  }, {
    key: '_getHoveredStackInfo',
    value: function _getHoveredStackInfo(_ref) {
      var depth = _ref.depth,
          stackTableIndex = _ref.stackTableIndex;
      var _props2 = this.props,
          thread = _props2.thread,
          getLabel = _props2.getLabel,
          getCategory = _props2.getCategory,
          stackTimingByDepth = _props2.stackTimingByDepth,
          isRowExpanded = _props2.isRowExpanded;

      var stackTiming = stackTimingByDepth[depth];

      var duration = stackTiming.end[stackTableIndex] - stackTiming.start[stackTableIndex];

      var stackIndex = stackTiming.stack[stackTableIndex];
      var frameIndex = thread.stackTable.frame[stackIndex];
      var label = getLabel(thread, stackIndex);
      var category = getCategory(thread, frameIndex);
      var funcIndex = thread.frameTable.func[frameIndex];

      var resourceOrFileName = null;
      // Only show resources or filenames if the chart is expanded, as collapsed stacks
      // would show incorrect details about a group of stacks.
      if (isRowExpanded) {
        // Only JavaScript functions have a filename.
        var fileNameIndex = thread.funcTable.fileName[funcIndex];
        if (fileNameIndex !== null) {
          // Because of our use of Grid Layout, all our elements need to be direct
          // children of the grid parent. That's why we use arrays here, to add
          // the elements as direct children.
          resourceOrFileName = [_react2.default.createElement(
            'div',
            { className: 'tooltipLabel', key: 'file' },
            'File:'
          ), thread.stringTable.getString(fileNameIndex)];
        } else {
          var resourceIndex = thread.funcTable.resource[funcIndex];
          if (resourceIndex !== -1) {
            var resourceNameIndex = thread.resourceTable.name[resourceIndex];
            if (resourceNameIndex !== -1) {
              // Because of our use of Grid Layout, all our elements need to be direct
              // children of the grid parent. That's why we use arrays here, to add
              // the elements as direct children.
              resourceOrFileName = [_react2.default.createElement(
                'div',
                { className: 'tooltipLabel', key: 'resource' },
                'Resource:'
              ), thread.stringTable.getString(resourceNameIndex)];
            }
          }
        }
      }

      return _react2.default.createElement(
        'div',
        { className: 'stackChartCanvasTooltip' },
        _react2.default.createElement(
          'div',
          { className: 'tooltipOneLine tooltipHeader' },
          _react2.default.createElement(
            'div',
            { className: 'tooltipTiming' },
            (0, _formatNumbers.formatNumber)(duration),
            'ms'
          ),
          _react2.default.createElement(
            'div',
            { className: 'tooltipTitle' },
            label
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'tooltipDetails' },
          _react2.default.createElement(
            'div',
            { className: 'tooltipLabel' },
            'Category:'
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement('div', {
              className: 'tooltipSwatch',
              style: { backgroundColor: category.color }
            }),
            category.name
          ),
          resourceOrFileName
        )
      );
    }
  }, {
    key: '_onDoubleClickStack',
    value: function _onDoubleClickStack(hoveredItem) {
      if (hoveredItem === null) {
        return;
      }
      var depth = hoveredItem.depth,
          stackTableIndex = hoveredItem.stackTableIndex;
      var _props3 = this.props,
          stackTimingByDepth = _props3.stackTimingByDepth,
          updateProfileSelection = _props3.updateProfileSelection;

      updateProfileSelection({
        hasSelection: true,
        isModifying: false,
        selectionStart: stackTimingByDepth[depth].start[stackTableIndex],
        selectionEnd: stackTimingByDepth[depth].end[stackTableIndex]
      });
    }
  }, {
    key: '_hitTest',
    value: function _hitTest(x, y) {
      var _props4 = this.props,
          rangeStart = _props4.rangeStart,
          rangeEnd = _props4.rangeEnd,
          viewportLeft = _props4.viewportLeft,
          viewportRight = _props4.viewportRight,
          viewportTop = _props4.viewportTop,
          containerWidth = _props4.containerWidth,
          stackTimingByDepth = _props4.stackTimingByDepth;


      var rangeLength = rangeEnd - rangeStart;
      var viewportLength = viewportRight - viewportLeft;
      var unitIntervalTime = viewportLeft + viewportLength * (x / containerWidth);
      var time = rangeStart + unitIntervalTime * rangeLength;
      var depth = Math.floor((y + viewportTop) / ROW_HEIGHT);
      var stackTiming = stackTimingByDepth[depth];

      if (!stackTiming) {
        return null;
      }

      for (var i = 0; i < stackTiming.length; i++) {
        var start = stackTiming.start[i];
        var end = stackTiming.end[i];
        if (start < time && end > time) {
          return { depth: depth, stackTableIndex: i };
        }
      }

      return null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props,
          containerWidth = _props5.containerWidth,
          containerHeight = _props5.containerHeight,
          isDragging = _props5.isDragging;


      return _react2.default.createElement(_Canvas2.default, {
        className: 'stackChartCanvas',
        containerWidth: containerWidth,
        containerHeight: containerHeight,
        isDragging: isDragging,
        onDoubleClickItem: this._onDoubleClickStack,
        getHoveredItemInfo: this._getHoveredStackInfo,
        drawCanvas: this._drawCanvas,
        hitTest: this._hitTest
      });
    }
  }]);
  return StackChartCanvas;
}(_react.PureComponent);

exports.default = (0, _Viewport2.default)(StackChartCanvas);

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(484);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../node_modules/css-loader/index.js?minimize!./Viewport.css", function() {
			var newContent = require("!!../../../../node_modules/css-loader/index.js?minimize!./Viewport.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".chartViewport{flex:1;position:relative;margin-top:0;overflow:hidden}.chartViewport.expanded{cursor:-webkit-grab;cursor:grab;border-top:1px solid var(--grey-30);border-bottom:1px solid var(--grey-30);margin-bottom:5px}.chartViewport.expanded:after{content:\"\";pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%;box-shadow:inset 0 0 20px rgba(64,115,140,.2);z-index:1}.chartViewport.dragging{cursor:-webkit-grabbing;cursor:grabbing}.chartViewportShiftScroll{position:absolute;pointer-events:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;will-change:opacity,transform;bottom:0;right:0;padding:3px 10px;border-radius:5px 0 0 0;opacity:1;background:rgba(0,0,0,.07);line-height:20px;transition:transform .2s ease-in-out,opacity .2s ease-in-out;box-shadow:0 0 0 .5px rgba(0,0,0,.1),0 2px 4px rgba(0,0,0,.1)}.chartViewportShiftScroll.hidden{opacity:0;transform:translateY(30px)}.chartViewportShiftScrollKbd{background-color:#f6f6f6;border:1px solid #ccc;border-radius:.2em;display:inline-block;padding:0 .5em;box-shadow:.1em .1em 0 #bbb;margin:0 .2em;top:-1px;position:relative;color:#000}", ""]);

// exports


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(486);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./Tooltip.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./Tooltip.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".tooltipMount{pointer-events:none;z-index:1}.tooltip{position:fixed;max-width:100%;display:inline-block;padding:5px;border:1px solid #ccc;background-color:#f9f9f9;box-shadow:0 1px 3px rgba(0,0,0,.3);text-align:left;overflow:hidden;text-overflow:ellipsis;transition:opacity .25s;box-sizing:border-box}.tooltipTiming{padding-right:.5em;color:#666;font-weight:700}.tooltipOneLine{display:flex;max-width:100%;white-space:nowrap;text-overflow:ellipsis}.tooltipTitle{flex:1;text-overflow:ellipsis;overflow:hidden}.tooltipSwatch{width:10px;height:10px;display:inline-block;border:1px solid #888;margin-right:3px}.tooltipHeader{padding-bottom:5px;margin-bottom:5px;border-bottom:1px solid var(--grey-40)}.tooltipDetails{display:grid;grid-template-columns:min-content auto;grid-gap:2px 5px}.tooltipLabel{color:#666;white-space:nowrap;text-align:right}", ""]);

// exports


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(488);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../node_modules/css-loader/index.js?minimize!./Canvas.css", function() {
			var newContent = require("!!../../../../node_modules/css-loader/index.js?minimize!./Canvas.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".chartCanvas{position:absolute;top:0;left:0}.chartCanvas.hover{cursor:default}", ""]);

// exports


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(490);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./Canvas.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./Canvas.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".stackChartCanvas{position:absolute;top:0;left:0}.stackChartCanvasTooltip{padding:5px}", ""]);

// exports


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _urlState = __webpack_require__(15);

var _IdleSearchField = __webpack_require__(133);

var _IdleSearchField2 = _interopRequireDefault(_IdleSearchField);

__webpack_require__(492);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var StackChartSettings = function (_PureComponent) {
  (0, _inherits3.default)(StackChartSettings, _PureComponent);

  function StackChartSettings(props) {
    (0, _classCallCheck3.default)(this, StackChartSettings);

    var _this = (0, _possibleConstructorReturn3.default)(this, (StackChartSettings.__proto__ || Object.getPrototypeOf(StackChartSettings)).call(this, props));

    _this._onHidePlatformDetailsClick = _this._onHidePlatformDetailsClick.bind(_this);
    _this._onInvertCallstackClick = _this._onInvertCallstackClick.bind(_this);
    _this._onSearchFieldIdleAfterChange = _this._onSearchFieldIdleAfterChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(StackChartSettings, [{
    key: '_onHidePlatformDetailsClick',
    value: function _onHidePlatformDetailsClick(e) {
      this.props.changeHidePlatformDetails(e.target.checked);
    }
  }, {
    key: '_onInvertCallstackClick',
    value: function _onInvertCallstackClick(e) {
      this.props.changeInvertCallstack(e.target.checked);
    }
  }, {
    key: '_onSearchFieldIdleAfterChange',
    value: function _onSearchFieldIdleAfterChange(value) {
      this.props.changeCallTreeSearchString(value);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          hidePlatformDetails = _props.hidePlatformDetails,
          invertCallstack = _props.invertCallstack,
          searchString = _props.searchString;

      return _react2.default.createElement(
        'div',
        { className: 'stackChartSettings' },
        _react2.default.createElement(
          'ul',
          { className: 'stackChartSettingsList' },
          _react2.default.createElement(
            'li',
            { className: 'stackChartSettingsListItem' },
            _react2.default.createElement(
              'label',
              { className: 'stackChartSettingsLabel' },
              _react2.default.createElement('input', {
                type: 'checkbox',
                className: 'stackChartSettingsCheckbox',
                onChange: this._onHidePlatformDetailsClick,
                checked: hidePlatformDetails
              }),
              ' Hide platform details'
            )
          ),
          _react2.default.createElement(
            'li',
            { className: 'stackChartSettingsListItem' },
            _react2.default.createElement(
              'label',
              { className: 'stackChartSettingsLabel' },
              _react2.default.createElement('input', {
                type: 'checkbox',
                className: 'stackChartSettingsCheckbox',
                onChange: this._onInvertCallstackClick,
                checked: invertCallstack
              }),
              ' Invert call stack'
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'stackChartSettingsSearchbar' },
          _react2.default.createElement(
            'label',
            { className: 'stackChartSettingsSearchbarLabel' },
            'Filter stacks: ',
            _react2.default.createElement(_IdleSearchField2.default, {
              className: 'stackChartSettingsSearchField',
              title: 'Only display stacks which contain a function whose name matches this substring',
              idlePeriod: 200,
              defaultValue: searchString,
              onIdleAfterChange: this._onSearchFieldIdleAfterChange
            })
          )
        )
      );
    }
  }]);
  return StackChartSettings;
}(_react.PureComponent);

StackChartSettings.propTypes = {
  hidePlatformDetails: _react.PropTypes.bool.isRequired,
  changeHidePlatformDetails: _react.PropTypes.func.isRequired,
  invertCallstack: _react.PropTypes.bool.isRequired,
  changeInvertCallstack: _react.PropTypes.func.isRequired,
  changeCallTreeSearchString: _react.PropTypes.func.isRequired,
  searchString: _react.PropTypes.string.isRequired
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    invertCallstack: (0, _urlState.getInvertCallstack)(state),
    hidePlatformDetails: (0, _urlState.getHidePlatformDetails)(state),
    searchString: (0, _urlState.getSearchString)(state)
  };
}, _actions2.default)(StackChartSettings);

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(493);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./Settings.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./Settings.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".stackChartSettings{height:25px;padding:0;line-height:25px;display:flex;flex-flow:row nowrap}.stackChartSettingsList{display:block;flex:1;list-style:none;margin:0;padding:0}.stackChartSettingsListItem{display:inline-block;margin:0 5px;padding:0}.stackChartSettingsLabel{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:inline-flex;flex-flow:row nowrap;align-items:center}.stackChartSettingsCheckbox{margin:0 5px}.stackChartSettingsSearchbar{padding:0 10px}.stackChartSettingsSearchField{width:250px}", ""]);

// exports


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(495);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./index.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./index.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".stackChart{flex:1;display:flex;flex-flow:column;overflow:hidden}.stackChartGraph{display:flex;flex-direction:row;flex:1;border-top:1px solid var(--grey-30)}.stackChartLabels{width:121px;padding:9px 14px;border-right:1px solid var(--grey-30);-webkit-user-select:none;-moz-user-select:none;user-select:none}.stackChartLabels>span{flex:1;cursor:default;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}", ""]);

// exports


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _Canvas = __webpack_require__(497);

var _Canvas2 = _interopRequireDefault(_Canvas);

var _profileView = __webpack_require__(14);

var _profileView2 = __webpack_require__(23);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

__webpack_require__(500);


var ROW_HEIGHT = 16;

var MarkerChart = function (_PureComponent) {
  (0, _inherits3.default)(MarkerChart, _PureComponent);

  function MarkerChart() {
    (0, _classCallCheck3.default)(this, MarkerChart);
    return (0, _possibleConstructorReturn3.default)(this, (MarkerChart.__proto__ || Object.getPrototypeOf(MarkerChart)).apply(this, arguments));
  }

  (0, _createClass3.default)(MarkerChart, [{
    key: 'getMaximumZoom',


    /**
     * Determine the maximum zoom of the viewport.
     */
    value: function getMaximumZoom() {
      var _props = this.props,
          _props$timeRange = _props.timeRange,
          start = _props$timeRange.start,
          end = _props$timeRange.end,
          interval = _props.interval;

      return interval / (end - start);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          isRowExpanded = _props2.isRowExpanded,
          maxMarkerRows = _props2.maxMarkerRows,
          isSelected = _props2.isSelected,
          timeRange = _props2.timeRange,
          threadIndex = _props2.threadIndex,
          interval = _props2.interval,
          markerTimingRows = _props2.markerTimingRows,
          markers = _props2.markers,
          updateProfileSelection = _props2.updateProfileSelection,
          selection = _props2.selection,
          threadName = _props2.threadName,
          processDetails = _props2.processDetails;

      // The viewport needs to know about the height of what it's drawing, calculate
      // that here at the top level component.

      var maxViewportHeight = maxMarkerRows * ROW_HEIGHT;

      return _react2.default.createElement(
        'div',
        { className: 'markerChart' },
        _react2.default.createElement(
          'div',
          { className: 'markerChartLabels grippy', title: processDetails },
          _react2.default.createElement(
            'span',
            { className: 'markerChartLabelsName' },
            threadName
          )
        ),
        _react2.default.createElement(_Canvas2.default, {
          key: threadIndex
          // ChartViewport props
          , isRowExpanded: isRowExpanded,
          isSelected: isSelected,
          timeRange: timeRange,
          maxViewportHeight: maxViewportHeight,
          maximumZoom: this.getMaximumZoom(),
          selection: selection,
          updateProfileSelection: updateProfileSelection,
          viewportNeedsUpdate: viewportNeedsUpdate
          // MarkerChartCanvas props
          , interval: interval,
          rangeStart: timeRange.start,
          rangeEnd: timeRange.end,
          markerTimingRows: markerTimingRows,
          maxMarkerRows: maxMarkerRows,
          markers: markers,
          rowHeight: ROW_HEIGHT
        })
      );
    }
  }]);
  return MarkerChart;
}(_react.PureComponent);

function viewportNeedsUpdate(prevProps, newProps) {
  return prevProps.markerTimingRows !== newProps.markerTimingRows;
}

exports.default = (0, _reactRedux.connect)(function (state, ownProps) {
  var threadIndex = ownProps.threadIndex;

  var markers = _profileView.selectedThreadSelectors.getTracingMarkers(state);
  var markerTimingRows = _profileView.selectedThreadSelectors.getMarkerTiming(state);

  return {
    markers: markers,
    markerTimingRows: markerTimingRows,
    maxMarkerRows: markerTimingRows.length,
    timeRange: (0, _profileView.getDisplayRange)(state),
    interval: (0, _profileView.getProfileInterval)(state),
    threadIndex: threadIndex,
    selection: (0, _profileView.getProfileViewOptions)(state).selection,
    threadName: _profileView.selectedThreadSelectors.getFriendlyThreadName(state),
    processDetails: _profileView.selectedThreadSelectors.getThreadProcessDetails(state)
  };
}, { updateProfileSelection: _profileView2.updateProfileSelection })(MarkerChart);

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _Viewport = __webpack_require__(210);

var _Viewport2 = _interopRequireDefault(_Viewport);

var _Canvas = __webpack_require__(211);

var _Canvas2 = _interopRequireDefault(_Canvas);

var _MarkerTooltipContents = __webpack_require__(214);

var _MarkerTooltipContents2 = _interopRequireDefault(_MarkerTooltipContents);

var _textMeasurement = __webpack_require__(213);

var _textMeasurement2 = _interopRequireDefault(_textMeasurement);

var _colors = __webpack_require__(499);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var TEXT_OFFSET_TOP = 11;
var TWO_PI = Math.PI * 2;
var MARKER_DOT_RADIUS = 0.25;
var TEXT_OFFSET_START = 3;
var MARKER_LABEL_MAX_LENGTH = 30;

var MarkerChartCanvas = function (_PureComponent) {
  (0, _inherits3.default)(MarkerChartCanvas, _PureComponent);

  function MarkerChartCanvas(props) {
    (0, _classCallCheck3.default)(this, MarkerChartCanvas);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MarkerChartCanvas.__proto__ || Object.getPrototypeOf(MarkerChartCanvas)).call(this, props));

    _this.onDoubleClickMarker = _this.onDoubleClickMarker.bind(_this);
    _this.getHoveredMarkerInfo = _this.getHoveredMarkerInfo.bind(_this);
    _this.drawCanvas = _this.drawCanvas.bind(_this);
    _this.hitTest = _this.hitTest.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(MarkerChartCanvas, [{
    key: 'drawCanvas',
    value: function drawCanvas(ctx, hoveredItem) {
      var _props = this.props,
          viewportTop = _props.viewportTop,
          viewportBottom = _props.viewportBottom,
          rowHeight = _props.rowHeight,
          containerWidth = _props.containerWidth,
          containerHeight = _props.containerHeight,
          markerTimingRows = _props.markerTimingRows;
      // Convert CssPixels to Stack Depth

      var startRow = Math.floor(viewportTop / rowHeight);
      var endRow = Math.min(Math.ceil(viewportBottom / rowHeight), markerTimingRows.length);

      ctx.clearRect(0, 0, containerWidth, containerHeight);

      this.drawMarkers(ctx, hoveredItem, startRow, endRow);
      this.drawSeparatorsAndLabels(ctx, startRow, endRow);
    }

    // Note: we used a long argument list instead of an object parameter on
    // purpose, to reduce GC pressure while drawing.

  }, {
    key: 'drawOneMarker',
    value: function drawOneMarker(ctx, x, y, w, h, text) {
      var backgroundColor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _colors.BLUE_40;
      var foregroundColor = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'white';

      ctx.fillStyle = backgroundColor;

      // Ensure the text measurement tool is created, since this is the first time
      // this class has access to a ctx.
      if (!this._textMeasurement) {
        this._textMeasurement = new _textMeasurement2.default(ctx);
      }
      var textMeasurement = this._textMeasurement;

      if (w >= h) {
        // We want the rectangle to have a clear margin, that's why we increment y
        // and decrement h (twice, for both margins).
        this.drawRoundedRect(ctx, x, y + 1, w, h - 2, 1);

        // Draw the text label
        // TODO - L10N RTL.
        // Constrain the x coordinate to the leftmost area.
        var x2 = Math.max(x, 0) + TEXT_OFFSET_START;
        var w2 = Math.max(0, w - (x2 - x));

        if (w2 > textMeasurement.minWidth) {
          var fittedText = textMeasurement.getFittedText(text, w2);
          if (fittedText) {
            ctx.fillStyle = foregroundColor;
            ctx.fillText(fittedText, x2, y + TEXT_OFFSET_TOP);
          }
        }
      } else {
        ctx.beginPath();
        ctx.arc(x + w / 2, // x
        y + h / 2, // y
        h * MARKER_DOT_RADIUS, // radius
        0, // arc start
        TWO_PI // arc end
        );
        ctx.fill();
      }
    }
  }, {
    key: 'drawMarkers',
    value: function drawMarkers(ctx, hoveredItem, startRow, endRow) {
      var _props2 = this.props,
          rangeStart = _props2.rangeStart,
          rangeEnd = _props2.rangeEnd,
          containerWidth = _props2.containerWidth,
          markerTimingRows = _props2.markerTimingRows,
          rowHeight = _props2.rowHeight,
          viewportLeft = _props2.viewportLeft,
          viewportRight = _props2.viewportRight,
          viewportTop = _props2.viewportTop;


      var rangeLength = rangeEnd - rangeStart;
      var viewportLength = viewportRight - viewportLeft;

      ctx.lineWidth = 1;

      // Only draw the stack frames that are vertically within view.
      for (var rowIndex = startRow; rowIndex < endRow; rowIndex++) {
        // Get the timing information for a row of stack frames.
        var markerTiming = markerTimingRows[rowIndex];

        if (!markerTiming) {
          continue;
        }

        // Decide which samples to actually draw
        var timeAtViewportLeft = rangeStart + rangeLength * viewportLeft;
        var timeAtViewportRight = rangeStart + rangeLength * viewportRight;

        var hoveredElement = null;
        for (var i = 0; i < markerTiming.length; i++) {
          // Only draw samples that are in bounds.
          if (markerTiming.end[i] > timeAtViewportLeft && markerTiming.start[i] < timeAtViewportRight) {
            var startTime = (markerTiming.start[i] - rangeStart) / rangeLength;
            var endTime = (markerTiming.end[i] - rangeStart) / rangeLength;

            var _x3 = (startTime - viewportLeft) * containerWidth / viewportLength;
            var _y = rowIndex * rowHeight - viewportTop;
            var _w = Math.max(10, (endTime - startTime) * containerWidth / viewportLength);
            var _h = rowHeight - 1;

            var tracingMarkerIndex = markerTiming.index[i];
            var isHovered = hoveredItem === tracingMarkerIndex;
            var _text = markerTiming.label[i];
            if (isHovered) {
              hoveredElement = { x: _x3, y: _y, w: _w, h: _h, text: _text };
            } else {
              this.drawOneMarker(ctx, _x3, _y, _w, _h, _text);
            }
          }
          if (hoveredElement) {
            this.drawOneMarker(ctx, hoveredElement.x, hoveredElement.y, hoveredElement.w, hoveredElement.h, hoveredElement.text, 'Highlight', //    background color
            'HighlightText' // foreground color
            );
          }
        }
      }
    }
  }, {
    key: 'drawSeparatorsAndLabels',
    value: function drawSeparatorsAndLabels(ctx, startRow, endRow) {
      var _props3 = this.props,
          markerTimingRows = _props3.markerTimingRows,
          rowHeight = _props3.rowHeight,
          viewportTop = _props3.viewportTop,
          containerWidth = _props3.containerWidth;

      // Draw separators

      ctx.fillStyle = '#eee';
      for (var rowIndex = startRow; rowIndex < endRow; rowIndex++) {
        // `- 1` at the end, because the top separator is not drawn in the canvas,
        // it's drawn using CSS' border property. And canvas positioning is 0-based.
        var _y2 = (rowIndex + 1) * rowHeight - viewportTop - 1;
        ctx.fillRect(0, _y2, containerWidth, 1);
      }

      // Fill in behind text
      var gradient = ctx.createLinearGradient(0, 0, 150, 0);
      gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');
      gradient.addColorStop(1, 'rgba(255, 255, 255, 0.0)');
      ctx.fillStyle = gradient;
      for (var _rowIndex = startRow; _rowIndex < endRow; _rowIndex++) {
        // Get the timing information for a row of stack frames.
        var _y3 = _rowIndex * rowHeight - viewportTop;
        // `-1` because we only want to cover the row's inner surface.
        ctx.fillRect(0, _y3, 150, rowHeight - 1);
      }

      // Draw the text
      ctx.fillStyle = '#000000';
      for (var _rowIndex2 = startRow; _rowIndex2 < endRow; _rowIndex2++) {
        // Get the timing information for a row of stack frames.
        var name = markerTimingRows[_rowIndex2].name;

        if (_rowIndex2 > 0 && name === markerTimingRows[_rowIndex2 - 1].name) {
          continue;
        }
        var displayedName = name.length < MARKER_LABEL_MAX_LENGTH ? name : name.slice(0, MARKER_LABEL_MAX_LENGTH) + '…';
        var _y4 = _rowIndex2 * rowHeight - viewportTop;
        ctx.fillText(displayedName, 5, _y4 + TEXT_OFFSET_TOP);
      }
    }
  }, {
    key: 'hitTest',
    value: function hitTest(x, y) {
      var _props4 = this.props,
          rangeStart = _props4.rangeStart,
          rangeEnd = _props4.rangeEnd,
          markerTimingRows = _props4.markerTimingRows,
          viewportLeft = _props4.viewportLeft,
          viewportRight = _props4.viewportRight,
          viewportTop = _props4.viewportTop,
          containerWidth = _props4.containerWidth,
          rowHeight = _props4.rowHeight;


      var rangeLength = rangeEnd - rangeStart;
      var viewportLength = viewportRight - viewportLeft;
      var unitIntervalTime = viewportLeft + viewportLength * (x / containerWidth);
      var time = rangeStart + unitIntervalTime * rangeLength;
      var rowIndex = Math.floor((y + viewportTop) / rowHeight);
      var minDuration = rangeLength * viewportLength * (rowHeight * 2 * MARKER_DOT_RADIUS / containerWidth);
      var markerTiming = markerTimingRows[rowIndex];

      if (!markerTiming) {
        return null;
      }

      for (var i = 0; i < markerTiming.length; i++) {
        var start = markerTiming.start[i];
        // Ensure that really small markers are hoverable with a minDuration.
        var end = Math.max(start + minDuration, markerTiming.end[i]);
        if (start < time && end > time) {
          return markerTiming.index[i];
        }
      }
      return null;
    }
  }, {
    key: 'onDoubleClickMarker',
    value: function onDoubleClickMarker(markerIndex) {
      if (markerIndex === null) {
        return;
      }
      var _props5 = this.props,
          markers = _props5.markers,
          updateProfileSelection = _props5.updateProfileSelection;

      var marker = markers[markerIndex];
      updateProfileSelection({
        hasSelection: true,
        isModifying: false,
        selectionStart: marker.start,
        selectionEnd: marker.start + marker.dur
      });
    }
  }, {
    key: 'drawRoundedRect',
    value: function drawRoundedRect(ctx, x, y, width, height, cornerSize) {
      // Cut out c x c -sized squares in the corners.
      var c = Math.min(width / 2, height / 2, cornerSize);
      var bottom = y + height;
      ctx.fillRect(x + c, y, width - 2 * c, c);
      ctx.fillRect(x, y + c, width, height - 2 * c);
      ctx.fillRect(x + c, bottom - c, width - 2 * c, c);
    }
  }, {
    key: 'getHoveredMarkerInfo',
    value: function getHoveredMarkerInfo(hoveredItem) {
      var marker = this.props.markers[hoveredItem];
      return _react2.default.createElement(_MarkerTooltipContents2.default, { marker: marker });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          containerWidth = _props6.containerWidth,
          containerHeight = _props6.containerHeight,
          isDragging = _props6.isDragging;


      return _react2.default.createElement(_Canvas2.default, {
        className: 'markerChartCanvas',
        containerWidth: containerWidth,
        containerHeight: containerHeight,
        isDragging: isDragging,
        onDoubleClickItem: this.onDoubleClickMarker,
        getHoveredItemInfo: this.getHoveredMarkerInfo,
        drawCanvas: this.drawCanvas,
        hitTest: this.hitTest
      });
    }
  }]);
  return MarkerChartCanvas;
}(_react.PureComponent);

exports.default = (0, _Viewport2.default)(MarkerChartCanvas);

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});


/**
 * This is the description for various bailout marker events. It would be nice to keep
 * this up to date with Gecko. It might be possible to send this information with
 * the markers themselves. While it is still in the front-end, it can be updated with
 * porting a diff from this permalink:
 *
 * http://searchfox.org/mozilla-central/rev/a4702203522745baff21e519035b6c946b7d710d/js/src/jit/IonTypes.h
 */
var bailoutTypeInformation = exports.bailoutTypeInformation = {
  Bailout_Inevitable: 'An inevitable bailout (MBail instruction or type barrier that always bails)',
  Bailout_DuringVMCall: 'Bailing out during a VM call. Many possible causes that are hard ' + 'to distinguish statically at snapshot construction time. ' + 'We just lump them together.',
  Bailout_NonJSFunctionCallee: 'Call to a non-JSFunction (problem for |apply|)',
  Bailout_DynamicNameNotFound: 'Dynamic scope chain lookup produced |undefined|',
  Bailout_StringArgumentsEval: "Input string contains 'arguments' or 'eval'",
  Bailout_Overflow: "Bailout on overflow, but don't immediately invalidate. " + 'Used for abs, sub and LoadUnboxedScalar (when loading a uint32 that ' + "doesn't fit in an int32).",
  Bailout_Round: 'floor, ceiling and round bail if input is NaN, if output would be -0 or ' + "doesn't fit in int32 range",
  Bailout_NonPrimitiveInput: 'Non-primitive value used as input for ToDouble, ToInt32, ToString, etc. ' + "For ToInt32, can also mean that input can't be converted without precision " + 'loss (e.g. 5.5).',
  Bailout_PrecisionLoss: 'For ToInt32, would lose precision when converting (e.g. 5.5).',
  Bailout_TypeBarrierO: 'We tripped a type barrier (object was not in the expected TypeSet)',
  Bailout_TypeBarrierV: 'We tripped a type barrier (value was not in the expected TypeSet)',
  Bailout_MonitorTypes: 'We tripped a type monitor (wrote an unexpected type in a property)',
  Bailout_Hole: 'We hit a hole in an array.',
  Bailout_NegativeIndex: 'Array access with negative index',
  Bailout_ObjectIdentityOrTypeGuard: 'Pretty specific case:\n' + ' - need a type barrier on a property write\n' + ' - all but one of the observed types have property types that reflect the value\n' + " - we need to guard that we're not given an object of that one other type\n" + 'also used for the unused GuardClass instruction\n',
  Bailout_NonInt32Input: "Unbox expects a given type, bails out if it doesn't get it.",
  Bailout_NonNumericInput: "Unbox expects a given type, bails out if it doesn't get it. " + 'unboxing a double works with int32 too',
  Bailout_NonBooleanInput: "Unbox expects a given type, bails out if it doesn't get it.",
  Bailout_NonObjectInput: "Unbox expects a given type, bails out if it doesn't get it.",
  Bailout_NonStringInput: "Unbox expects a given type, bails out if it doesn't get it.",
  Bailout_NonSymbolInput: "Unbox expects a given type, bails out if it doesn't get it.",
  Bailout_UnexpectedSimdInput: "SIMD Unbox expects a given type, bails out if it doesn't match.",
  Bailout_NonSharedTypedArrayInput: 'Atomic operations require shared memory, bail out if the typed array ' + 'maps unshared memory.',
  Bailout_Debugger: 'We hit a |debugger;| statement.',
  Bailout_UninitializedThis: '|this| used uninitialized in a derived constructor',
  Bailout_BadDerivedConstructorReturn: 'Derived constructors must return object or undefined',
  Bailout_FirstExecution: 'We hit this code for the first time.',
  Bailout_OverflowInvalidate: 'Like Bailout_Overflow, but causes immediate invalidation.',
  Bailout_NonStringInputInvalidate: 'Like NonStringInput, but should cause immediate invalidation. ' + 'Used for jsop_iternext.',
  Bailout_DoubleOutput: 'Used for integer division, multiplication and modulo. ' + "If there's a remainder, bails to return a double. " + 'Can also signal overflow or result of -0. ' + 'Can also signal division by 0 (returns inf, a double).',
  Bailout_ArgumentCheck: 'A bailout at the very start of a function indicates that there may be ' + 'a type mismatch in the arguments that necessitates a reflow.',
  Bailout_BoundsCheck: 'A bailout triggered by a bounds-check failure.',
  Bailout_Detached: 'A bailout triggered by a typed object whose backing buffer was detached.',
  Bailout_ShapeGuard: 'A shape guard based on TI information failed. ' + '(We saw an object whose shape does not match that / any of those observed ' + 'by the baseline IC.)',
  Bailout_UninitializedLexical: "When we're trying to use an uninitialized lexical.",
  Bailout_IonExceptionDebugMode: 'A bailout to baseline from Ion on exception to handle Debugger hooks.'
};

/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


/**
 * These are the colors from Photon. They are inlined to provide easy access. If updating
 * please change the CSS variables as well.
 *
 * Firefox Colors v1.0.3
 * https://github.com/FirefoxUX/design-tokens/tree/master/colors
 */

var MAGENTA_50 = exports.MAGENTA_50 = '#ff1ad9';
var MAGENTA_60 = exports.MAGENTA_60 = '#ed00b5';
var MAGENTA_70 = exports.MAGENTA_70 = '#b5007f';
var MAGENTA_80 = exports.MAGENTA_80 = '#7d004f';
var MAGENTA_90 = exports.MAGENTA_90 = '#440027';

var PURPLE_50 = exports.PURPLE_50 = '#9400ff';
var PURPLE_60 = exports.PURPLE_60 = '#8000d7';
var PURPLE_70 = exports.PURPLE_70 = '#6200a4';
var PURPLE_80 = exports.PURPLE_80 = '#440071';
var PURPLE_90 = exports.PURPLE_90 = '#25003e';

var BLUE_40 = exports.BLUE_40 = '#45a1ff';
var BLUE_50 = exports.BLUE_50 = '#0a84ff';
var BLUE_60 = exports.BLUE_60 = '#0060df';
var BLUE_70 = exports.BLUE_70 = '#003eaa';
var BLUE_80 = exports.BLUE_80 = '#002275';
var BLUE_90 = exports.BLUE_90 = '#000f40';

var TEAL_50 = exports.TEAL_50 = '#00feff';
var TEAL_60 = exports.TEAL_60 = '#00c8d7';
var TEAL_70 = exports.TEAL_70 = '#008ea4';
var TEAL_80 = exports.TEAL_80 = '#005a71';
var TEAL_90 = exports.TEAL_90 = '#002d3e';

var GREEN_50 = exports.GREEN_50 = '#30e60b';
var GREEN_60 = exports.GREEN_60 = '#12bc00';
var GREEN_70 = exports.GREEN_70 = '#058b00';
var GREEN_80 = exports.GREEN_80 = '#006504';
var GREEN_90 = exports.GREEN_90 = '#003706';

var YELLOW_50 = exports.YELLOW_50 = '#ffe900';
var YELLOW_60 = exports.YELLOW_60 = '#d7b600';
var YELLOW_70 = exports.YELLOW_70 = '#a47f00';
var YELLOW_80 = exports.YELLOW_80 = '#715100';
var YELLOW_90 = exports.YELLOW_90 = '#3e2800';

var RED_50 = exports.RED_50 = '#ff0039';
var RED_60 = exports.RED_60 = '#d70022';
var RED_70 = exports.RED_70 = '#a4000f';
var RED_80 = exports.RED_80 = '#5a0002';
var RED_90 = exports.RED_90 = '#3e0200';

var ORANGE_50 = exports.ORANGE_50 = '#ff9400';
var ORANGE_60 = exports.ORANGE_60 = '#d76e00';
var ORANGE_70 = exports.ORANGE_70 = '#a44900';
var ORANGE_80 = exports.ORANGE_80 = '#712b00';
var ORANGE_90 = exports.ORANGE_90 = '#3e1300';

var GREY_10 = exports.GREY_10 = '#f9f9fa';
var GREY_20 = exports.GREY_20 = '#ededf0';
var GREY_30 = exports.GREY_30 = '#d7d7db';
var GREY_40 = exports.GREY_40 = '#b1b1b3';
var GREY_50 = exports.GREY_50 = '#737373';
var GREY_60 = exports.GREY_60 = '#4a4a4f';
var GREY_70 = exports.GREY_70 = '#38383d';
var GREY_80 = exports.GREY_80 = '#2a2a2e';
var GREY_90 = exports.GREY_90 = '#0c0c0d';

var INK_70 = exports.INK_70 = '#363959';
var INK_80 = exports.INK_80 = '#202340';
var INK_90 = exports.INK_90 = '#0f1126';

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(501);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./index.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./index.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".markerChart{display:flex;flex-direction:row;flex:1}.markerChartLabels{width:135px;display:flex;padding:9px 0 9px 14px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markerChartLabelsName{flex:1;cursor:default;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}", ""]);

// exports


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _ProfileThreadHeaderBar = __webpack_require__(503);

var _ProfileThreadHeaderBar2 = _interopRequireDefault(_ProfileThreadHeaderBar);

var _Reorderable = __webpack_require__(195);

var _Reorderable2 = _interopRequireDefault(_Reorderable);

var _TimeSelectionScrubber = __webpack_require__(507);

var _TimeSelectionScrubber2 = _interopRequireDefault(_TimeSelectionScrubber);

var _OverflowEdgeIndicator = __webpack_require__(511);

var _OverflowEdgeIndicator2 = _interopRequireDefault(_OverflowEdgeIndicator);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _profileView2 = __webpack_require__(23);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProfileViewerHeader = function (_PureComponent) {
  (0, _inherits3.default)(ProfileViewerHeader, _PureComponent);

  function ProfileViewerHeader(props) {
    (0, _classCallCheck3.default)(this, ProfileViewerHeader);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileViewerHeader.__proto__ || Object.getPrototypeOf(ProfileViewerHeader)).call(this, props));

    _this._onZoomButtonClick = _this._onZoomButtonClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ProfileViewerHeader, [{
    key: '_onZoomButtonClick',
    value: function _onZoomButtonClick(start, end) {
      var _props = this.props,
          addRangeFilterAndUnsetSelection = _props.addRangeFilterAndUnsetSelection,
          zeroAt = _props.zeroAt;

      addRangeFilterAndUnsetSelection(start - zeroAt, end - zeroAt);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          profile = _props2.profile,
          className = _props2.className,
          threadOrder = _props2.threadOrder,
          changeThreadOrder = _props2.changeThreadOrder,
          selection = _props2.selection,
          timeRange = _props2.timeRange,
          zeroAt = _props2.zeroAt,
          hiddenThreads = _props2.hiddenThreads,
          updateProfileSelection = _props2.updateProfileSelection;

      var threads = profile.threads;

      return _react2.default.createElement(
        _TimeSelectionScrubber2.default,
        {
          className: className + 'Header',
          zeroAt: zeroAt,
          rangeStart: timeRange.start,
          rangeEnd: timeRange.end,
          minSelectionStartWidth: profile.meta.interval,
          selection: selection,
          onSelectionChange: updateProfileSelection,
          onZoomButtonClick: this._onZoomButtonClick
        },
        _react2.default.createElement(
          _OverflowEdgeIndicator2.default,
          {
            className: className + 'HeaderOverflowEdgeIndicator'
          },
          _react2.default.createElement(
            _Reorderable2.default,
            {
              tagName: 'ol',
              className: className + 'HeaderThreadList',
              order: threadOrder,
              orient: 'vertical',
              onChangeOrder: changeThreadOrder
            },
            threads.map(function (thread, threadIndex) {
              return _react2.default.createElement(_ProfileThreadHeaderBar2.default, {
                key: threadIndex,
                index: threadIndex,
                interval: profile.meta.interval,
                rangeStart: timeRange.start,
                rangeEnd: timeRange.end,
                isHidden: hiddenThreads.includes(threadIndex),
                isModifyingSelection: selection.isModifying
              });
            })
          )
        )
      );
    }
  }]);
  return ProfileViewerHeader;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    profile: (0, _profileView.getProfile)(state),
    selection: (0, _profileView.getProfileViewOptions)(state).selection,
    className: 'profileViewer',
    visibleThreadOrder: (0, _urlState.getVisibleThreadOrder)(state),
    threadOrder: (0, _urlState.getThreadOrder)(state),
    hiddenThreads: (0, _urlState.getHiddenThreads)(state),
    timeRange: (0, _profileView.getDisplayRange)(state),
    zeroAt: (0, _profileView.getZeroAt)(state)
  };
}, {
  changeThreadOrder: _profileView2.changeThreadOrder,
  updateProfileSelection: _profileView2.updateProfileSelection,
  addRangeFilterAndUnsetSelection: _profileView2.addRangeFilterAndUnsetSelection,
  changeSelectedThread: _profileView2.changeSelectedThread
})(ProfileViewerHeader);

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _ThreadStackGraph = __webpack_require__(504);

var _ThreadStackGraph2 = _interopRequireDefault(_ThreadStackGraph);

var _profileView = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _profileData = __webpack_require__(19);

var _actions = __webpack_require__(29);

var _actions2 = _interopRequireDefault(_actions);

var _ContextMenuTrigger = __webpack_require__(200);

var _ContextMenuTrigger2 = _interopRequireDefault(_ContextMenuTrigger);

var _ProfileThreadJankOverview = __webpack_require__(505);

var _ProfileThreadJankOverview2 = _interopRequireDefault(_ProfileThreadJankOverview);

var _ProfileThreadTracingMarkerOverview = __webpack_require__(506);

var _ProfileThreadTracingMarkerOverview2 = _interopRequireDefault(_ProfileThreadTracingMarkerOverview);

var _profileView2 = __webpack_require__(23);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProfileThreadHeaderBar = function (_PureComponent) {
  (0, _inherits3.default)(ProfileThreadHeaderBar, _PureComponent);

  function ProfileThreadHeaderBar(props) {
    (0, _classCallCheck3.default)(this, ProfileThreadHeaderBar);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileThreadHeaderBar.__proto__ || Object.getPrototypeOf(ProfileThreadHeaderBar)).call(this, props));

    _this._onLabelMouseDown = _this._onLabelMouseDown.bind(_this);
    _this._onGraphClick = _this._onGraphClick.bind(_this);
    _this._onLineClick = _this._onLineClick.bind(_this);
    _this._onMarkerSelect = _this._onMarkerSelect.bind(_this);
    _this._onIntervalMarkerSelect = _this._onIntervalMarkerSelect.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ProfileThreadHeaderBar, [{
    key: '_onLabelMouseDown',
    value: function _onLabelMouseDown(event) {
      if (event.button === 0) {
        var _props = this.props,
            _changeSelectedThread = _props.changeSelectedThread,
            _threadIndex = _props.threadIndex;

        _changeSelectedThread(_threadIndex);

        // Don't allow clicks on the threads list to steal focus from the tree view.
        event.preventDefault();
      }
    }
  }, {
    key: '_onLineClick',
    value: function _onLineClick() {
      var _props2 = this.props,
          threadIndex = _props2.threadIndex,
          changeSelectedThread = _props2.changeSelectedThread;

      changeSelectedThread(threadIndex);
    }
  }, {
    key: '_onGraphClick',
    value: function _onGraphClick(time) {
      var _props3 = this.props,
          threadIndex = _props3.threadIndex,
          interval = _props3.interval;

      if (time !== undefined) {
        var _props4 = this.props,
            _thread = _props4.thread,
            _callNodeInfo = _props4.callNodeInfo,
            _changeSelectedCallNode = _props4.changeSelectedCallNode;

        var sampleIndex = (0, _profileData.getSampleIndexClosestToTime)(_thread.samples, time, interval);
        var newSelectedStack = _thread.samples.stack[sampleIndex];
        var newSelectedCallNode = newSelectedStack === null ? -1 : _callNodeInfo.stackIndexToCallNodeIndex[newSelectedStack];
        _changeSelectedCallNode(threadIndex, (0, _profileData.getCallNodePath)(newSelectedCallNode, _callNodeInfo.callNodeTable));
      }
    }
  }, {
    key: '_onIntervalMarkerSelect',
    value: function _onIntervalMarkerSelect(threadIndex, start, end) {
      var _props5 = this.props,
          rangeStart = _props5.rangeStart,
          rangeEnd = _props5.rangeEnd,
          updateProfileSelection = _props5.updateProfileSelection,
          changeSelectedThread = _props5.changeSelectedThread;

      updateProfileSelection({
        hasSelection: true,
        isModifying: false,
        selectionStart: Math.max(rangeStart, start),
        selectionEnd: Math.min(rangeEnd, end)
      });
      changeSelectedThread(threadIndex);
    }
  }, {
    key: '_onMarkerSelect',
    value: function _onMarkerSelect() /* markerIndex */{}
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          thread = _props6.thread,
          threadIndex = _props6.threadIndex,
          interval = _props6.interval,
          rangeStart = _props6.rangeStart,
          rangeEnd = _props6.rangeEnd,
          callNodeInfo = _props6.callNodeInfo,
          selectedCallNodeIndex = _props6.selectedCallNodeIndex,
          isSelected = _props6.isSelected,
          style = _props6.style,
          threadName = _props6.threadName,
          processDetails = _props6.processDetails,
          isHidden = _props6.isHidden,
          isModifyingSelection = _props6.isModifyingSelection;


      if (isHidden) {
        // If this thread is hidden, render out a stub element so that the Reorderable
        // Component still works across all the threads.
        return _react2.default.createElement('li', { className: 'profileThreadHeaderBarHidden' });
      }

      var processType = thread.processType;
      var displayJank = thread.name === 'GeckoMain' && processType !== 'plugin';
      var displayTracingMarkers = (thread.name === 'GeckoMain' || thread.name === 'Compositor' || thread.name === 'Renderer') && processType !== 'plugin';
      var className = 'profileThreadHeaderBar';

      return _react2.default.createElement(
        'li',
        {
          className: 'profileThreadHeaderBar' + (isSelected ? ' selected' : ''),
          onClick: this._onLineClick,
          style: style
        },
        _react2.default.createElement(
          _ContextMenuTrigger2.default,
          {
            id: 'ProfileThreadHeaderContextMenu',
            renderTag: 'div',
            attributes: {
              title: processDetails,
              className: 'grippy profileThreadHeaderBarThreadLabel',
              onMouseDown: this._onLabelMouseDown
            }
          },
          _react2.default.createElement(
            'h1',
            { className: 'profileThreadHeaderBarThreadName' },
            threadName
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'profileThreadHeaderBarThreadDetails' },
          displayJank ? _react2.default.createElement(_ProfileThreadJankOverview2.default, {
            className: className + 'IntervalMarkerOverview ' + className + 'IntervalMarkerOverviewJank',
            rangeStart: rangeStart,
            rangeEnd: rangeEnd,
            threadIndex: threadIndex,
            onSelect: this._onIntervalMarkerSelect,
            isModifyingSelection: isModifyingSelection
          }) : null,
          displayTracingMarkers ? _react2.default.createElement(_ProfileThreadTracingMarkerOverview2.default, {
            className: className + 'IntervalMarkerOverview ' + className + 'IntervalMarkerOverviewGfx ' + className + 'IntervalMarkerOverviewThread' + thread.name,
            rangeStart: rangeStart,
            rangeEnd: rangeEnd,
            threadIndex: threadIndex,
            onSelect: this._onIntervalMarkerSelect,
            isModifyingSelection: isModifyingSelection
          }) : null,
          _react2.default.createElement(_ThreadStackGraph2.default, {
            interval: interval,
            thread: thread,
            className: 'threadStackGraph',
            rangeStart: rangeStart,
            rangeEnd: rangeEnd,
            callNodeInfo: callNodeInfo,
            selectedCallNodeIndex: selectedCallNodeIndex,
            onClick: this._onGraphClick,
            onMarkerSelect: this._onMarkerSelect
          })
        )
      );
    }
  }]);
  return ProfileThreadHeaderBar;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = (0, _reactRedux.connect)(function (state, props) {
  var threadIndex = props.index;
  var selectors = (0, _profileView.selectorsForThread)(threadIndex);
  var selectedThread = (0, _urlState.getSelectedThreadIndex)(state);
  return {
    thread: selectors.getFilteredThread(state),
    threadName: selectors.getFriendlyThreadName(state),
    processDetails: selectors.getThreadProcessDetails(state),
    callNodeInfo: selectors.getCallNodeInfo(state),
    selectedCallNodeIndex: threadIndex === selectedThread ? selectors.getSelectedCallNodeIndex(state) : -1,
    isSelected: threadIndex === selectedThread,
    threadIndex: threadIndex
  };
}, _actions2.default)(ProfileThreadHeaderBar);

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _timeCode = __webpack_require__(45);

var _profileData = __webpack_require__(19);

var _photonColors = __webpack_require__(128);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ThreadStackGraph = function (_PureComponent) {
  (0, _inherits3.default)(ThreadStackGraph, _PureComponent);

  function ThreadStackGraph(props) {
    (0, _classCallCheck3.default)(this, ThreadStackGraph);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ThreadStackGraph.__proto__ || Object.getPrototypeOf(ThreadStackGraph)).call(this, props));

    _this._resizeListener = function () {
      return _this.forceUpdate();
    };
    _this._requestedAnimationFrame = false;
    _this._onMouseUp = _this._onMouseUp.bind(_this);
    _this._onMarkerSelected = _this._onMarkerSelected.bind(_this);
    _this._canvas = null;
    return _this;
  }

  (0, _createClass3.default)(ThreadStackGraph, [{
    key: '_scheduleDraw',
    value: function _scheduleDraw() {
      var _this2 = this;

      if (!this._requestedAnimationFrame) {
        this._requestedAnimationFrame = true;
        window.requestAnimationFrame(function () {
          _this2._requestedAnimationFrame = false;
          if (_this2._canvas) {
            (0, _timeCode.timeCode)('ThreadStackGraph render', function () {
              _this2.drawCanvas(_this2._canvas);
            });
          }
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this._resizeListener);
      this.forceUpdate(); // for initial size
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this._resizeListener);
    }
  }, {
    key: 'drawCanvas',
    value: function drawCanvas(c) {
      var _props = this.props,
          thread = _props.thread,
          interval = _props.interval,
          rangeStart = _props.rangeStart,
          rangeEnd = _props.rangeEnd,
          callNodeInfo = _props.callNodeInfo,
          selectedCallNodeIndex = _props.selectedCallNodeIndex;


      var devicePixelRatio = c.ownerDocument ? c.ownerDocument.defaultView.devicePixelRatio : 1;
      var r = c.getBoundingClientRect();
      c.width = Math.round(r.width * devicePixelRatio);
      c.height = Math.round(r.height * devicePixelRatio);
      var ctx = c.getContext('2d');
      var maxDepth = 0;
      var callNodeTable = callNodeInfo.callNodeTable,
          stackIndexToCallNodeIndex = callNodeInfo.stackIndexToCallNodeIndex;

      var sampleCallNodes = (0, _profileData.getSampleCallNodes)(thread.samples, stackIndexToCallNodeIndex);
      for (var i = 0; i < callNodeTable.depth.length; i++) {
        if (callNodeTable.depth[i] > maxDepth) {
          maxDepth = callNodeTable.depth[i];
        }
      }
      var range = [rangeStart, rangeEnd];
      var rangeLength = range[1] - range[0];
      var xPixelsPerMs = c.width / rangeLength;
      var yPixelsPerDepth = c.height / maxDepth;
      var trueIntervalPixelWidth = interval * xPixelsPerMs;
      var multiplier = trueIntervalPixelWidth < 2.0 ? 1.2 : 1.0;
      var drawnIntervalWidth = Math.max(0.8, trueIntervalPixelWidth * multiplier);
      var selectedCallNodeDepth = 0;
      if (selectedCallNodeIndex !== -1 && selectedCallNodeIndex !== null) {
        selectedCallNodeDepth = callNodeTable.depth[selectedCallNodeIndex];
      }
      function hasSelectedCallNodePrefix(callNodePrefix) {
        var callNode = callNodePrefix;
        for (var depth = callNodeTable.depth[callNode]; depth > selectedCallNodeDepth; depth--) {
          callNode = callNodeTable.prefix[callNode];
        }
        return callNode === selectedCallNodeIndex;
      }
      for (var _i = 0; _i < sampleCallNodes.length; _i++) {
        var sampleTime = thread.samples.time[_i];
        if (sampleTime + drawnIntervalWidth / xPixelsPerMs < range[0] || sampleTime > range[1]) {
          continue;
        }
        var callNode = sampleCallNodes[_i];
        var isHighlighted = hasSelectedCallNodePrefix(callNode);
        var sampleHeight = callNodeTable.depth[callNode] * yPixelsPerDepth;
        var startY = c.height - sampleHeight;
        // const responsiveness = thread.samples.responsiveness[i];
        // const jankSeverity = Math.min(1, responsiveness / 100);
        ctx.fillStyle = isHighlighted ? _photonColors.BLUE_70 : _photonColors.BLUE_40;
        ctx.fillRect((sampleTime - range[0]) * xPixelsPerMs, startY, drawnIntervalWidth, sampleHeight);
      }
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp(e) {
      if (this.props.onClick) {
        var _props2 = this.props,
            rangeStart = _props2.rangeStart,
            rangeEnd = _props2.rangeEnd;

        var r = this._canvas.getBoundingClientRect();

        var x = e.pageX - r.left;
        var time = rangeStart + x / r.width * (rangeEnd - rangeStart);
        this.props.onClick(time);
      }
    }
  }, {
    key: '_onMarkerSelected',
    value: function _onMarkerSelected(markerIndex) {
      if (this.props.onMarkerSelect) {
        this.props.onMarkerSelect(markerIndex);
      }
      this.props.onClick();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      this._scheduleDraw();
      return _react2.default.createElement(
        'div',
        { className: this.props.className },
        _react2.default.createElement('canvas', {
          className: (0, _classnames2.default)(this.props.className + 'Canvas', 'threadStackGraphCanvas'),
          ref: function ref(_ref) {
            return _this3._canvas = _ref;
          },
          onMouseUp: this._onMouseUp
        })
      );
    }
  }]);
  return ThreadStackGraph;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

ThreadStackGraph.propTypes = {
  thread: _react.PropTypes.shape({
    samples: _react.PropTypes.object.isRequired
  }).isRequired,
  interval: _react.PropTypes.number.isRequired,
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired,
  callNodeInfo: _react.PropTypes.shape({
    callNodeTable: _react.PropTypes.object.isRequired,
    stackIndexToCallNodeIndex: _react.PropTypes.any.isRequired
  }).isRequired,
  selectedCallNodeIndex: _react.PropTypes.number,
  className: _react.PropTypes.string,
  onClick: _react.PropTypes.func,
  onMarkerSelect: _react.PropTypes.func
};

exports.default = ThreadStackGraph;

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__(9);

var _IntervalMarkerOverview = __webpack_require__(215);

var _IntervalMarkerOverview2 = _interopRequireDefault(_IntervalMarkerOverview);

var _profileView = __webpack_require__(14);

var _intervalMarkerStyles = __webpack_require__(216);

var _urlState = __webpack_require__(15);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(function (state, props) {
  var threadIndex = props.threadIndex;

  var selectors = (0, _profileView.selectorsForThread)(threadIndex);
  var threadName = selectors.getFriendlyThreadName(state);
  var selectedThread = (0, _urlState.getSelectedThreadIndex)(state);
  return {
    intervalMarkers: selectors.getJankInstances(state),
    isSelected: threadIndex === selectedThread,
    threadName: threadName,
    styles: _intervalMarkerStyles.styles,
    overlayFills: _intervalMarkerStyles.overlayFills
  };
})(_IntervalMarkerOverview2.default); /* This Source Code Form is subject to the terms of the Mozilla Public
                                       * License, v. 2.0. If a copy of the MPL was not distributed with this
                                       * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__(9);

var _IntervalMarkerOverview = __webpack_require__(215);

var _IntervalMarkerOverview2 = _interopRequireDefault(_IntervalMarkerOverview);

var _profileView = __webpack_require__(14);

var _intervalMarkerStyles = __webpack_require__(216);

var _urlState = __webpack_require__(15);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(function (state, props) {
  var threadIndex = props.threadIndex;

  var selectors = (0, _profileView.selectorsForThread)(threadIndex);
  var selectedThread = (0, _urlState.getSelectedThreadIndex)(state);
  var intervalMarkers = selectors.getRangeSelectionFilteredTracingMarkersForHeader(state);
  return {
    intervalMarkers: intervalMarkers,
    threadName: selectors.getFriendlyThreadName(state),
    isSelected: threadIndex === selectedThread,
    styles: _intervalMarkerStyles.styles,
    overlayFills: _intervalMarkerStyles.overlayFills
  };
})(_IntervalMarkerOverview2.default); /* This Source Code Form is subject to the terms of the Mozilla Public
                                       * License, v. 2.0. If a copy of the MPL was not distributed with this
                                       * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _TimeRuler = __webpack_require__(508);

var _TimeRuler2 = _interopRequireDefault(_TimeRuler);

var _SelectionScrubberOverlay = __webpack_require__(509);

var _SelectionScrubberOverlay2 = _interopRequireDefault(_SelectionScrubberOverlay);

var _clamp = __webpack_require__(130);

var _clamp2 = _interopRequireDefault(_clamp);

var _cssGeometryTools = __webpack_require__(196);

var _WithSize = __webpack_require__(135);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var TimeSelectionScrubberImpl = function (_PureComponent) {
  (0, _inherits3.default)(TimeSelectionScrubberImpl, _PureComponent);

  function TimeSelectionScrubberImpl(props) {
    (0, _classCallCheck3.default)(this, TimeSelectionScrubberImpl);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TimeSelectionScrubberImpl.__proto__ || Object.getPrototypeOf(TimeSelectionScrubberImpl)).call(this, props));

    _this.state = {
      hoverLocation: null
    };
    _this._onMouseDown = _this._onMouseDown.bind(_this);
    _this._onMouseMove = _this._onMouseMove.bind(_this);
    _this.handlers = null;
    _this._container = null;
    _this._containerCreated = function (c) {
      _this._container = c;
    };
    return _this;
  }

  (0, _createClass3.default)(TimeSelectionScrubberImpl, [{
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      var _this2 = this;

      if (!this._container || e.button !== 0) {
        return;
      }

      var r = (0, _cssGeometryTools.getContentRect)(this._container);
      if (e.pageX < r.left || e.pageX >= r.right || e.pageY < r.top || e.pageY >= r.bottom) {
        return;
      }

      // Don't steal focus. The -moz-user-focus: ignore declaration achieves
      // this more reliably in Gecko, so this preventDefault is mostly for other
      // browsers.
      e.preventDefault();

      var _props = this.props,
          rangeStart = _props.rangeStart,
          rangeEnd = _props.rangeEnd,
          minSelectionStartWidth = _props.minSelectionStartWidth;

      var mouseDownTime = (e.pageX - r.left) / r.width * (rangeEnd - rangeStart) + rangeStart;

      var isRangeSelecting = false;

      var mouseMoveHandler = function mouseMoveHandler(e) {
        var mouseMoveTime = (e.pageX - r.left) / r.width * (rangeEnd - rangeStart) + rangeStart;
        var selectionStart = (0, _clamp2.default)(Math.min(mouseDownTime, mouseMoveTime), rangeStart, rangeEnd);
        var selectionEnd = (0, _clamp2.default)(Math.max(mouseDownTime, mouseMoveTime), rangeStart, rangeEnd);
        if (isRangeSelecting || selectionEnd - selectionStart >= minSelectionStartWidth) {
          isRangeSelecting = true;
          _this2.props.onSelectionChange({
            hasSelection: true,
            selectionStart: selectionStart,
            selectionEnd: selectionEnd,
            isModifying: true
          });
        }
      };

      var mouseUpHandler = function mouseUpHandler(e) {
        if (isRangeSelecting) {
          var mouseMoveTime = (e.pageX - r.left) / r.width * (rangeEnd - rangeStart) + rangeStart;
          var selectionStart = (0, _clamp2.default)(Math.min(mouseDownTime, mouseMoveTime), rangeStart, rangeEnd);
          var selectionEnd = (0, _clamp2.default)(Math.max(mouseDownTime, mouseMoveTime), rangeStart, rangeEnd);
          _this2.props.onSelectionChange({
            hasSelection: true,
            selectionStart: selectionStart,
            selectionEnd: selectionEnd,
            isModifying: false
          });
          e.stopPropagation();
          _this2._uninstallMoveAndUpHandlers();
          return;
        }

        var selection = _this2.props.selection;

        if (selection.hasSelection) {
          var mouseUpTime = (e.pageX - r.left) / r.width * (rangeEnd - rangeStart) + rangeStart;
          var _selectionStart = selection.selectionStart,
              _selectionEnd = selection.selectionEnd;

          if (mouseUpTime < _selectionStart || mouseUpTime >= _selectionEnd) {
            // Unset selection.
            _this2.props.onSelectionChange({
              hasSelection: false,
              isModifying: false
            });
          }
        }

        // Do not stopPropagation(), so that graph gets mouseup event.
        _this2._uninstallMoveAndUpHandlers();
      };

      this._installMoveAndUpHandlers(mouseMoveHandler, mouseUpHandler);
    }
  }, {
    key: '_installMoveAndUpHandlers',
    value: function _installMoveAndUpHandlers(mouseMoveHandler, mouseUpHandler) {
      this._handlers = { mouseMoveHandler: mouseMoveHandler, mouseUpHandler: mouseUpHandler };
      window.addEventListener('mousemove', mouseMoveHandler, true);
      window.addEventListener('mouseup', mouseUpHandler, true);
    }
  }, {
    key: '_uninstallMoveAndUpHandlers',
    value: function _uninstallMoveAndUpHandlers() {
      if (this._handlers) {
        var _handlers = this._handlers,
            mouseMoveHandler = _handlers.mouseMoveHandler,
            mouseUpHandler = _handlers.mouseUpHandler;

        window.removeEventListener('mousemove', mouseMoveHandler, true);
        window.removeEventListener('mouseup', mouseUpHandler, true);
      }
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(e) {
      if (!this._container) {
        return;
      }

      var r = (0, _cssGeometryTools.getContentRect)(this._container);
      if (e.pageX < r.left || e.pageX >= r.right || e.pageY < r.top || e.pageY >= r.bottom) {
        this.setState({ hoverLocation: null });
      } else {
        this.setState({ hoverLocation: e.pageX - r.left });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          zeroAt = _props2.zeroAt,
          rangeStart = _props2.rangeStart,
          rangeEnd = _props2.rangeEnd,
          children = _props2.children,
          selection = _props2.selection,
          width = _props2.width,
          onSelectionChange = _props2.onSelectionChange,
          onZoomButtonClick = _props2.onZoomButtonClick;
      var hoverLocation = this.state.hoverLocation;


      return _react2.default.createElement(
        'div',
        {
          className: className,
          ref: this._containerCreated,
          onMouseDown: this._onMouseDown,
          onMouseMove: this._onMouseMove
        },
        _react2.default.createElement(_TimeRuler2.default, {
          className: className + 'TimeRuler',
          zeroAt: zeroAt,
          rangeStart: rangeStart,
          rangeEnd: rangeEnd,
          width: width
        }),
        children,
        selection.hasSelection ? _react2.default.createElement(_SelectionScrubberOverlay2.default, {
          rangeStart: rangeStart,
          rangeEnd: rangeEnd,
          selectionStart: selection.selectionStart,
          selectionEnd: selection.selectionEnd,
          isModifying: selection.isModifying,
          width: width,
          onSelectionChange: onSelectionChange,
          onZoomButtonClick: onZoomButtonClick
        }) : null,
        _react2.default.createElement('div', {
          className: 'timeSelectionScrubberHoverIndicator',
          style: {
            visibility: selection.isModifying || hoverLocation === null ? 'hidden' : undefined,
            left: hoverLocation === null ? '0' : hoverLocation + 'px'
          }
        })
      );
    }
  }]);
  return TimeSelectionScrubberImpl;
}(_react.PureComponent);

TimeSelectionScrubberImpl.propTypes = {
  className: _react.PropTypes.string.isRequired,
  zeroAt: _react.PropTypes.number.isRequired,
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired,
  minSelectionStartWidth: _react.PropTypes.number.isRequired,
  selection: _react.PropTypes.object.isRequired,
  width: _react.PropTypes.number.isRequired,
  onSelectionChange: _react.PropTypes.func,
  onZoomButtonClick: _react.PropTypes.func,
  children: _react.PropTypes.node
};

var TimeSelectionScrubber = (0, _WithSize.withSize)(TimeSelectionScrubberImpl);

exports.default = TimeSelectionScrubber;

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TimeRuler = function (_PureComponent) {
  (0, _inherits3.default)(TimeRuler, _PureComponent);

  function TimeRuler() {
    (0, _classCallCheck3.default)(this, TimeRuler);
    return (0, _possibleConstructorReturn3.default)(this, (TimeRuler.__proto__ || Object.getPrototypeOf(TimeRuler)).apply(this, arguments));
  }

  (0, _createClass3.default)(TimeRuler, [{
    key: "_findNiceNumberGreaterOrEqualTo",
    value: function _findNiceNumberGreaterOrEqualTo(uglyNumber) {
      // Write uglyNumber as a * 10^b, with 1 <= a < 10.
      // Return the lowest of 2 * 10^b, 5 * 10^b, 10 * 10^b that is greater or equal to uglyNumber.
      var b = Math.floor(Math.log10(uglyNumber));
      if (uglyNumber <= 2 * Math.pow(10, b)) {
        return { number: 2 * Math.pow(10, b), exponent: b };
      }
      if (uglyNumber <= 5 * Math.pow(10, b)) {
        return { number: 5 * Math.pow(10, b), exponent: b };
      }
      return { number: Math.pow(10, b + 1), exponent: b + 1 };
    }
  }, {
    key: "_getNotches",
    value: function _getNotches() {
      if (this.props.width === 0) {
        return { notches: [], decimalPlaces: 0 };
      }

      var _props = this.props,
          zeroAt = _props.zeroAt,
          rangeStart = _props.rangeStart,
          rangeEnd = _props.rangeEnd,
          width = _props.width;

      var pixelsPerMilliSecond = width / (rangeEnd - rangeStart);
      var minimumNotchWidth = 55; // pixels

      var _findNiceNumberGreate = this._findNiceNumberGreaterOrEqualTo(minimumNotchWidth / pixelsPerMilliSecond),
          notchTime = _findNiceNumberGreate.number,
          exponent = _findNiceNumberGreate.exponent;

      var firstNotchIndex = Math.ceil((rangeStart - zeroAt) / notchTime);
      var lastNotchIndex = Math.floor((rangeEnd - zeroAt) / notchTime);
      var notches = [];
      for (var i = firstNotchIndex; i <= lastNotchIndex; i++) {
        notches.push({
          time: i * notchTime / 1000,
          pos: (i * notchTime - (rangeStart - zeroAt)) * pixelsPerMilliSecond
        });
      }
      return { notches: notches, decimalPlaces: Math.max(0, -(exponent - 3)) };
    }
  }, {
    key: "render",
    value: function render() {
      var className = this.props.className;

      var _getNotches2 = this._getNotches(),
          notches = _getNotches2.notches,
          decimalPlaces = _getNotches2.decimalPlaces;

      return _react2.default.createElement(
        "div",
        { className: className },
        _react2.default.createElement(
          "ol",
          { className: "timeRulerContainer" },
          notches.map(function (_ref, i) {
            var time = _ref.time,
                pos = _ref.pos;
            return _react2.default.createElement(
              "li",
              { className: "timeRulerNotch", key: i, style: { left: pos + "px" } },
              _react2.default.createElement(
                "span",
                { className: "timeRulerNotchText" },
                time.toFixed(decimalPlaces) + "s"
              )
            );
          })
        )
      );
    }
  }]);
  return TimeRuler;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

TimeRuler.propTypes = {
  className: _react.PropTypes.string.isRequired,
  zeroAt: _react.PropTypes.number.isRequired,
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired,
  width: _react.PropTypes.number.isRequired
};

exports.default = TimeRuler;

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _clamp = __webpack_require__(130);

var _clamp2 = _interopRequireDefault(_clamp);

var _Draggable = __webpack_require__(510);

var _Draggable2 = _interopRequireDefault(_Draggable);

var _rangeFilters = __webpack_require__(126);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SelectionScrubberOverlay = function (_PureComponent) {
  (0, _inherits3.default)(SelectionScrubberOverlay, _PureComponent);

  function SelectionScrubberOverlay(props) {
    (0, _classCallCheck3.default)(this, SelectionScrubberOverlay);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SelectionScrubberOverlay.__proto__ || Object.getPrototypeOf(SelectionScrubberOverlay)).call(this, props));

    var makeOnMove = function makeOnMove(fun) {
      return function (originalValue, dx, dy, isModifying) {
        var _this$props = _this.props,
            rangeStart = _this$props.rangeStart,
            rangeEnd = _this$props.rangeEnd,
            width = _this$props.width;

        var delta = dx / width * (rangeEnd - rangeStart);
        var selectionDeltas = fun(delta);
        var selectionStart = Math.max(rangeStart, originalValue.selectionStart + selectionDeltas.startDelta);
        var selectionEnd = (0, _clamp2.default)(originalValue.selectionEnd + selectionDeltas.endDelta, selectionStart, rangeEnd);
        _this.props.onSelectionChange({
          hasSelection: true,
          isModifying: isModifying,
          selectionStart: selectionStart,
          selectionEnd: selectionEnd
        });
      };
    };

    _this._rangeStartOnMove = makeOnMove(function (delta) {
      return {
        startDelta: delta,
        endDelta: 0
      };
    });
    _this._moveRangeOnMove = makeOnMove(function (delta) {
      return {
        startDelta: delta,
        endDelta: delta
      };
    });
    _this._rangeEndOnMove = makeOnMove(function (delta) {
      return {
        startDelta: 0,
        endDelta: delta
      };
    });

    _this._zoomButtonOnMouseDown = _this._zoomButtonOnMouseDown.bind(_this);
    _this._zoomButtonOnClick = _this._zoomButtonOnClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(SelectionScrubberOverlay, [{
    key: '_zoomButtonOnMouseDown',
    value: function _zoomButtonOnMouseDown(e) {
      e.stopPropagation();
    }
  }, {
    key: '_zoomButtonOnClick',
    value: function _zoomButtonOnClick(e) {
      e.stopPropagation();
      var _props = this.props,
          selectionStart = _props.selectionStart,
          selectionEnd = _props.selectionEnd;

      this.props.onZoomButtonClick(selectionStart, selectionEnd);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          rangeStart = _props2.rangeStart,
          rangeEnd = _props2.rangeEnd,
          selectionStart = _props2.selectionStart,
          selectionEnd = _props2.selectionEnd,
          isModifying = _props2.isModifying,
          width = _props2.width;

      var selection = { selectionStart: selectionStart, selectionEnd: selectionEnd };
      var beforeWidth = (selectionStart - rangeStart) / (rangeEnd - rangeStart) * width;
      var selectionWidth = (selectionEnd - selectionStart) / (rangeEnd - rangeStart) * width;
      return _react2.default.createElement(
        'div',
        { className: 'overlay' },
        _react2.default.createElement('div', { className: 'dimmerBefore', style: { width: beforeWidth + 'px' } }),
        _react2.default.createElement(
          'div',
          { className: 'selectionScrubberWrapper' },
          _react2.default.createElement(
            'div',
            {
              className: 'selectionScrubberGrippy',
              style: { width: selectionWidth + 'px' }
            },
            _react2.default.createElement(_Draggable2.default, {
              className: 'grippyRangeStart',
              value: selection,
              onMove: this._rangeStartOnMove
            }),
            _react2.default.createElement(_Draggable2.default, {
              className: 'grippyMoveRange',
              value: selection,
              onMove: this._moveRangeOnMove
            }),
            _react2.default.createElement(_Draggable2.default, {
              className: 'grippyRangeEnd',
              value: selection,
              onMove: this._rangeEndOnMove
            })
          ),
          _react2.default.createElement(
            'div',
            { className: 'selectionScrubberInner' },
            _react2.default.createElement(
              'span',
              {
                className: (0, _classnames2.default)('selectionScrubberRange', {
                  hidden: !isModifying
                })
              },
              (0, _rangeFilters.getFormattedTimeLength)(selectionEnd - selectionStart)
            ),
            _react2.default.createElement('button', {
              className: (0, _classnames2.default)('selectionScrubberZoomButton', {
                hidden: isModifying
              }),
              onMouseDown: this._zoomButtonOnMouseDown,
              onClick: this._zoomButtonOnClick
            })
          )
        ),
        _react2.default.createElement('div', { className: 'dimmerAfter' })
      );
    }
  }]);
  return SelectionScrubberOverlay;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = SelectionScrubberOverlay;


SelectionScrubberOverlay.propTypes = {
  rangeStart: _react.PropTypes.number.isRequired,
  rangeEnd: _react.PropTypes.number.isRequired,
  selectionStart: _react.PropTypes.number,
  selectionEnd: _react.PropTypes.number,
  isModifying: _react.PropTypes.bool.isRequired,
  width: _react.PropTypes.number.isRequired,
  onSelectionChange: _react.PropTypes.func,
  onZoomButtonClick: _react.PropTypes.func
};

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(64);

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A component that reports mouse dragging (left mouse button only) in its
 * onMove handler.
 * While the mouse button is pressed, onMove is called on each mouse move with
 * three arguments: the value of its 'value' field at mousedown time, and the
 * x and y deltas compared to the mouse position at mousedown.
 * During the drag, the additional className 'dragging' is set on the element.
 */
var Draggable = function (_PureComponent) {
  (0, _inherits3.default)(Draggable, _PureComponent);

  function Draggable(props) {
    (0, _classCallCheck3.default)(this, Draggable);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call(this, props));

    _this.state = { dragging: false };
    _this._onMouseDown = _this._onMouseDown.bind(_this);
    _this._handlers = null;
    _this._container = null;
    _this._containerCreated = function (c) {
      _this._container = c;
    };
    return _this;
  }

  (0, _createClass3.default)(Draggable, [{
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      var _this2 = this;

      if (!this._container || e.button !== 0) {
        return;
      }

      e.stopPropagation();
      e.preventDefault();
      this.setState({ dragging: true });

      var mouseDownX = e.pageX;
      var mouseDownY = e.pageY;
      var startValue = this.props.value;

      var mouseMoveHandler = function mouseMoveHandler(e) {
        _this2.props.onMove(startValue, e.pageX - mouseDownX, e.pageY - mouseDownY, true);
        e.stopPropagation();
        e.preventDefault();
      };

      var mouseUpHandler = function mouseUpHandler(e) {
        _this2.props.onMove(startValue, e.pageX - mouseDownX, e.pageY - mouseDownY, false);
        e.stopPropagation();
        e.preventDefault();
        _this2._uninstallMoveAndUpHandlers();
        _this2.setState({ dragging: false });
      };

      this._installMoveAndUpHandlers(mouseMoveHandler, mouseUpHandler);
    }
  }, {
    key: '_installMoveAndUpHandlers',
    value: function _installMoveAndUpHandlers(mouseMoveHandler, mouseUpHandler) {
      this._handlers = { mouseMoveHandler: mouseMoveHandler, mouseUpHandler: mouseUpHandler };
      window.addEventListener('mousemove', mouseMoveHandler, true);
      window.addEventListener('mouseup', mouseUpHandler, true);
    }
  }, {
    key: '_uninstallMoveAndUpHandlers',
    value: function _uninstallMoveAndUpHandlers() {
      if (this._handlers) {
        var _handlers = this._handlers,
            _mouseMoveHandler = _handlers.mouseMoveHandler,
            _mouseUpHandler = _handlers.mouseUpHandler;

        window.removeEventListener('mousemove', _mouseMoveHandler, true);
        window.removeEventListener('mouseup', _mouseUpHandler, true);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._uninstallMoveAndUpHandlers();
    }
  }, {
    key: 'render',
    value: function render() {
      var props = Object.assign({}, this.props);
      if (this.state.dragging) {
        props.className += ' dragging';
      }
      delete props.onMove;
      delete props.value;
      delete props.children;
      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, props, {
          onMouseDown: this._onMouseDown,
          ref: this._containerCreated
        }),
        this.props.children
      );
    }
  }]);
  return Draggable;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = Draggable;

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

__webpack_require__(512);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OverflowEdgeIndicator = function (_PureComponent) {
  (0, _inherits3.default)(OverflowEdgeIndicator, _PureComponent);

  function OverflowEdgeIndicator(props) {
    (0, _classCallCheck3.default)(this, OverflowEdgeIndicator);

    var _this = (0, _possibleConstructorReturn3.default)(this, (OverflowEdgeIndicator.__proto__ || Object.getPrototypeOf(OverflowEdgeIndicator)).call(this, props));

    _this.state = {
      overflowsOnTop: false,
      overflowsOnRight: false,
      overflowsOnBottom: false,
      overflowsOnLeft: false
    };
    _this._onScroll = _this._onScroll.bind(_this);
    _this._containerCreated = function (elem) {
      _this._container = elem;
    };
    _this._contentsWrapperCreated = function (elem) {
      _this._contentsWrapper = elem;
    };
    return _this;
  }

  (0, _createClass3.default)(OverflowEdgeIndicator, [{
    key: '_onScroll',
    value: function _onScroll() {
      this._updateIndicatorStatus();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._updateIndicatorStatus();
    }
  }, {
    key: '_updateIndicatorStatus',
    value: function _updateIndicatorStatus() {
      if (this._container && this._contentsWrapper) {
        var containerRect = this._container.getBoundingClientRect();
        var contentsRect = this._contentsWrapper.getBoundingClientRect();
        var oneDevicePixel = 1 / window.devicePixelRatio;
        this.setState({
          overflowsOnTop: contentsRect.top <= containerRect.top - oneDevicePixel,
          overflowsOnRight: contentsRect.right >= containerRect.right + oneDevicePixel,
          overflowsOnBottom: contentsRect.bottom >= containerRect.bottom + oneDevicePixel,
          overflowsOnLeft: contentsRect.left <= containerRect.left - oneDevicePixel
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          children = _props.children;

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)('overflowEdgeIndicator', className, this.state)
        },
        _react2.default.createElement('div', { className: 'overflowEdgeIndicatorEdge topEdge' }),
        _react2.default.createElement('div', { className: 'overflowEdgeIndicatorEdge rightEdge' }),
        _react2.default.createElement('div', { className: 'overflowEdgeIndicatorEdge bottomEdge' }),
        _react2.default.createElement('div', { className: 'overflowEdgeIndicatorEdge leftEdge' }),
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('overflowEdgeIndicatorScrollbox', className + 'Scrollbox'),
            onScroll: this._onScroll,
            ref: this._containerCreated
          },
          _react2.default.createElement(
            'div',
            {
              className: 'overflowEdgeIndicatorContentsWrapper',
              ref: this._contentsWrapperCreated
            },
            children
          )
        )
      );
    }
  }]);
  return OverflowEdgeIndicator;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

OverflowEdgeIndicator.propTypes = {
  className: _react.PropTypes.string,
  children: _react.PropTypes.any
};

exports.default = OverflowEdgeIndicator;

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(513);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./OverflowEdgeIndicator.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./OverflowEdgeIndicator.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".overflowEdgeIndicator{position:relative}.overflowEdgeIndicatorEdge{position:absolute;pointer-events:none;visibility:hidden;z-index:3;opacity:0;transition:.15s ease-in-out;transition-property:opacity,visibility}.overflowEdgeIndicatorEdge.bottomEdge,.overflowEdgeIndicatorEdge.leftEdge,.overflowEdgeIndicatorEdge.topEdge{left:0}.overflowEdgeIndicatorEdge.bottomEdge,.overflowEdgeIndicatorEdge.rightEdge,.overflowEdgeIndicatorEdge.topEdge{right:0}.overflowEdgeIndicatorEdge.leftEdge,.overflowEdgeIndicatorEdge.rightEdge,.overflowEdgeIndicatorEdge.topEdge{top:0}.overflowEdgeIndicatorEdge.bottomEdge,.overflowEdgeIndicatorEdge.leftEdge,.overflowEdgeIndicatorEdge.rightEdge{bottom:0}.overflowEdgeIndicatorEdge.leftEdge,.overflowEdgeIndicatorEdge.rightEdge{width:15px}.overflowEdgeIndicatorEdge.bottomEdge,.overflowEdgeIndicatorEdge.topEdge{height:15px}.overflowEdgeIndicator.overflowsOnBottom>.overflowEdgeIndicatorEdge.bottomEdge,.overflowEdgeIndicator.overflowsOnLeft>.overflowEdgeIndicatorEdge.leftEdge,.overflowEdgeIndicator.overflowsOnRight>.overflowEdgeIndicatorEdge.rightEdge,.overflowEdgeIndicator.overflowsOnTop>.overflowEdgeIndicatorEdge.topEdge{visibility:visible;opacity:1}.overflowEdgeIndicatorEdge.topEdge{background:radial-gradient(ellipse at center top,rgba(0,0,0,.4),transparent 60%)}.overflowEdgeIndicatorEdge.rightEdge{background:radial-gradient(ellipse at right center,rgba(0,0,0,.4),transparent 60%)}.overflowEdgeIndicatorEdge.bottomEdge{background:radial-gradient(ellipse at center bottom,rgba(0,0,0,.4),transparent 60%)}.overflowEdgeIndicatorEdge.leftEdge{background:radial-gradient(ellipse at left center,rgba(0,0,0,.4),transparent 60%)}", ""]);

// exports


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactContextmenu = __webpack_require__(80);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(14);

var _functionInfo = __webpack_require__(515);

var _copyToClipboard = __webpack_require__(217);

var _copyToClipboard2 = _interopRequireDefault(_copyToClipboard);

var _profileView2 = __webpack_require__(23);

var _urlState = __webpack_require__(15);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

__webpack_require__(517);

var ProfileCallTreeContextMenu = function (_PureComponent) {
  (0, _inherits3.default)(ProfileCallTreeContextMenu, _PureComponent);

  function ProfileCallTreeContextMenu(props) {
    (0, _classCallCheck3.default)(this, ProfileCallTreeContextMenu);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileCallTreeContextMenu.__proto__ || Object.getPrototypeOf(ProfileCallTreeContextMenu)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ProfileCallTreeContextMenu, [{
    key: 'copyFunctionName',
    value: function copyFunctionName() {
      var _props = this.props,
          selectedCallNodeIndex = _props.selectedCallNodeIndex,
          _props$thread = _props.thread,
          stringTable = _props$thread.stringTable,
          funcTable = _props$thread.funcTable,
          callNodeTable = _props.callNodeInfo.callNodeTable;


      var funcIndex = callNodeTable.func[selectedCallNodeIndex];
      var isJS = funcTable.isJS[funcIndex];
      var stringIndex = funcTable.name[funcIndex];
      var functionCall = stringTable.getString(stringIndex);
      var name = isJS ? functionCall : (0, _functionInfo.getFunctionName)(functionCall);
      (0, _copyToClipboard2.default)(name);
    }
  }, {
    key: 'copyUrl',
    value: function copyUrl() {
      var _props2 = this.props,
          selectedCallNodeIndex = _props2.selectedCallNodeIndex,
          _props2$thread = _props2.thread,
          stringTable = _props2$thread.stringTable,
          funcTable = _props2$thread.funcTable,
          callNodeTable = _props2.callNodeInfo.callNodeTable;


      var funcIndex = callNodeTable.func[selectedCallNodeIndex];
      var stringIndex = funcTable.fileName[funcIndex];
      if (stringIndex !== null) {
        var fileName = stringTable.getString(stringIndex);
        (0, _copyToClipboard2.default)(fileName);
      }
    }
  }, {
    key: 'copyStack',
    value: function copyStack() {
      var _props3 = this.props,
          selectedCallNodeIndex = _props3.selectedCallNodeIndex,
          _props3$thread = _props3.thread,
          stringTable = _props3$thread.stringTable,
          funcTable = _props3$thread.funcTable,
          callNodeTable = _props3.callNodeInfo.callNodeTable;


      var stack = '';
      var callNodeIndex = selectedCallNodeIndex;

      do {
        var funcIndex = callNodeTable.func[callNodeIndex];
        var stringIndex = funcTable.name[funcIndex];
        stack += stringTable.getString(stringIndex) + '\n';
        callNodeIndex = callNodeTable.prefix[callNodeIndex];
      } while (callNodeIndex !== -1);

      (0, _copyToClipboard2.default)(stack);
    }
  }, {
    key: 'handleClick',
    value: function handleClick(event, data) {
      var type = data.type;

      switch (type) {
        case 'copy-function-name':
          this.copyFunctionName();
          break;
        case 'copy-url':
          this.copyUrl();
          break;
        case 'copy-stack':
          this.copyStack();
          break;
        case 'merge-call-node':
        case 'merge-function':
        case 'merge-subtree':
        case 'focus-subtree':
        case 'focus-function':
        case 'collapse-resource':
          this.addTransformToStack(type);
          break;
        default:
          throw new Error('Unknown type ' + data.type);
      }
    }
  }, {
    key: 'addTransformToStack',
    value: function addTransformToStack(type) {
      var _props4 = this.props,
          addTransformToStack = _props4.addTransformToStack,
          threadIndex = _props4.threadIndex,
          implementation = _props4.implementation,
          selectedCallNodePath = _props4.selectedCallNodePath,
          inverted = _props4.inverted,
          thread = _props4.thread;

      var selectedFunc = selectedCallNodePath[selectedCallNodePath.length - 1];

      switch (type) {
        case 'focus-subtree':
          addTransformToStack(threadIndex, {
            type: 'focus-subtree',
            callNodePath: selectedCallNodePath,
            implementation: implementation,
            inverted: inverted
          });
          break;
        case 'focus-function':
          addTransformToStack(threadIndex, {
            type: 'focus-function',
            funcIndex: selectedFunc
          });
          break;
        case 'merge-subtree':
          addTransformToStack(threadIndex, {
            type: 'merge-subtree',
            callNodePath: selectedCallNodePath,
            implementation: implementation,
            inverted: inverted
          });
          break;
        case 'merge-call-node':
          addTransformToStack(threadIndex, {
            type: 'merge-call-node',
            callNodePath: selectedCallNodePath,
            implementation: implementation
          });
          break;
        case 'merge-function':
          addTransformToStack(threadIndex, {
            type: 'merge-function',
            funcIndex: selectedFunc
          });
          break;
        case 'collapse-resource':
          {
            var funcTable = thread.funcTable;

            var resourceIndex = funcTable.resource[selectedFunc];
            // A new collapsed func will be inserted into the table at the end. Deduce
            // the index here.
            var collapsedFuncIndex = funcTable.length;
            addTransformToStack(threadIndex, {
              type: 'collapse-resource',
              resourceIndex: resourceIndex,
              collapsedFuncIndex: collapsedFuncIndex,
              implementation: implementation
            });
            break;
          }
        default:
          throw new Error('Type not found.');
      }
    }
  }, {
    key: 'getNameForSelectedResource',
    value: function getNameForSelectedResource() {
      var _props5 = this.props,
          selectedCallNodePath = _props5.selectedCallNodePath,
          _props5$thread = _props5.thread,
          funcTable = _props5$thread.funcTable,
          stringTable = _props5$thread.stringTable,
          resourceTable = _props5$thread.resourceTable,
          libs = _props5$thread.libs;


      var funcIndex = selectedCallNodePath[selectedCallNodePath.length - 1];
      if (funcIndex === undefined) {
        return null;
      }
      var isJS = funcTable.isJS[funcIndex];

      if (isJS) {
        var fileNameIndex = funcTable.fileName[funcIndex];
        return fileNameIndex === null ? null : stringTable.getString(fileNameIndex);
      }
      var resourceIndex = funcTable.resource[funcIndex];
      if (resourceIndex === -1) {
        return null;
      }
      var libIndex = resourceTable.lib[resourceIndex];
      if (libIndex === undefined || libIndex === null) {
        return null;
      }
      return libs[libIndex].name;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          selectedCallNodeIndex = _props6.selectedCallNodeIndex,
          inverted = _props6.inverted,
          funcTable = _props6.thread.funcTable,
          callNodeTable = _props6.callNodeInfo.callNodeTable;

      var funcIndex = callNodeTable.func[selectedCallNodeIndex];
      var isJS = funcTable.isJS[funcIndex];
      // This could be the C++ library, or the JS filename.
      var nameForResource = this.getNameForSelectedResource();

      return _react2.default.createElement(
        _reactContextmenu.ContextMenu,
        { id: 'ProfileCallTreeContextMenu' },
        inverted ? null : _react2.default.createElement(
          _reactContextmenu.MenuItem,
          {
            onClick: this.handleClick,
            data: { type: 'merge-call-node' }
          },
          _react2.default.createElement('span', { className: 'profileCallTreeContextMenuIcon profileCallTreeContextMenuIconMerge' }),
          'Merge node into calling function'
        ),
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'merge-function' } },
          _react2.default.createElement('span', { className: 'profileCallTreeContextMenuIcon profileCallTreeContextMenuIconMerge' }),
          'Merge function into caller across the entire tree'
        ),
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'focus-subtree' } },
          _react2.default.createElement('span', { className: 'profileCallTreeContextMenuIcon profileCallTreeContextMenuIconFocus' }),
          'Focus on subtree'
        ),
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'focus-function' } },
          _react2.default.createElement('span', { className: 'profileCallTreeContextMenuIcon profileCallTreeContextMenuIconFocus' }),
          inverted ? 'Focus on calls made by this function' : 'Focus on function'
        ),
        nameForResource ? _react2.default.createElement(
          _reactContextmenu.MenuItem,
          {
            onClick: this.handleClick,
            data: { type: 'collapse-resource' }
          },
          _react2.default.createElement('span', { className: 'profileCallTreeContextMenuIcon profileCallTreeContextMenuIconCollapse' }),
          'Collapse functions in',
          ' ',
          _react2.default.createElement(
            'span',
            { className: 'profileCallTreeContextMenuLabel' },
            nameForResource
          )
        ) : null,
        _react2.default.createElement('div', { className: 'react-contextmenu-separator' }),
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          {
            onClick: this.handleClick,
            data: { type: 'copy-function-name' }
          },
          'Copy function name'
        ),
        isJS ? _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'copy-url' } },
          'Copy script URL'
        ) : null,
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'copy-stack' } },
          'Copy stack'
        )
      );
    }
  }]);
  return ProfileCallTreeContextMenu;
}(_react.PureComponent);

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    thread: _profileView.selectedThreadSelectors.getFilteredThread(state),
    threadIndex: (0, _urlState.getSelectedThreadIndex)(state),
    callNodeInfo: _profileView.selectedThreadSelectors.getCallNodeInfo(state),
    implementation: (0, _urlState.getImplementationFilter)(state),
    inverted: (0, _urlState.getInvertCallstack)(state),
    selectedCallNodePath: _profileView.selectedThreadSelectors.getSelectedCallNodePath(state),
    selectedCallNodeIndex: _profileView.selectedThreadSelectors.getSelectedCallNodeIndex(state)
  };
}, { addTransformToStack: _profileView2.addTransformToStack })(ProfileCallTreeContextMenu);

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stripFunctionArguments = stripFunctionArguments;
exports.removeTemplateInformation = removeTemplateInformation;
exports.getFunctionName = getFunctionName;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Strip any function arguments from the given string.
 *
 * If the function fails to determine that there are any parentheses to strip
 * it will return the original string.
 */
function stripFunctionArguments(functionCall) {
  // Remove known data that can appear at the end of the string
  var s = functionCall.replace(/ \[clone [^]+\]$/, '').replace(/ const$/, '');
  if (s[s.length - 1] !== ')') {
    return functionCall;
  }

  // Start from the right parenthesis at the end of the string and
  // then iterate towards the beginning until we find the matching
  // left parenthesis.
  var depth = 0;
  for (var i = s.length - 1; i > 0; i--) {
    if (s[i] === ')') {
      depth++;
    } else if (s[i] === '(') {
      depth--;
      if (depth === 0) {
        return functionCall.substr(0, i);
      }
    }
  }
  return functionCall;
}

function removeTemplateInformation(functionName) {
  var result = '';
  var depth = 0;
  var start = 0; // Start of a segment we'd like to keep
  for (var i = 0; i < functionName.length; i++) {
    if (functionName[i] === '<') {
      if (depth === 0) {
        // Template information begins, save segment
        result += functionName.substr(start, i - start);
        // Start a new segment here to not lose the rest of the string
        // should we find no matching '>'
        start = i;
      }
      depth++;
    } else if (functionName[i] === '>') {
      depth--;
      if (depth === 0) {
        // Template information ends, start of new segment
        start = i + 1;
      }
    }
  }
  result += functionName.substr(start);
  return result;
}

function getFunctionName(functionCall) {
  return removeTemplateInformation(stripFunctionArguments(functionCall));
}

/***/ }),
/* 516 */
/***/ (function(module, exports) {


module.exports = function () {
  var selection = document.getSelection();
  if (!selection.rangeCount) {
    return function () {};
  }
  var active = document.activeElement;

  var ranges = [];
  for (var i = 0; i < selection.rangeCount; i++) {
    ranges.push(selection.getRangeAt(i));
  }

  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
    case 'INPUT':
    case 'TEXTAREA':
      active.blur();
      break;

    default:
      active = null;
      break;
  }

  selection.removeAllRanges();
  return function () {
    selection.type === 'Caret' &&
    selection.removeAllRanges();

    if (!selection.rangeCount) {
      ranges.forEach(function(range) {
        selection.addRange(range);
      });
    }

    active &&
    active.focus();
  };
};


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(518);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./ProfileCallTreeContextMenu.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./ProfileCallTreeContextMenu.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".profileCallTreeContextMenuIcon{width:16px;height:16px;pointer-events:auto;position:relative;display:inline-block;margin-inline-end:8px;top:2px}.react-contextmenu-item--selected>.profileCallTreeContextMenuIcon{filter:invert(1)}.profileCallTreeContextMenuIconMerge{background:url(" + __webpack_require__(519) + ") 50% no-repeat}.profileCallTreeContextMenuIconCollapse{background:url(" + __webpack_require__(520) + ") 50% no-repeat}.profileCallTreeContextMenuIconFocus{background:url(" + __webpack_require__(521) + ") 50% no-repeat}.profileCallTreeContextMenuLabel{color:#555;font-weight:700}.react-contextmenu-item--selected>.profileCallTreeContextMenuLabel{color:#fff}", ""]);

// exports


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "715fe53c78aded0659604cbd8be9236c.svg";

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "44a09cb71a521f8a12eecd60ca367f73.svg";

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "0f93223ba8d4db41bd1a0ae47f901756.svg";

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactContextmenu = __webpack_require__(80);

var _reactRedux = __webpack_require__(9);

var _profileView = __webpack_require__(23);

var _profileView2 = __webpack_require__(14);

var _copyToClipboard = __webpack_require__(217);

var _copyToClipboard2 = _interopRequireDefault(_copyToClipboard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var MarkersContextMenu = function (_PureComponent) {
  (0, _inherits3.default)(MarkersContextMenu, _PureComponent);

  function MarkersContextMenu(props) {
    (0, _classCallCheck3.default)(this, MarkersContextMenu);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MarkersContextMenu.__proto__ || Object.getPrototypeOf(MarkersContextMenu)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(MarkersContextMenu, [{
    key: 'setStartRange',
    value: function setStartRange() {
      var _props = this.props,
          selectedMarker = _props.selectedMarker,
          markers = _props.markers,
          updateProfileSelection = _props.updateProfileSelection,
          selection = _props.selection,
          displayRange = _props.displayRange;


      var selectionEnd = selection.hasSelection ? selection.selectionEnd : displayRange.end;

      updateProfileSelection({
        hasSelection: true,
        isModifying: false,
        selectionStart: markers.time[selectedMarker],
        selectionEnd: selectionEnd
      });
    }
  }, {
    key: 'setEndRange',
    value: function setEndRange() {
      var _props2 = this.props,
          selectedMarker = _props2.selectedMarker,
          markers = _props2.markers,
          updateProfileSelection = _props2.updateProfileSelection,
          displayRange = _props2.displayRange,
          selection = _props2.selection;


      var selectionStart = selection.hasSelection ? selection.selectionStart : displayRange.start;

      updateProfileSelection({
        hasSelection: true,
        isModifying: false,
        selectionStart: selectionStart,
        // Add an arbitrarily small bit of time at the end to make sure the selected marker
        // doesn't disappear from view.
        selectionEnd: markers.time[selectedMarker] + 0.0001
      });
    }
  }, {
    key: 'copyMarkerJSON',
    value: function copyMarkerJSON() {
      var _props3 = this.props,
          thread = _props3.thread,
          selectedMarker = _props3.selectedMarker,
          markers = _props3.markers;


      (0, _copyToClipboard2.default)(JSON.stringify({
        name: thread.stringTable.getString(markers.name[selectedMarker]),
        time: markers.time[selectedMarker],
        data: markers.data[selectedMarker]
      }));
    }
  }, {
    key: 'handleClick',
    value: function handleClick(event, data) {
      switch (data.type) {
        case 'setStartRange':
          this.setStartRange();
          break;
        case 'setEndRange':
          this.setEndRange();
          break;
        case 'copyMarkerJSON':
          this.copyMarkerJSON();
          break;
        default:
          throw new Error('Unknown type ' + data.type);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactContextmenu.ContextMenu,
        { id: 'MarkersContextMenu' },
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'setStartRange' } },
          'Set selection start time here'
        ),
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'setEndRange' } },
          'Set selection end time here'
        ),
        _react2.default.createElement(
          _reactContextmenu.MenuItem,
          { onClick: this.handleClick, data: { type: 'copyMarkerJSON' } },
          'Copy marker JSON'
        )
      );
    }
  }]);
  return MarkersContextMenu;
}(_react.PureComponent);

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    thread: _profileView2.selectedThreadSelectors.getThread(state),
    markers: _profileView2.selectedThreadSelectors.getSearchFilteredMarkers(state),
    selection: (0, _profileView2.getProfileViewOptions)(state).selection,
    displayRange: (0, _profileView2.getDisplayRange)(state),
    selectedMarker: _profileView2.selectedThreadSelectors.getViewOptions(state).selectedMarker
  };
}, { updateProfileSelection: _profileView.updateProfileSelection })(MarkersContextMenu);

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactContextmenu = __webpack_require__(80);

var _profileView = __webpack_require__(23);

var _reactRedux = __webpack_require__(9);

var _profileView2 = __webpack_require__(14);

var _urlState = __webpack_require__(15);

var _profileData = __webpack_require__(19);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var ProfileThreadHeaderContextMenu = function (_PureComponent) {
  (0, _inherits3.default)(ProfileThreadHeaderContextMenu, _PureComponent);

  function ProfileThreadHeaderContextMenu(props) {
    (0, _classCallCheck3.default)(this, ProfileThreadHeaderContextMenu);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProfileThreadHeaderContextMenu.__proto__ || Object.getPrototypeOf(ProfileThreadHeaderContextMenu)).call(this, props));

    _this._toggleThreadVisibility = _this._toggleThreadVisibility.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ProfileThreadHeaderContextMenu, [{
    key: '_toggleThreadVisibility',
    value: function _toggleThreadVisibility(_, data) {
      var threadOrder = data.threadOrder,
          hiddenThreads = data.hiddenThreads,
          threadIndex = data.threadIndex,
          isHidden = data.isHidden;
      var _props = this.props,
          hideThread = _props.hideThread,
          showThread = _props.showThread;

      if (isHidden) {
        showThread(threadIndex);
      } else {
        hideThread(threadIndex, threadOrder, hiddenThreads);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          threads = _props2.threads,
          threadOrder = _props2.threadOrder,
          hiddenThreads = _props2.hiddenThreads;


      return _react2.default.createElement(
        _reactContextmenu.ContextMenu,
        { id: 'ProfileThreadHeaderContextMenu' },
        threadOrder.map(function (threadIndex) {
          var isHidden = hiddenThreads.includes(threadIndex);
          return _react2.default.createElement(
            _reactContextmenu.MenuItem,
            {
              key: threadIndex,
              preventClose: true,
              data: { threadOrder: threadOrder, hiddenThreads: hiddenThreads, threadIndex: threadIndex, isHidden: isHidden },
              onClick: _this2._toggleThreadVisibility,
              attributes: {
                className: (0, _classnames2.default)({ checkable: true, checked: !isHidden })
              }
            },
            (0, _profileData.getFriendlyThreadName)(threads, threads[threadIndex])
          );
        })
      );
    }
  }]);
  return ProfileThreadHeaderContextMenu;
}(_react.PureComponent);

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    threads: (0, _profileView2.getThreads)(state),
    threadOrder: (0, _urlState.getThreadOrder)(state),
    hiddenThreads: (0, _urlState.getHiddenThreads)(state)
  };
}, { hideThread: _profileView.hideThread, showThread: _profileView.showThread })(ProfileThreadHeaderContextMenu);

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(525);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./FooterLinks.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./FooterLinks.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".appFooterLinks{position:absolute;bottom:0;right:0;border-top:1px solid var(--grey-40);border-left:1px solid var(--grey-40);padding:0 3px;background-color:var(--grey-20)}.appFooterLinksClose,.appFooterLinksLink{display:inline-block;padding:3px 5px;color:var(--blue-60);text-decoration:none}.appFooterLinksClose:hover,.appFooterLinksLink:hover{text-decoration:underline}.appFooterLinksClose{border:none;margin:0;font:inherit;background:none;cursor:pointer}", ""]);

// exports


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(64);

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _defineProperty2 = __webpack_require__(53);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _classnames = __webpack_require__(12);

var _classnames2 = _interopRequireDefault(_classnames);

var _geckoProfilerScreenshot = __webpack_require__(527);

var _geckoProfilerScreenshot2 = _interopRequireDefault(_geckoProfilerScreenshot);

var _perfScreenshot = __webpack_require__(528);

var _perfScreenshot2 = _interopRequireDefault(_perfScreenshot);

var _receiveProfile = __webpack_require__(115);

var _reactTransitionGroup = __webpack_require__(202);

var _FooterLinks = __webpack_require__(136);

var _FooterLinks2 = _interopRequireDefault(_FooterLinks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

__webpack_require__(529);

var ADDON_URL = 'https://raw.githubusercontent.com/devtools-html/Gecko-Profiler-Addon/master/gecko_profiler.xpi';
var LEGACY_ADDON_URL = 'https://raw.githubusercontent.com/devtools-html/Gecko-Profiler-Addon/master/gecko_profiler_legacy.xpi';

var InstallButton = function InstallButton(_ref) {
  var name = _ref.name,
      xpiUrl = _ref.xpiUrl,
      children = _ref.children,
      className = _ref.className;

  return _react2.default.createElement(
    'a',
    {
      href: xpiUrl,
      className: className,
      onClick: function onClick(e) {
        if (window.InstallTrigger) {
          window.InstallTrigger.install((0, _defineProperty3.default)({}, name, xpiUrl));
        }
        e.preventDefault();
      }
    },
    children
  );
};

var UploadButton = function (_PureComponent) {
  (0, _inherits3.default)(UploadButton, _PureComponent);

  function UploadButton(props) {
    (0, _classCallCheck3.default)(this, UploadButton);

    var _this = (0, _possibleConstructorReturn3.default)(this, (UploadButton.__proto__ || Object.getPrototypeOf(UploadButton)).call(this, props));

    _this._upload = _this._upload.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(UploadButton, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement('input', {
          type: 'file',
          ref: function ref(input) {
            _this2._input = input;
          },
          onChange: this._upload
        })
      );
    }
  }, {
    key: '_upload',
    value: function _upload() {
      this.props.retrieveProfileFromFile(this._input.files[0]);
    }
  }]);
  return UploadButton;
}(_react.PureComponent);

function InstructionTransition(props) {
  return _react2.default.createElement(_reactTransitionGroup.CSSTransition, (0, _extends3.default)({}, props, {
    classNames: 'homeTransition',
    timeout: 300,
    exit: false
  }));
}

/**
 * Provide a global function for the add-on to to notify this component that it has
 * been installed.
 */
var homeInstance = void 0;
window.geckoProfilerAddonInstalled = function () {
  if (homeInstance) {
    // Forces the Home component to re-evaluate window.isGeckoProfilerAddonInstalled.
    homeInstance.addonInstalled();
  }
};

var Home = function (_PureComponent2) {
  (0, _inherits3.default)(Home, _PureComponent2);

  function Home(props) {
    (0, _classCallCheck3.default)(this, Home);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

    _this3._startDragging = _this3._startDragging.bind(_this3);
    _this3._stopDragging = _this3._stopDragging.bind(_this3);
    _this3._handleProfileDrop = _this3._handleProfileDrop.bind(_this3);
    _this3.state = {
      isDragging: false,
      isAddonInstalled: Boolean(window.isGeckoProfilerAddonInstalled)
    };

    _this3._supportsWebExtensionAPI = _supportsWebExtensionAPI();
    _this3._isFirefox = _isFirefox();
    return _this3;
  }

  (0, _createClass3.default)(Home, [{
    key: 'addonInstalled',
    value: function addonInstalled() {
      this.setState({ isAddonInstalled: true });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Prevent dropping files on the document.
      // Help Flow infer the correct type signature for document.addEventListener.
      document.addEventListener('drag', _preventDefault, false);
      document.addEventListener('dragover', _preventDefault, false);
      document.addEventListener('drop', _preventDefault, false);
      // Let the Gecko Profiler Add-on let the home-page know when it's been installed.
      homeInstance = this;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('drag', _preventDefault, false);
      document.removeEventListener('dragover', _preventDefault, false);
      document.removeEventListener('drop', _preventDefault, false);
    }
  }, {
    key: '_startDragging',
    value: function _startDragging(event) {
      event.preventDefault();
      this.setState({ isDragging: true });
    }
  }, {
    key: '_stopDragging',
    value: function _stopDragging(event) {
      event.preventDefault();
      this.setState({ isDragging: false });
    }
  }, {
    key: '_handleProfileDrop',
    value: function _handleProfileDrop(event) {
      event.preventDefault();
      if (!event.dataTransfer) {
        return;
      }

      var files = event.dataTransfer.files;

      if (files.length > 0) {
        this.props.retrieveProfileFromFile(files[0]);
      }
    }
  }, {
    key: '_renderInstructions',
    value: function _renderInstructions() {
      var isAddonInstalled = this.state.isAddonInstalled;

      if (isAddonInstalled) {
        return this._renderRecordInstructions();
      }
      if (this._supportsWebExtensionAPI) {
        return this._renderInstallInstructions();
      }
      if (this._isFirefox) {
        return this._renderLegacyInstructions();
      }
      return this._renderOtherBrowserInstructions();
    }
  }, {
    key: '_renderInstallInstructions',
    value: function _renderInstallInstructions() {
      return _react2.default.createElement(
        InstructionTransition,
        { key: 0 },
        _react2.default.createElement(
          'div',
          { className: 'homeInstructions' },
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsLeft' },
            _react2.default.createElement(
              'div',
              { style: { textAlign: 'center' } },
              _react2.default.createElement('img', { className: 'homeSectionScreenshot', src: _perfScreenshot2.default })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsRight' },
            _react2.default.createElement(
              'h2',
              null,
              'Getting started'
            ),
            _react2.default.createElement(
              'p',
              null,
              'Install the Gecko Profiler Add-on to start recording a performance profile in Firefox, then analyze it and share it with perf.html.'
            ),
            _react2.default.createElement(
              InstallButton,
              {
                name: 'Gecko Profiler',
                className: 'homeSectionInstallButton',
                xpiUrl: ADDON_URL
              },
              _react2.default.createElement(
                'span',
                { className: 'homeSectionPlus' },
                '+'
              ),
              'Install add-on'
            ),
            _react2.default.createElement(
              'p',
              null,
              'You can also analyze a local profile by either dragging and dropping it here or selecting it using the button below.'
            ),
            _react2.default.createElement(UploadButton, this.props)
          )
        )
      );
    }
  }, {
    key: '_renderRecordInstructions',
    value: function _renderRecordInstructions() {
      return _react2.default.createElement(
        InstructionTransition,
        { key: 1 },
        _react2.default.createElement(
          'div',
          { className: 'homeInstructions' },
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsLeft' },
            _react2.default.createElement(
              'p',
              null,
              _react2.default.createElement('img', { className: 'homeSectionScreenshot', src: _geckoProfilerScreenshot2.default })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsRight' },
            _react2.default.createElement(
              'h2',
              null,
              'Recording profiles'
            ),
            _react2.default.createElement(
              'p',
              null,
              'To start profiling, click on the profiling button, or use the keyboard shortcuts. The icon is blue when a profile is recording. Hit',
              _react2.default.createElement(
                'kbd',
                null,
                'Capture Profile'
              ),
              ' to load the data into perf.html.'
            ),
            this._renderShortcuts(),
            _react2.default.createElement(
              'p',
              null,
              'You can also analyze a local profile by either dragging and dropping it here or selecting it using the button below.'
            ),
            _react2.default.createElement(UploadButton, this.props)
          )
        )
      );
    }
  }, {
    key: '_renderLegacyInstructions',
    value: function _renderLegacyInstructions() {
      return _react2.default.createElement(
        InstructionTransition,
        { key: 2 },
        _react2.default.createElement(
          'div',
          { className: 'homeInstructions' },
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsLeft' },
            _react2.default.createElement(
              'div',
              { style: { textAlign: 'center' } },
              _react2.default.createElement('img', { className: 'homeSectionScreenshot', src: _perfScreenshot2.default })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsRight' },
            _react2.default.createElement(
              'h2',
              null,
              'Recording profiles'
            ),
            _react2.default.createElement(
              'p',
              null,
              'To start recording a performance profile in Firefox, first install the',
              ' ',
              _react2.default.createElement(
                InstallButton,
                { name: 'Gecko Profiler', xpiUrl: LEGACY_ADDON_URL },
                'Gecko Profiler Add-on'
              ),
              '. Then use the button added to the browser, or use the following shortcuts to record a profile. The button\u2019s icon is blue when a profile is recording. Hit ',
              _react2.default.createElement(
                'kbd',
                null,
                'Capture Profile'
              ),
              ' ',
              'to load the data into perf.html.'
            ),
            this._renderShortcuts(),
            _react2.default.createElement(
              'p',
              null,
              'You can also analyze a local profile by either dragging and dropping it here or selecting it using the button below.'
            ),
            _react2.default.createElement(UploadButton, this.props)
          )
        )
      );
    }
  }, {
    key: '_renderOtherBrowserInstructions',
    value: function _renderOtherBrowserInstructions() {
      return _react2.default.createElement(
        InstructionTransition,
        { key: 0 },
        _react2.default.createElement(
          'div',
          { className: 'homeInstructions', key: 0 },
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsLeft' },
            _react2.default.createElement(
              'div',
              { style: { textAlign: 'center' } },
              _react2.default.createElement('img', { className: 'homeSectionScreenshot', src: _perfScreenshot2.default })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'homeInstructionsRight' },
            _react2.default.createElement(
              'h2',
              null,
              'How to view and record profiles'
            ),
            _react2.default.createElement(
              'p',
              null,
              'Recording performance profiles requires',
              ' ',
              _react2.default.createElement(
                'a',
                { href: 'https://www.mozilla.org/en-US/firefox/new/' },
                'Firefox'
              ),
              '. However, existing profiles can be viewed in any modern browser. To view a profile, either follow a link to a public profile, drag a saved local profile onto this screen or select it using the button below.'
            ),
            _react2.default.createElement(UploadButton, this.props)
          )
        )
      );
    }
  }, {
    key: '_renderShortcuts',
    value: function _renderShortcuts() {
      return _react2.default.createElement(
        'p',
        null,
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'p',
            null,
            _react2.default.createElement(
              'kbd',
              null,
              'Ctrl'
            ),
            '+',
            _react2.default.createElement(
              'kbd',
              null,
              'Shift'
            ),
            '+',
            _react2.default.createElement(
              'kbd',
              null,
              '1'
            ),
            ' Stop and start profiling'
          ),
          _react2.default.createElement(
            'p',
            null,
            _react2.default.createElement(
              'kbd',
              null,
              'Ctrl'
            ),
            '+',
            _react2.default.createElement(
              'kbd',
              null,
              'Shift'
            ),
            '+',
            _react2.default.createElement(
              'kbd',
              null,
              '2'
            ),
            ' Capture and load profile'
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var isDragging = this.state.isDragging;
      var specialMessage = this.props.specialMessage;

      return _react2.default.createElement(
        'div',
        {
          className: 'home',
          onDragEnter: this._startDragging,
          onDragExit: this._stopDragging,
          onDrop: this._handleProfileDrop
        },
        _react2.default.createElement(
          'section',
          { className: 'homeSection' },
          _react2.default.createElement(
            'h1',
            { className: 'homeTitle' },
            _react2.default.createElement(
              'span',
              { className: 'homeTitleText' },
              'perf.html'
            ),
            _react2.default.createElement(
              'span',
              { className: 'homeTitleSubtext' },
              ' ',
              '\u2014 Web app for Firefox performance analysis'
            ),
            _react2.default.createElement(
              'a',
              {
                className: 'homeTitleGithubIcon',
                href: 'https://github.com/devtools-html/perf.html'
              },
              _react2.default.createElement(
                'svg',
                {
                  width: '22',
                  height: '22',
                  className: 'octicon octicon-mark-github',
                  viewBox: '0 0 16 16',
                  version: '1.1',
                  'aria-hidden': 'true'
                },
                _react2.default.createElement('path', {
                  fillRule: 'evenodd',
                  d: 'M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z'
                })
              )
            )
          ),
          specialMessage ? _react2.default.createElement(
            'div',
            { className: 'homeSpecialMessage' },
            specialMessage
          ) : null,
          _react2.default.createElement(
            'p',
            null,
            'Capture a performance profile. Analyze it. Share it. Make the web faster.'
          ),
          _react2.default.createElement(
            _reactTransitionGroup.TransitionGroup,
            { className: 'homeInstructionsTransitionGroup' },
            this._renderInstructions()
          ),
          _react2.default.createElement(
            'div',
            {
              className: (0, _classnames2.default)('homeDrop', isDragging ? 'dragging' : false)
            },
            _react2.default.createElement(
              'div',
              { className: 'homeDropMessage' },
              'Drop a saved profile here'
            )
          )
        ),
        _react2.default.createElement(_FooterLinks2.default, null)
      );
    }
  }]);
  return Home;
}(_react.PureComponent);

function _preventDefault(event) {
  event.preventDefault();
}

function _supportsWebExtensionAPI() {
  var matched = navigator.userAgent.match(/Firefox\/(\d+\.\d+)/);
  var minimumSupportedFirefox = 55;
  return matched ? parseFloat(matched[1]) >= minimumSupportedFirefox : false;
}

function _isFirefox() {
  return Boolean(navigator.userAgent.match(/Firefox\/\d+\.\d+/));
}

exports.default = (0, _reactRedux.connect)(function (state) {
  return state;
}, { retrieveProfileFromFile: _receiveProfile.retrieveProfileFromFile })(Home);

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e9a699daa7c33fcf80c361278055c65d.png";

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "b1619a1b2dfe623403752c0712430f08.jpg";

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(530);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./Home.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./Home.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".home{min-height:100vh;align-items:center;line-height:1.5}.home,.homeDrop{width:100%;display:flex;justify-content:center}.homeDrop{position:absolute;height:100%;top:0;left:0;align-items:stretch;background-color:hsla(0,0%,100%,.9);padding:1em;box-sizing:border-box;opacity:0;pointer-events:none;transition:opacity .2s}.homeDropMessage{width:100%;border:2px dashed #888;font-size:30px;color:#666;text-align:center;border-radius:10px;display:flex;align-items:center;justify-content:center}.homeDrop.dragging{opacity:1}.homeSpecialMessage{padding:8px 16px;background-color:#798fc8;border:1px solid #000;border-radius:3px;color:#fff;margin:17px 0}.homeSection{position:relative;width:75%;max-width:1200px;box-sizing:border-box;border:1px solid #ccc;border-radius:3px;padding:8em;font-size:130%;box-shadow:0 5px 25px #0b1f50;background-color:#fff;overflow:hidden}.homeSection kbd{display:inline-block;border:1px solid #ccc;border-radius:.2em;margin:0 .2em;padding:0 .5em;background-color:#f6f6f6;box-shadow:.1em .1em 0 #bbb}.homeTitle{margin-top:0;margin-bottom:.5em;padding-bottom:.5em;border-bottom:1px solid #ddd}.homeTitleSubtext{font-weight:400}.homeTitleGithubIcon{float:right}.homeTitleGithubIcon svg{vertical-align:middle}.homeSectionItems{margin:1em 0}.homeSectionScreenshot{width:390px;max-width:100%;height:auto;border:1px solid #d1d1d1;border-radius:.4em;box-shadow:0 2px 4px #ddd}.homeSectionInstallButton{display:inline-block;padding:.7em;border:2px solid var(--blue-50);color:var(--blue-50);text-decoration:none;transition:background-color .3s;font-weight:700;font-size:16px}.homeSectionInstallButton:hover{color:#fff;background-color:var(--blue-50)}.homeSectionPlus{font-size:26px;line-height:0;position:relative;top:2px;padding-right:12px;padding-left:5px}.homeSectionPerfScreenshot{width:1346px;max-width:90%;height:auto;margin-top:15px;margin-bottom:-40px}.homeInstructions{display:flex;margin-top:30px}.homeInstructionsLeft,.homeInstructionsRight{width:50%}.homeInstructionsRight{padding-left:30px}.homeInstructionsTransitionGroup{position:relative}.homeTransition-enter{opacity:.1;transform:translateX(100px)}.homeTransition-enter.homeTransition-enter-active{opacity:1;transform:translateX(0);transition:opacity .3s ease-out,transform .3s ease-out}@media (max-width:1300px){.homeSection{padding:5em}}@media (max-width:1100px){.homeSection{padding:3em;max-width:80%}.homeInstructions{display:block}.homeInstructionsLeft,.homeInstructionsRight{width:100%}.homeInstructionsLeft{text-align:center}.homeInstructionsRight{padding-left:0}}", ""]);

// exports


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(1);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(2);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(3);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(4);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(9);

var _app = __webpack_require__(82);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UrlManager = function (_PureComponent) {
  (0, _inherits3.default)(UrlManager, _PureComponent);

  function UrlManager() {
    (0, _classCallCheck3.default)(this, UrlManager);
    return (0, _possibleConstructorReturn3.default)(this, (UrlManager.__proto__ || Object.getPrototypeOf(UrlManager)).apply(this, arguments));
  }

  (0, _createClass3.default)(UrlManager, [{
    key: '_updateState',
    value: function _updateState() {
      var _props = this.props,
          updateUrlState = _props.updateUrlState,
          stateFromLocation = _props.stateFromLocation,
          show404 = _props.show404;

      if (window.history.state) {
        updateUrlState(window.history.state);
      } else {
        try {
          var _urlState = stateFromLocation(window.location);
          updateUrlState(_urlState);
        } catch (e) {
          console.error(e);
          show404(window.location.pathname + window.location.search);
        }
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var urlSetupDone = this.props.urlSetupDone;


      this._updateState();
      window.addEventListener('popstate', function () {
        return _this2._updateState();
      });
      urlSetupDone();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props2 = this.props,
          urlFromState = _props2.urlFromState,
          isUrlSetupDone = _props2.isUrlSetupDone;

      var newUrl = urlFromState(nextProps.urlState);
      if (newUrl !== window.location.pathname + window.location.search) {
        if (isUrlSetupDone) {
          window.history.pushState(nextProps.urlState, document.title, newUrl);
        } else {
          window.history.replaceState(nextProps.urlState, document.title, newUrl);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var isUrlSetupDone = this.props.isUrlSetupDone;

      return isUrlSetupDone ? this.props.children : _react2.default.createElement('div', { className: 'processingUrl' });
    }
  }]);
  return UrlManager;
}(_react.PureComponent); /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

UrlManager.propTypes = {
  stateFromLocation: _react.PropTypes.func.isRequired,
  urlFromState: _react.PropTypes.func.isRequired,
  children: _react.PropTypes.any.isRequired,
  urlState: _react.PropTypes.object.isRequired,
  isUrlSetupDone: _react.PropTypes.bool.isRequired,
  updateUrlState: _react.PropTypes.func.isRequired,
  urlSetupDone: _react.PropTypes.func.isRequired,
  show404: _react.PropTypes.func.isRequired
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    urlState: state.urlState,
    isUrlSetupDone: (0, _app.getIsUrlSetupDone)(state)
  };
}, function (dispatch) {
  return {
    updateUrlState: function updateUrlState(urlState) {
      return dispatch({ type: '@@urlenhancer/updateUrlState', urlState: urlState });
    },
    urlSetupDone: function urlSetupDone() {
      return dispatch({ type: '@@urlenhancer/urlSetupDone' });
    },
    show404: function show404(url) {
      return dispatch({ type: 'ROUTE_NOT_FOUND', url: url });
    }
  };
})(UrlManager);

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(533);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js?minimize!./Root.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js?minimize!./Root.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ".rootMessageContainer{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center}.rootMessage{background-color:#fff;max-width:600px;width:80%;padding:3em;box-sizing:border-box;border:1px solid #ccc;border-radius:3px;font-size:130%;box-shadow:0 5px 25px #0b1f50;overflow:hidden}.rootMessageAdditional,.rootMessageText{line-height:1.5}.rootMessageTitle{margin-top:0}.rootMessageAdditional{border-top:1px solid #ccc;padding-top:1em;margin-top:1em;font-size:12px}.loading{position:relative;height:40px;margin-top:10px}.loading-div{position:absolute;height:8px;border-radius:2px;animation-name:loadingdiv;animation-duration:4s;animation-iteration-count:infinite}.loading-row-1{top:0}.loading-row-2{top:10px}.loading-row-3{top:20px}.loading-row-4{top:30px}.loading-div-1{animation-delay:-.9s;background-color:var(--red-50);width:100%}.loading-div-2{animation-delay:-.8s;background-color:var(--blue-50);left:1%;width:97%}.loading-div-3{animation-delay:-.7s;width:30%;left:5%;background-color:var(--orange-50)}.loading-div-4{animation-delay:-.6s;width:53%;left:43%}.loading-div-4,.loading-div-5{background-color:var(--purple-50)}.loading-div-5{animation-delay:-.5s;width:14%;left:8%}.loading-div-6{animation-delay:-.4s;width:11%;left:23%;background-color:var(--green-50)}.loading-div-7{animation-delay:-.3s;width:15%;left:44%}.loading-div-7,.loading-div-8{background-color:var(--orange-50)}.loading-div-8{animation-delay:-.2s;width:17%;left:60%}.loading-div-9{animation-delay:-.1s;width:2%;left:78%;background-color:var(--blue-50)}.loading-div-10{animation-delay:0ms;width:11%;left:81%;background-color:var(--green-60)}@keyframes loadingdiv{0%{transform:translateX(100px);opacity:0}20%{transform:translateX(100px);opacity:0}45%{transform:translateX(0);opacity:1}65%{transform:translateX(0);opacity:1}to{transform:translateX(-100px);opacity:0}}", ""]);

// exports


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initializeStore;

var _redux = __webpack_require__(44);

var _reduxThunk = __webpack_require__(535);

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _reduxLogger = __webpack_require__(536);

var _reducers = __webpack_require__(537);

var _reducers2 = _interopRequireDefault(_reducers);

var _threadMiddleware = __webpack_require__(538);

var _threadMiddleware2 = _interopRequireDefault(_threadMiddleware);

var _messagesContent = __webpack_require__(539);

var _messagesContent2 = _interopRequireDefault(_messagesContent);

var _messageHandler = __webpack_require__(540);

var _messageHandler2 = _interopRequireDefault(_messageHandler);

var _workerFactory = __webpack_require__(129);

var _workerFactory2 = _interopRequireDefault(_workerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Isolate the store creation into a function, so that it can be used outside of the
 * app's execution context, e.g. for testing.
 * @return {object} Redux store.
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function initializeStore() {
  var worker = new _workerFactory2.default('worker');

  var middlewares = [_reduxThunk2.default, (0, _threadMiddleware2.default)(worker, 'toWorker')];

  if (true) {
    middlewares.push((0, _reduxLogger.createLogger)({
      titleFormatter: function titleFormatter(action) {
        return 'content action ' + action.type;
      }
    }));
  }

  var store = (0, _redux.createStore)(_reducers2.default, _redux.applyMiddleware.apply(undefined, middlewares));

  (0, _messageHandler2.default)(worker, store, _messagesContent2.default);

  return store;
}

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

exports['default'] = thunk;

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {!function(e,t){ true?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.reduxLogger=e.reduxLogger||{})}(this,function(e){"use strict";function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function n(e,t,r){n.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:r,enumerable:!0})}function o(e,t){o.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function a(e,t,r){a.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:r,enumerable:!0})}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e}function u(e){var t="undefined"==typeof e?"undefined":N(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,r,c,s,d,p){s=s||[],p=p||[];var g=s.slice(0);if("undefined"!=typeof d){if(c){if("function"==typeof c&&c(g,d))return;if("object"===("undefined"==typeof c?"undefined":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0],t=h[1])}}}g.push(d)}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var y="undefined"==typeof e?"undefined":N(e),v="undefined"==typeof t?"undefined":N(t),b="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m="undefined"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if("date"===u(e)&&e-t!==0)r(new n(g,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;e.length;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])))}else{var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p),S=f(S,i)):l(e[n],void 0,r,c,g,n,p)}),S.forEach(function(e){l(void 0,t[e],r,c,g,e,p)})}p.length=p.length-1}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)))}function c(e,t,r,n){return n=n||[],l(e,t,function(e){e&&n.push(e)},r),n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":s(o[r.path[n]],r.index,r.item);break;case"D":delete o[r.path[n]];break;case"E":case"N":o[r.path[n]]=r.rhs}}else switch(r.kind){case"A":s(e[t],r.index,r.item);break;case"D":e=f(e,t);break;case"E":case"N":e[t]=r.rhs}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)"undefined"==typeof n[r.path[o]]&&(n[r.path[o]]="number"==typeof r.path[o]?[]:{}),n=n[r.path[o]];switch(r.kind){case"A":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case"D":delete n[r.path[o]];break;case"E":case"N":n[r.path[o]]=r.rhs}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":p(o[r.path[n]],r.index,r.item);break;case"D":o[r.path[n]]=r.lhs;break;case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]]}}else switch(r.kind){case"A":p(e[t],r.index,r.item);break;case"D":e[t]=r.lhs;break;case"E":e[t]=r.lhs;break;case"N":e=f(e,t)}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1,n=0;n<o;n++)"undefined"==typeof i[r.path[n]]&&(i[r.path[n]]={}),i=i[r.path[n]];switch(r.kind){case"A":p(i[r.path[n]],r.index,r.item);break;case"D":i[r.path[n]]=r.lhs;break;case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]]}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n)};l(e,t,n)}}function y(e){return"color: "+F[e].color+"; font-weight: bold"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[r.join("."),n,"→",o];case"N":return[r.join("."),o];case"D":return[r.join(".")];case"A":return[r.join(".")+"["+i+"]",a];default:return[]}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed("diff"):r.group("diff")}catch(e){r.log("diff")}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,["%c "+F[t].text,y(t)].concat(P(n)))}):r.log("—— no diff ——");try{r.groupEnd()}catch(e){r.log("—— diff end —— ")}}function m(e,t,r,n){switch("undefined"==typeof e?"undefined":N(e)){case"object":return"function"==typeof e[n]?e[n].apply(e,P(r)):e[n];case"function":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+n),r&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c="undefined"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState,v=x.started-d);var S=n(g),k="function"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?"color: "+f.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E),t.timestamp&&A.push("color: gray; font-weight: lighter;"),t.duration&&A.push("color: gray; font-weight: lighter;");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,["%c "+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,["%c "+O].concat(A)):r.group(O)}catch(e){r.log(O)}var N=m(u,S,[h],"prevState"),P=m(u,S,[S],"action"),C=m(u,S,[y,h],"error"),F=m(u,S,[w],"nextState");if(N)if(f.prevState){var L="color: "+f.prevState(h)+"; font-weight: bold";r[N]("%c prev state",L,h)}else r[N]("prev state",h);if(P)if(f.action){var T="color: "+f.action(S)+"; font-weight: bold";r[P]("%c action    ",T,S)}else r[P]("action    ",S);if(y&&C)if(f.error){var M="color: "+f.error(y,h)+"; font-weight: bold;";r[C]("%c error     ",M,y)}else r[C]("error     ",y);if(F)if(f.nextState){var _="color: "+f.nextState(w)+"; font-weight: bold";r[F]("%c next state",_,w)}else r[F]("next state",w);l&&b(h,w,r,k);try{r.groupEnd()}catch(e){r.log("—— log end ——")}})}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if("undefined"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(r,l))return e(l);var c={};u.push(c),c.started=O.now(),c.startedTime=new Date,c.prevState=n(r()),c.action=l;var s=void 0;if(a)try{s=e(l)}catch(e){c.error=o(e)}else s=e(l);c.took=O.now()-c.started,c.nextState=n(r());var d=t.diff&&"function"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})),u.length=0,c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E("0",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+":"+A(e.getMinutes(),2)+":"+A(e.getSeconds(),2)+"."+A(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k="object"===("undefined"==typeof global?"undefined":N(global))&&global?global:"undefined"!=typeof window?window:{},j=k.DeepDiff,j&&C.push(function(){"undefined"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j,j=void 0)}),t(n,r),t(o,r),t(i,r),t(a,r),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return"undefined"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e()}),C=null),c},enumerable:!0}});var F={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},L={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return"function"==typeof t||"function"==typeof r?S()({dispatch:t,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=L,e.createLogger=S,e.logger=T,e.default=T,Object.defineProperty(e,"__esModule",{value:!0})});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63)))

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _profileView = __webpack_require__(14);

var _profileView2 = _interopRequireDefault(_profileView);

var _app = __webpack_require__(82);

var _app2 = _interopRequireDefault(_app);

var _summaryView = __webpack_require__(197);

var _summaryView2 = _interopRequireDefault(_summaryView);

var _urlState = __webpack_require__(15);

var _urlState2 = _interopRequireDefault(_urlState);

var _stackChart = __webpack_require__(127);

var _stackChart2 = _interopRequireDefault(_stackChart);

var _icons = __webpack_require__(132);

var _icons2 = _interopRequireDefault(_icons);

var _redux = __webpack_require__(44);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _redux.combineReducers)({
  app: _app2.default,
  profileView: _profileView2.default,
  summaryView: _summaryView2.default,
  urlState: _urlState2.default,
  stackChart: _stackChart2.default,
  icons: _icons2.default
}); /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Create a middleware that allows for dispatching actions between threads. This
 * inspects each action, hijacks it if it has a certain key, and then uses postMessage
 * to send it to another thread. The actions are expected to have the following form:
 *
 * const action = {
 *   type: "ACTION_NAME",
 *   // either:
 *   toWorker: true,
 *   // or maybe:
 *   toContent: true,
 *   ...data
 * }
 *
 * The toWorker and toContent can be arbitrarily defined keys, defined by the application,
 * but in this case the intent is to only use toWorker and toContent.
 */

var threadDispatcher = function threadDispatcher(thread, key) {
  return function () {
    return function (next) {
      return function (action) {
        if (action[key]) {
          thread.postMessage(action);
          return undefined;
        }
        return next(action);
      };
    };
  };
};

exports.default = threadDispatcher;

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _profileSummary = __webpack_require__(198);

/**
 * Messages are the translation layer from actions dispatched by the worker
 * thread to the content thread. This de-couples the state of the two threads.
 */
var messages = {}; /* This Source Code Form is subject to the terms of the Mozilla Public
                    * License, v. 2.0. If a copy of the MPL was not distributed with this
                    * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

exports.default = messages;


messages.PROFILE_SUMMARY_PROCESSED = function (message, call) {
  call(_profileSummary.profileSummaryProcessed, message.summary);
};

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMessageHandler;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

function createMessageHandler(thread, store, handlers) {
  function call(fn) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    store.dispatch(fn.apply(undefined, args));
  }

  thread.onmessage = function messageHandler(event) {
    var message = event.data;
    var handler = handlers[message.type];
    if (!handler) {
      throw new Error("A message of type \"" + message.type + "\" was received that did not have a handler");
    }
    handler(message, call);
  };
}

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(542);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../css-loader/index.js?minimize!./colors.css", function() {
			var newContent = require("!!../css-loader/index.js?minimize!./colors.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, ":root{--magenta-50:#ff1ad9;--magenta-60:#ed00b5;--magenta-70:#b5007f;--magenta-80:#7d004f;--magenta-90:#440027;--purple-50:#9400ff;--purple-60:#8000d7;--purple-70:#6200a4;--purple-80:#440071;--purple-90:#25003e;--blue-40:#45a1ff;--blue-50:#0a84ff;--blue-60:#0060df;--blue-70:#003eaa;--blue-80:#002275;--blue-90:#000f40;--teal-50:#00feff;--teal-60:#00c8d7;--teal-70:#008ea4;--teal-80:#005a71;--teal-90:#002d3e;--green-50:#30e60b;--green-60:#12bc00;--green-70:#058b00;--green-80:#006504;--green-90:#003706;--yellow-50:#ffe900;--yellow-60:#d7b600;--yellow-70:#a47f00;--yellow-80:#715100;--yellow-90:#3e2800;--red-50:#ff0039;--red-60:#d70022;--red-70:#a4000f;--red-80:#5a0002;--red-90:#3e0200;--orange-50:#ff9400;--orange-60:#d76e00;--orange-70:#a44900;--orange-80:#712b00;--orange-90:#3e1300;--grey-10:#f9f9fa;--grey-20:#ededf0;--grey-30:#d7d7db;--grey-40:#b1b1b3;--grey-50:#737373;--grey-60:#4a4a4f;--grey-70:#38383d;--grey-80:#2a2a2e;--grey-90:#0c0c0d;--ink-70:#363959;--ink-80:#202340;--ink-90:#0f1126}", ""]);

// exports


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(544);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js?minimize!./style.css", function() {
			var newContent = require("!!../node_modules/css-loader/index.js?minimize!./style.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(10)(undefined);
// imports


// module
exports.push([module.i, "body,html{margin:0;padding:0;font:message-box;font-size:11px;height:100%}#root,.profileViewer,body{display:flex;flex-flow:column nowrap;flex:1;max-height:100%}:root{--animation-curve:cubic-bezier(.07,.95,0,1);color:var(--grey-90)}#root{z-index:0}.profileViewer{background-color:#fff;opacity:0;transition:opacity .2s}.profileViewerIsMounted{opacity:1}.treeView{display:flex;flex-flow:column nowrap;flex:1;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default;border-top:1px solid var(--grey-30)}.treeViewHeader{padding:1px 0;border-bottom:1px solid var(--grey-30);position:relative;height:16px;background:#fff}.treeViewHeaderMainColumn{flex:1}.treeViewContextMenu{flex:1;display:flex}.treeViewBody{flex:1;overflow:auto;position:relative;outline:0;will-change:scroll-position;line-height:16px;z-index:0}.treeViewBodyInnerWrapper{position:absolute;top:0;left:0;display:flex;flex-flow:row nowrap}.treeViewBodyInner0{left:0;position:sticky;z-index:2;min-width:min-content}.treeViewBodyInner{background:#fff;overflow:hidden}.treeViewRow{white-space:nowrap;display:flex;flex-flow:row nowrap;justify-content:flex-start}.treeRowIcon{min-width:14px;min-height:14px;height:100%;background:50%/contain no-repeat}.treeViewHeaderColumn{position:absolute;box-sizing:border-box;padding:1px 5px;top:0;bottom:0;line-height:15px;white-space:nowrap}.treeViewHeaderColumn.treeViewFixedColumn:after{content:\"\";position:absolute;top:3px;right:0;bottom:3px;width:1px;background:#e5e5e5}.treeViewHeaderColumn.selfTime,.treeViewHeaderColumn.totalTime{text-align:right}.treeViewRowColumn.treeViewFixedColumn{box-sizing:border-box;border-right:1px solid var(--grey-30)}.treeViewFixedColumn.totalTime{left:0;width:70px}.treeViewFixedColumn.totalTimePercent{left:70px;width:50px;border-right:none}.treeViewFixedColumn.selfTime{left:120px;width:70px}.treeViewHeaderColumn.totalTime{width:120px}.treeViewFixedColumn.icon{left:190px;width:19px;display:flex;flex-flow:column nowrap;align-items:center}.treeViewRowColumn.selfTime,.treeViewRowColumn.timestamp,.treeViewRowColumn.totalTime,.treeViewRowColumn.totalTimePercent{text-align:right;padding-right:5px}.treeViewRowColumn.category{text-align:left;padding-left:5px}.treeRowIndentSpacer{flex-shrink:0}.treeViewAppendageColumn{margin-left:10px;color:#999}.treeViewRow.even,.treeViewRow.even>.treeViewFixedColumn{background-color:#fff}.treeViewRow.odd,.treeViewRow.odd>.treeViewFixedColumn{background-color:#f5f5f5}.treeViewRow.selected,.treeViewRow.selected>.treeViewFixedColumn{background-color:-moz-dialog;color:#000}.treeViewRow.dim>.treeViewMainColumn{color:#aaa}.treeViewBody:focus>*>*>*>.treeViewRow.selected,.treeViewBody:focus>*>*>*>.treeViewRow.selected>.treeViewFixedColumn{background-color:highlight;color:highlighttext}.treeViewHighlighting{padding:1px;margin:-1px;color:#000;background:#cbe8fe;border-radius:2px;box-shadow:0 0 0 .5px rgba(0,0,0,.05),0 1px 1px rgba(0,0,0,.3);position:relative}.focusCallstackButton,.treeRowToggleButton{background:none 0 0 no-repeat transparent;flex-shrink:0;margin:0;padding:0;border:0;width:16px;height:16px;overflow:hidden;vertical-align:top;color:transparent}.treeRowToggleButton{background-image:url(" + __webpack_require__(545) + ")}.focusCallstackButton{background-image:url(" + __webpack_require__(546) + ");margin-left:5px;visibility:hidden}.focusCallstackButton:active:hover,.treeRowToggleButton:active:hover{background-position:-16px 0}.treeRowToggleButton.collapsed{background-position:0 -16px}.treeRowToggleButton.collapsed:active:hover{background-position:-16px -16px}.treeViewBody:focus>*>*>*>.treeViewRow.selected>.focusCallstackButton,.treeViewBody:focus>*>*>*>.treeViewRow.selected>.treeRowToggleButton{background-position:-32px 0}.treeViewBody:focus>*>*>*>.treeViewRow.selected>.treeRowToggleButton.collapsed{background-position:-32px -16px}.treeViewBody:focus>*>*>*>.treeViewRow.selected>.focusCallstackButton:active:hover,.treeViewBody:focus>*>*>*>.treeViewRow.selected>.treeRowToggleButton:active:hover{background-position:-48px 0}.treeViewBody:focus>*>*>*>.treeViewRow.selected>.treeRowToggleButton.collapsed:active:hover{background-position:-48px -16px}.treeRowToggleButton.leaf{visibility:hidden}.treeViewRow:hover>.focusCallstackButton{visibility:visible}.profileViewerTopBar{height:24px;margin:0;padding:0;display:flex;flex-flow:row nowrap;background:var(--grey-10);border-bottom:1px solid var(--grey-30)}.profileFilterNavigator{height:24px;flex:1}.profileViewerHeader{position:relative;margin-left:149px;border-left:1px solid var(--grey-30);-moz-user-focus:ignore}.profileViewerHeaderTimeRuler{height:20px;overflow:hidden}.profileViewerHeaderTimeRuler:after{content:\"\";position:absolute;top:20px;left:-150px;right:0;height:1px;background:var(--grey-30);z-index:3}.timeRulerContainer{overflow:hidden;list-style:none;margin:0;padding:0;left:0;right:0;-moz-user-select:none;user-select:none;line-height:20px;font-size:9px;color:#888;cursor:default;z-index:1}.timeRulerContainer,.timeRulerNotch{display:block;position:absolute;top:0;bottom:0}.timeRulerNotch{width:1px;margin-left:-1px;white-space:nowrap;text-align:right;background:linear-gradient(transparent,var(--grey-30) 19px,var(--grey-30) 20px,#d7d7db66 0)}.timeRulerNotchText{position:absolute;right:0;padding-right:5px}.profileViewerHeaderOverflowEdgeIndicatorScrollbox{margin:0 0 0 -150px;padding-left:150px;max-height:250px;overflow:auto}.profileThreadHeaderBarIntervalMarkerOverviewContainerJank{border-bottom:1px solid var(--grey-30)}.profileThreadHeaderBarIntervalMarkerOverview{list-style:none;display:block;margin:0;height:6px;position:relative;overflow:hidden;opacity:.75}.profileThreadHeaderBarIntervalMarkerOverview.selected{opacity:1}.profileThreadHeaderBarIntervalMarkerOverviewThreadGeckoMain{height:18px}.intervalMarkerTimelineCanvas{display:block;width:100%;height:100%}.profileViewerHeaderThreadList{list-style:none;margin:0 0 0 -150px;padding:0;box-shadow:inset 0 1px var(--grey-30)}.profileThreadHeaderBarHidden{height:0;pointer-events:none}.profileThreadHeaderBar{margin:0;padding:0;display:flex;flex-flow:row nowrap;border-top:1px solid var(--grey-30);box-shadow:0 1px var(--grey-30)}.profileThreadHeaderBar.selected{background-color:#edf6ff}.profileThreadHeaderBarThreadLabel{box-sizing:border-box;width:150px;border-right:1px solid var(--grey-30);padding-left:14px;cursor:default;display:flex;flex-flow:row nowrap;align-items:center}.profileThreadHeaderBarThreadName{font-weight:400;font:message-box;font-size:100%;margin:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-webkit-user-select:none;-moz-user-select:none;user-select:none}.profileThreadHeaderBarThreadDetails{flex:1;position:relative;z-index:1;display:flex;flex-flow:column nowrap}.threadStackGraph{height:25px}.threadStackGraphCanvas{display:block;height:25px;width:100%}.timeSelectionScrubberHoverIndicator{position:absolute;pointer-events:none;visibility:hidden;top:0;bottom:0;width:1px;background:rgba(0,0,0,.4)}.profileViewerHeader:hover>.timeSelectionScrubberHoverIndicator{visibility:visible}.overlay{position:absolute;z-index:2;display:flex;flex-flow:row nowrap;top:0;left:0;right:0;bottom:0;pointer-events:none;margin-left:-5px;padding-left:5px;overflow:hidden}.dimmerAfter,.dimmerBefore{background:rgba(12,12,13,.1);flex-shrink:0}.dimmerAfter{flex:1}.selectionScrubberGrippy{height:20px;pointer-events:auto;display:flex;flex-flow:row nowrap}.grippyRangeEnd,.grippyRangeStart{width:0;padding:3px;background:#aaa;border:1px solid #fff;margin:0 -4px;cursor:ew-resize;border-radius:5px;position:relative;z-index:3}.grippyRangeEnd.dragging,.grippyRangeEnd:hover,.grippyRangeStart.dragging,.grippyRangeStart:hover{background:#888}.grippyMoveRange{flex:1;cursor:-webkit-grab;cursor:grab}.grippyMoveRange.dragging{cursor:-webkit-grabbing;cursor:grabbing}.selectionScrubberWrapper{display:flex;flex-flow:column nowrap}.selectionScrubberInner{flex:1;justify-content:center;align-items:center;display:flex;min-width:0;min-height:0}.selectionScrubberRange{top:20px;position:absolute;padding:4px 8px;color:#fff;background-color:var(--blue-50);border-radius:0 0 4px 4px;box-shadow:0 2px 2px rgba(0,0,0,.2);pointer-events:none;opacity:1;transition:opacity .2s}.selectionScrubberRange.hidden{opacity:0}.selectionScrubberZoomButton{width:30px;height:30px;pointer-events:auto;box-sizing:border-box;border-radius:100%;margin:-15px;position:relative;border:1px solid rgba(0,0,0,.2);background:url(" + __webpack_require__(547) + ") 50% no-repeat hsla(0,0%,100%,.6);transition:opacity .2s ease-in-out;will-change:opacity;opacity:.5}.selectionScrubberZoomButton.hidden{opacity:0!important;pointer-events:none;transition:unset}.profileViewerHeader:hover .selectionScrubberZoomButton,.selectionScrubberZoomButton:active{opacity:1}.selectionScrubberZoomButton:hover{background-color:hsla(0,0%,100%,.9)}.selectionScrubberZoomButton:active:hover{background-color:hsla(0,0%,63%,.6)}.tabBarContainer{display:flex;flex-flow:row nowrap;background:var(--grey-10);position:relative;border:solid var(--grey-30);border-width:1px 0}.tabBarTabWrapper{margin:0;padding:0 .5px;list-style:none;display:flex;flex-flow:row nowrap;margin:0 -1px;max-width:100%}.tabBarTab{font-size:12px;width:8em;cursor:default;-moz-user-select:none;text-align:center;padding:6px 4px;white-space:nowrap;background-clip:padding-box;transition:background-color .2s,border-color .2s;transition-timing-function:var(--animation-timing);position:relative;border:solid transparent;border-width:0 1px}.tabBarTab.selected{background:#fff;color:var(--blue-60);border-color:var(--grey-30);top:1px;padding-top:5px}.tabBarTab:before{content:\"\";position:absolute;width:calc(100% + 2px);height:2px;left:-1px;background-color:transparent;transition:background-color .2s,border-color .2s;transition-timing-function:var(--animation-timing);top:0}.tabBarTab.selected:before{top:-1px;background-color:var(--blue-50)}.tabBarTabWrapper:not(.beingReordered)>.tabBarTab:not(.selected):hover{background-color:var(--grey-20);border-color:var(--grey-20)}.tabBarTabWrapper:not(.beingReordered)>.tabBarTab:not(.selected):hover:before{background-color:var(--grey-40)}.profileSummaryView{border-top:1px solid var(--grey-30);padding:10px;flex:1;overflow-y:auto}.treeViewFixedColumn.timestamp{left:0;width:80px;border-right:none}.treeViewFixedColumn.category{left:80px;width:70px}.treeAndSidebarWrapper{flex:1;display:flex;flex-flow:column nowrap}.logViewWrapper,.taskTracerViewWrapper{border-top:1px solid var(--grey-30);flex:1;overflow:auto;position:relative}.logViewPre{position:absolute;top:0;left:0;margin:0;padding:10px}.profileSummaryP{margin:0}.taskTracerView{position:absolute;top:0;left:0;right:0;display:block;margin:0;padding:0;list-style:none;display:flex;flex-flow:column nowrap}.taskTracerThreadView{display:flex;flex-flow:row nowrap}.taskTracerThreadViewThreadName{width:150px;margin:0;border-right:1px solid var(--grey-30);border-bottom:1px solid var(--grey-30);font-size:1em;font-weight:400;box-sizing:border-box;padding:5px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.taskTracerThreadViewTracks{flex:1;display:flex;flex-flow:column nowrap}.taskTracerThreadViewTrack{list-style:none;display:block;margin:0;padding:0;height:4px;position:relative;overflow:hidden}.taskTracerThreadViewTrackTask{margin:0;position:absolute;z-index:2;top:0;height:4px;border-bottom:1px solid #fff;background:#7990c8;box-sizing:border-box}.taskTracerThreadViewTrackTask:hover{background:#38445f}.taskTracerThreadViewTrackTaskBeginDelay{display:block;position:absolute;top:0;border-top:1px solid #fff;border-bottom:2px solid #fff;height:1px;background-color:inherit;opacity:.4}.initializing{position:absolute;width:100%;height:100%;display:flex;align-items:center;justify-content:center;line-height:1.5}.initializing-text{max-width:50%;border:1px solid #ccc;padding:3em;font-size:130%}.initializing-text h1{margin-top:0;margin-bottom:.5em;padding-bottom:.5em;border-bottom:1px solid #ddd}.initializing-text span{background-color:#f6f6f6;border:1px solid #ccc;border-radius:.2em;display:inline-block;padding:0 .5em;box-shadow:.1em .1em 0 #bbb;margin:0 .2em}.initializing-text li{margin:1em 0}.symbolicationStatusOverlay{position:fixed;top:-8px;padding-top:8px;left:30%;right:30%;background:rgba(0,0,0,.07);text-align:center;padding-left:10px;padding-right:10px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;height:20px;line-height:20px;border-radius:0 0 5px 5px;transition:transform .2s ease-in-out,opacity .2s ease-in-out;box-shadow:0 0 0 .5px rgba(0,0,0,.1),0 2px 4px rgba(0,0,0,.1);will-change:opacity,transform}.symbolicationStatusOverlay.hidden{opacity:0;transform:translateY(-30px)}.filler{animation-name:filler;animation-duration:1s;animation-iteration-count:infinite}@keyframes filler{0%{opacity:1;animation-timing-function:ease-out}50%{opacity:.5;animation-timing-function:ease-in-out}to{opacity:1;animation-timing-function:ease-in}}.react-contextmenu{min-width:160px;padding:5px 0;margin:2px 0 0;font-size:12px;color:#000;text-align:left;background-color:#fff;border-radius:3px;display:none;box-shadow:0 0 0 .5px rgba(0,0,0,.1),0 10px 12px rgba(0,0,0,.3);z-index:2;-webkit-user-select:none;-moz-user-select:none;user-select:none}.react-contextmenu-separator{border-bottom:1px solid #ddd;margin:6px 0}.react-contextmenu.react-contextmenu--visible{display:block}.react-contextmenu-item{padding:2px 12px;line-height:1.5;white-space:nowrap;cursor:default}.react-contextmenu-item.react-contextmenu-item--active,.react-contextmenu-item:hover{color:highlighttext;background-color:highlight;border-color:highlight;text-decoration:none}.react-contextmenu-item.react-contextmenu-item--disabled,.react-contextmenu-item.react-contextmenu-item--disabled:hover{color:#888;background-color:transparent}.react-contextmenu-item--divider{margin-bottom:3px;padding:2px 0;border-bottom:1px solid rgba(0,0,0,.15)}.react-contextmenu-item.react-contextmenu-submenu{padding:0}.react-contextmenu-item.react-contextmenu-submenu>.react-contextmenu-item:after{position:absolute;right:7px;width:0;height:0;border:6px solid transparent;content:\"\";border-left-color:#000;top:5px}.react-contextmenu-item.react-contextmenu-submenu>.react-contextmenu-item--active:after,.react-contextmenu-item:hover.react-contextmenu-submenu>.react-contextmenu-item:after{border-left-color:highlighttext}.react-contextmenu-item.checkable{padding-left:21px;position:relative}.react-contextmenu-item.checked:before{content:\"\";display:block;position:absolute;left:8px;top:6px;width:3px;height:6px;border:solid #000;border-width:0 2px 2px 0;transform:rotate(45deg)}.react-contextmenu-item.checked:hover,.react-contextmenu-item.react-contextmenu-item--active.checked{border-color:#fff}", ""]);

// exports


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "5a4b295e75ec6ca8c25ba620e6427cbd.svg";

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "831dc342f85dbe025665a9b34ac3acb2.svg";

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "9850db4438f6ca2d3535fdc2091a9afa.svg";

/***/ })
/******/ ]);
//# sourceMappingURL=750413ad8705f5088a79.bundle.js.map